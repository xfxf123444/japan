; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.220 

	TITLE	f:\tech\blkmover\cur_ver\sys\blkmover.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_g_pMoverData
PUBLIC	_g_pSharkData
PUBLIC	_g_dwSharkDrive
PUBLIC	_g_dwMoverDrive
PUBLIC	_g_partitionInfo
PUBLIC	_g_bReLocate
PUBLIC	_g_dwOrig1st
PUBLIC	_g_dwOrigLast
PUBLIC	_g_pImgSecAddrList
PUBLIC	_g_pSharkCache
PUBLIC	_g_pMoverCache
PUBLIC	_g_pCacheObjNodePool
PUBLIC	_g_pBMObjNodePool
PUBLIC	_g_pListPool
PUBLIC	_g_pDataRegionLRUList
PUBLIC	_g_pDataRegionListHead
PUBLIC	_g_pDataRegionListTail
PUBLIC	_g_dwNumDataRegionLoaded
PUBLIC	_g_pProtectFreeListOld
PUBLIC	_g_pProtectFreeList
PUBLIC	_g_pProtectList
PUBLIC	_g_dwFreeStart
PUBLIC	_g_dwFreeSize
PUBLIC	_g_FreeSpaceList
PUBLIC	_g_bEnableProtect
_DATA	SEGMENT
COMM	_g_SecGroupBuf:BYTE:0cH
COMM	_g_MovingGroup:BYTE:014H
COMM	_g_bPartitionSet:DWORD
COMM	_g_bBlkMovSucc:DWORD
COMM	_g_dwMaxSec:DWORD
COMM	_DiskPerfRegistryPath:QWORD
COMM	_g_dwMovedSecs:DWORD
COMM	_g_dwSysRecPages:DWORD
COMM	_g_dwSysRecNum:DWORD
COMM	_g_dwOldPri:DWORD
COMM	_g_IrpSpinLock:DWORD
COMM	_g_dwDataRecPages:DWORD
COMM	_g_dwSysStart:DWORD
COMM	_g_FinalGroup:BYTE:0180H
COMM	_g_dwDataRecNum:DWORD
COMM	_g_dwRePointer:DWORD
COMM	_g_SharkCache:BYTE:014H
COMM	_g_dwDataStart:DWORD
COMM	_g_dwReadEnd:DWORD
COMM	_g_pCompInitBuf:DWORD
COMM	_g_dwMinSec:DWORD
COMM	_g_MoverCache:BYTE:014H
COMM	_g_dwMovedRecNum:DWORD
_DATA	ENDS
_BSS	SEGMENT
_g_pMoverData DD 01H DUP (?)
_g_pSharkData DD 01H DUP (?)
_g_dwSharkDrive DD 01H DUP (?)
_g_dwMoverDrive DD 01H DUP (?)
_g_partitionInfo DD 01H DUP (?)
_g_bReLocate DD	01H DUP (?)
_g_dwOrig1st DD	01H DUP (?)
_g_dwOrigLast DD 01H DUP (?)
_g_pImgSecAddrList DD 01H DUP (?)
_g_pSharkCache DD 01H DUP (?)
_g_pMoverCache DD 01H DUP (?)
_g_pCacheObjNodePool DD 01H DUP (?)
_g_pBMObjNodePool DD 01H DUP (?)
_g_pListPool DD	01H DUP (?)
_g_pDataRegionLRUList DD 01H DUP (?)
_g_pDataRegionListHead DD 01H DUP (?)
_g_pDataRegionListTail DD 01H DUP (?)
_g_dwNumDataRegionLoaded DD 01H DUP (?)
_g_pProtectFreeListOld DD 01H DUP (?)
_g_pProtectFreeList DD 01H DUP (?)
_g_pProtectList DD 01H DUP (?)
_g_dwFreeStart DD 01H DUP (?)
_g_dwFreeSize DD 01H DUP (?)
_g_FreeSpaceList DD 01H DUP (?)
_g_bEnableProtect DD 01H DUP (?)
_BSS	ENDS
PUBLIC	_SetMoverPara@4
EXTRN	__imp__ExAllocatePoolWithTag@12:PROC
EXTRN	_memset:PROC
; Function compile flags: /Odtp
;	COMDAT _SetMoverPara@4
_TEXT	SEGMENT
_i$ = -4						; size = 4
_pPara$ = 8						; size = 4
_SetMoverPara@4 PROC					; COMDAT
; File f:\tech\blkmover\cur_ver\sys\blkmover.c
; Line 118
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx
; Line 125
  00006	8b 45 08	 mov	 eax, DWORD PTR _pPara$[ebp]
  00009	0f b6 08	 movzx	 ecx, BYTE PTR [eax]
  0000c	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwMoverDrive, ecx
; Line 126
  00012	8b 55 08	 mov	 edx, DWORD PTR _pPara$[ebp]
  00015	0f b6 42 01	 movzx	 eax, BYTE PTR [edx+1]
  00019	a3 00 00 00 00	 mov	 DWORD PTR _g_dwSharkDrive, eax
; Line 127
  0001e	8b 4d 08	 mov	 ecx, DWORD PTR _pPara$[ebp]
  00021	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00024	89 15 00 00 00
	00		 mov	 DWORD PTR _g_dwDataStart, edx
; Line 128
  0002a	8b 45 08	 mov	 eax, DWORD PTR _pPara$[ebp]
  0002d	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00030	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwDataRecNum, ecx
; Line 129
  00036	8b 55 08	 mov	 edx, DWORD PTR _pPara$[ebp]
  00039	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0003c	a3 00 00 00 00	 mov	 DWORD PTR _g_dwDataRecPages, eax
; Line 130
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _pPara$[ebp]
  00044	8b 51 10	 mov	 edx, DWORD PTR [ecx+16]
  00047	89 15 00 00 00
	00		 mov	 DWORD PTR _g_dwSysStart, edx
; Line 131
  0004d	8b 45 08	 mov	 eax, DWORD PTR _pPara$[ebp]
  00050	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  00053	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwSysRecNum, ecx
; Line 132
  00059	8b 55 08	 mov	 edx, DWORD PTR _pPara$[ebp]
  0005c	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  0005f	a3 00 00 00 00	 mov	 DWORD PTR _g_dwSysRecPages, eax
; Line 133
  00064	8b 4d 08	 mov	 ecx, DWORD PTR _pPara$[ebp]
  00067	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0006a	89 15 00 00 00
	00		 mov	 DWORD PTR _g_dwOrig1st, edx
; Line 134
  00070	8b 45 08	 mov	 eax, DWORD PTR _pPara$[ebp]
  00073	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  00076	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwOrigLast, ecx
; Line 135
  0007c	8b 55 08	 mov	 edx, DWORD PTR _pPara$[ebp]
  0007f	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  00082	a3 00 00 00 00	 mov	 DWORD PTR _g_dwFreeStart, eax
; Line 136
  00087	8b 4d 08	 mov	 ecx, DWORD PTR _pPara$[ebp]
  0008a	8b 51 28	 mov	 edx, DWORD PTR [ecx+40]
  0008d	89 15 00 00 00
	00		 mov	 DWORD PTR _g_dwFreeSize, edx
; Line 138
  00093	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pProtectList, 0
; Line 139
  0009d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pProtectFreeList, 0
; Line 140
  000a7	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pProtectFreeListOld, 0
; Line 141
  000b1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_dwMovedSecs, 0
; Line 142
  000bb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_dwMovedRecNum, 0
; Line 143
  000c5	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_bEnableProtect, 0
; Line 144
  000cf	33 c0		 xor	 eax, eax
  000d1	a3 00 00 00 00	 mov	 DWORD PTR _g_SecGroupBuf, eax
  000d6	a3 04 00 00 00	 mov	 DWORD PTR _g_SecGroupBuf+4, eax
  000db	a3 08 00 00 00	 mov	 DWORD PTR _g_SecGroupBuf+8, eax
; Line 181
  000e0	68 44 50 72 66	 push	 1718767684		; 66725044H
  000e5	68 00 00 50 00	 push	 5242880			; 00500000H
  000ea	6a 00		 push	 0
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  000f2	a3 00 00 00 00	 mov	 DWORD PTR _g_pProtectFreeList, eax
; Line 182
  000f7	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pProtectFreeList, 0
  000fe	75 07		 jne	 SHORT $LN6@SetMoverPa
  00100	33 c0		 xor	 eax, eax
  00102	e9 a7 00 00 00	 jmp	 $LN7@SetMoverPa
$LN6@SetMoverPa:
; Line 183
  00107	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pProtectFreeList
  0010d	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_pProtectFreeListOld, ecx
; Line 184
  00113	68 00 00 50 00	 push	 5242880			; 00500000H
  00118	6a 00		 push	 0
  0011a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_pProtectFreeList
  00120	52		 push	 edx
  00121	e8 00 00 00 00	 call	 _memset
  00126	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 185
  00129	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00130	eb 09		 jmp	 SHORT $LN5@SetMoverPa
$LN4@SetMoverPa:
  00132	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00135	83 c0 01	 add	 eax, 1
  00138	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN5@SetMoverPa:
  0013b	81 7d fc 00 00
	04 00		 cmp	 DWORD PTR _i$[ebp], 262144 ; 00040000H
  00142	7d 51		 jge	 SHORT $LN3@SetMoverPa
; Line 187
  00144	81 7d fc ff ff
	03 00		 cmp	 DWORD PTR _i$[ebp], 262143 ; 0003ffffH
  0014b	74 20		 je	 SHORT $LN2@SetMoverPa
; Line 188
  0014d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00150	6b c9 14	 imul	 ecx, 20			; 00000014H
  00153	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_pProtectFreeList
  00159	8d 44 0a 14	 lea	 eax, DWORD PTR [edx+ecx+20]
  0015d	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  00160	6b c9 14	 imul	 ecx, 20			; 00000014H
  00163	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_pProtectFreeList
  00169	89 44 0a 0c	 mov	 DWORD PTR [edx+ecx+12], eax
$LN2@SetMoverPa:
; Line 189
  0016d	83 7d fc 00	 cmp	 DWORD PTR _i$[ebp], 0
  00171	74 20		 je	 SHORT $LN1@SetMoverPa
; Line 190
  00173	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00176	6b c0 14	 imul	 eax, 20			; 00000014H
  00179	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pProtectFreeList
  0017f	8d 54 01 ec	 lea	 edx, DWORD PTR [ecx+eax-20]
  00183	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00186	6b c0 14	 imul	 eax, 20			; 00000014H
  00189	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pProtectFreeList
  0018f	89 54 01 10	 mov	 DWORD PTR [ecx+eax+16], edx
$LN1@SetMoverPa:
; Line 191
  00193	eb 9d		 jmp	 SHORT $LN4@SetMoverPa
$LN3@SetMoverPa:
; Line 193
  00195	68 44 50 72 66	 push	 1718767684		; 66725044H
  0019a	68 00 00 04 00	 push	 262144			; 00040000H
  0019f	6a 00		 push	 0
  001a1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  001a7	a3 08 00 00 00	 mov	 DWORD PTR _g_SecGroupBuf+8, eax
; Line 194
  001ac	33 c0		 xor	 eax, eax
$LN7@SetMoverPa:
; Line 196
  001ae	8b e5		 mov	 esp, ebp
  001b0	5d		 pop	 ebp
  001b1	c2 04 00	 ret	 4
_SetMoverPara@4 ENDP
_TEXT	ENDS
PUBLIC	_DelFreeSpaceList@0
PUBLIC	_EnableOrDisable@8
EXTRN	__imp__ExFreePoolWithTag@8:PROC
; Function compile flags: /Odtp
;	COMDAT _EnableOrDisable@8
_TEXT	SEGMENT
_bEnableOrDisable$ = 8					; size = 1
_pDeviceObject$ = 12					; size = 4
_EnableOrDisable@8 PROC					; COMDAT
; Line 216
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
; Line 217
  00005	0f b6 45 08	 movzx	 eax, BYTE PTR _bEnableOrDisable$[ebp]
  00009	85 c0		 test	 eax, eax
  0000b	74 51		 je	 SHORT $LN5@EnableOrDi
; Line 219
  0000d	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_dwOrigLast, 0
; Line 220
  00017	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_dwOrig1st, 0
; Line 221
  00021	68 44 50 72 66	 push	 1718767684		; 66725044H
  00026	6a 0c		 push	 12			; 0000000cH
  00028	6a 00		 push	 0
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  00030	a3 00 00 00 00	 mov	 DWORD PTR _g_pMoverData, eax
; Line 222
  00035	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pMoverData, 0
  0003c	74 1b		 je	 SHORT $LN4@EnableOrDi
; Line 224
  0003e	33 c9		 xor	 ecx, ecx
  00040	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_pMoverData
  00046	89 0a		 mov	 DWORD PTR [edx], ecx
  00048	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0004b	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
; Line 225
  0004e	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pMoverData
  00053	8b 4d 0c	 mov	 ecx, DWORD PTR _pDeviceObject$[ebp]
  00056	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN4@EnableOrDi:
; Line 228
  00059	e9 81 00 00 00	 jmp	 $LN3@EnableOrDi
$LN5@EnableOrDi:
; Line 230
  0005e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_pMoverData
  00064	c7 02 00 00 00
	00		 mov	 DWORD PTR [edx], 0
; Line 231
  0006a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_dwMovedRecNum, 0
; Line 232
  00074	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_bEnableProtect, 0
; Line 233
  0007e	6a 00		 push	 0
  00080	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pMoverData
  00085	50		 push	 eax
  00086	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePoolWithTag@8
; Line 234
  0008c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pProtectFreeListOld, 0
  00093	74 0f		 je	 SHORT $LN2@EnableOrDi
; Line 235
  00095	6a 00		 push	 0
  00097	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pProtectFreeListOld
  0009d	51		 push	 ecx
  0009e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePoolWithTag@8
$LN2@EnableOrDi:
; Line 236
  000a4	83 3d 08 00 00
	00 00		 cmp	 DWORD PTR _g_SecGroupBuf+8, 0
  000ab	74 0f		 je	 SHORT $LN1@EnableOrDi
; Line 237
  000ad	6a 00		 push	 0
  000af	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_SecGroupBuf+8
  000b5	52		 push	 edx
  000b6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePoolWithTag@8
$LN1@EnableOrDi:
; Line 238
  000bc	e8 00 00 00 00	 call	 _DelFreeSpaceList@0
; Line 239
  000c1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pMoverData, 0
; Line 240
  000cb	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pProtectFreeListOld, 0
; Line 241
  000d5	c7 05 08 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_SecGroupBuf+8, 0
$LN3@EnableOrDi:
; Line 243
  000df	33 c0		 xor	 eax, eax
; Line 244
  000e1	5d		 pop	 ebp
  000e2	c2 08 00	 ret	 8
_EnableOrDisable@8 ENDP
_TEXT	ENDS
PUBLIC	_PostScript@4
; Function compile flags: /Odtp
;	COMDAT _PostScript@4
_TEXT	SEGMENT
_bRetVal$ = -24						; size = 4
_bReboot$ = 8						; size = 4
_PostScript@4 PROC					; COMDAT
; Line 306
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 20	 sub	 esp, 32			; 00000020H
; Line 312
  00008	c7 45 e8 01 00
	00 00		 mov	 DWORD PTR _bRetVal$[ebp], 1
; Line 324
  0000f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_MoverCache, 0
  00016	74 0e		 je	 SHORT $LN4@PostScript
; Line 325
  00018	6a 00		 push	 0
  0001a	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_MoverCache
  0001f	50		 push	 eax
  00020	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePoolWithTag@8
$LN4@PostScript:
; Line 327
  00026	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pMoverData, 0
  0002d	74 19		 je	 SHORT $LN3@PostScript
; Line 329
  0002f	6a 00		 push	 0
  00031	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pMoverData
  00037	51		 push	 ecx
  00038	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePoolWithTag@8
; Line 330
  0003e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pMoverData, 0
$LN3@PostScript:
; Line 332
  00048	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pSharkData, 0
  0004f	74 19		 je	 SHORT $LN2@PostScript
; Line 334
  00051	6a 00		 push	 0
  00053	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_pSharkData
  00059	52		 push	 edx
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePoolWithTag@8
; Line 335
  00060	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pSharkData, 0
$LN2@PostScript:
; Line 337
  0006a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_partitionInfo, 0
  00071	74 18		 je	 SHORT $LN1@PostScript
; Line 339
  00073	6a 00		 push	 0
  00075	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_partitionInfo
  0007a	50		 push	 eax
  0007b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePoolWithTag@8
; Line 340
  00081	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_partitionInfo, 0
$LN1@PostScript:
; Line 342
  0008b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_bBlkMovSucc, 0
; Line 343
  00095	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_bPartitionSet, 0
; Line 350
  0009f	33 c0		 xor	 eax, eax
; Line 352
  000a1	8b e5		 mov	 esp, ebp
  000a3	5d		 pop	 ebp
  000a4	c2 04 00	 ret	 4
_PostScript@4 ENDP
_TEXT	ENDS
PUBLIC	_FreeMoverBuffer@0
; Function compile flags: /Odtp
;	COMDAT _FreeMoverBuffer@0
_TEXT	SEGMENT
_dwCachePages$ = -20					; size = 4
_dwSharkCacheSize$ = -16				; size = 4
_dwMoverCacheSize$ = -12				; size = 4
_pCacheBuf$ = -8					; size = 4
_dwCacheSectors$ = -4					; size = 4
_FreeMoverBuffer@0 PROC					; COMDAT
; Line 356
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 14	 sub	 esp, 20			; 00000014H
; Line 363
  00008	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_MoverCache, 0
  0000f	74 0e		 je	 SHORT $LN1@FreeMoverB
; Line 367
  00011	6a 00		 push	 0
  00013	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_MoverCache
  00018	50		 push	 eax
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePoolWithTag@8
$LN1@FreeMoverB:
; Line 370
  0001f	c7 45 f4 00 00
	02 00		 mov	 DWORD PTR _dwMoverCacheSize$[ebp], 131072 ; 00020000H
; Line 371
  00026	c7 45 f0 00 08
	00 00		 mov	 DWORD PTR _dwSharkCacheSize$[ebp], 2048 ; 00000800H
; Line 373
  0002d	8b 4d f4	 mov	 ecx, DWORD PTR _dwMoverCacheSize$[ebp]
  00030	8b 55 f0	 mov	 edx, DWORD PTR _dwSharkCacheSize$[ebp]
  00033	8d 84 0a ff 01
	00 00		 lea	 eax, DWORD PTR [edx+ecx+511]
  0003a	c1 e8 09	 shr	 eax, 9
  0003d	89 45 fc	 mov	 DWORD PTR _dwCacheSectors$[ebp], eax
; Line 374
  00040	8b 4d fc	 mov	 ecx, DWORD PTR _dwCacheSectors$[ebp]
  00043	83 c1 07	 add	 ecx, 7
  00046	c1 e9 03	 shr	 ecx, 3
  00049	89 4d ec	 mov	 DWORD PTR _dwCachePages$[ebp], ecx
; Line 378
  0004c	68 44 50 72 66	 push	 1718767684		; 66725044H
  00051	8b 55 ec	 mov	 edx, DWORD PTR _dwCachePages$[ebp]
  00054	c1 e2 09	 shl	 edx, 9
  00057	c1 e2 03	 shl	 edx, 3
  0005a	52		 push	 edx
  0005b	6a 00		 push	 0
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  00063	89 45 f8	 mov	 DWORD PTR _pCacheBuf$[ebp], eax
; Line 381
  00066	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pMoverCache, OFFSET _g_MoverCache
; Line 382
  00070	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_pSharkCache, OFFSET _g_SharkCache
; Line 383
  0007a	b8 01 00 00 00	 mov	 eax, 1
; Line 384
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
_FreeMoverBuffer@0 ENDP
_TEXT	ENDS
PUBLIC	_ForceReboot@0
; Function compile flags: /Odtp
;	COMDAT _ForceReboot@0
_TEXT	SEGMENT
_ForceReboot@0 PROC					; COMDAT
; Line 387
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
; Line 389
  00005	cd 08		 int	 8
; Line 391
  00007	5d		 pop	 ebp
  00008	c3		 ret	 0
_ForceReboot@0 ENDP
_TEXT	ENDS
PUBLIC	_GetNextSecsGroup@20
PUBLIC	??_C@_0BJ@KNDAHNNE@status?5?$DN?$DN?5STATUS_SUCCESS?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_06DGIFJIGI@dwSecs?$AA@FNODOBFM@		;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	_GetFirstSecsGroup@20
PUBLIC	_SearchGroups@20
EXTRN	_SyncReadWriteSec@20:PROC
EXTRN	__imp__RtlAssert@16:PROC
;	COMDAT ??_C@_0BJ@KNDAHNNE@status?5?$DN?$DN?5STATUS_SUCCESS?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BJ@KNDAHNNE@status?5?$DN?$DN?5STATUS_SUCCESS?$AA@FNODOBFM@ DB 'sta'
	DB	'tus == STATUS_SUCCESS', 00H			;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_06DGIFJIGI@dwSecs?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_06DGIFJIGI@dwSecs?$AA@FNODOBFM@ DB 'dwSecs', 00H	;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
text$s	SEGMENT
??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@ DB 'f'
	DB	':\tech\blkmover\cur_ver\sys\blkmover.c', 00H ;  ?? ::FNODOBFM::`string'
; Function compile flags: /Odtp
text$s	ENDS
;	COMDAT _SearchGroups@20
_TEXT	SEGMENT
tv205 = -76						; size = 4
tv192 = -72						; size = 4
tv184 = -68						; size = 4
tv166 = -64						; size = 4
tv150 = -60						; size = 4
tv143 = -56						; size = 4
tv130 = -52						; size = 4
tv85 = -48						; size = 4
tv78 = -44						; size = 4
_dwEndSec$ = -40					; size = 4
_hHandle$ = -36						; size = 8
_status$ = -28						; size = 4
_pGroup$ = -24						; size = 4
_dwStartSec$ = -20					; size = 4
_dwStop$ = -16						; size = 4
_dwCurPos$ = -8						; size = 4
_dwSecs$ = -4						; size = 4
_MajorFunction$ = 8					; size = 1
_dwStart$ = 12						; size = 4
_dwSectors$ = 16					; size = 4
_pvBuffer$ = 20						; size = 4
_DeviceObject$ = 24					; size = 4
_SearchGroups@20 PROC					; COMDAT
; Line 395
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 4c	 sub	 esp, 76			; 0000004cH
; Line 409
  00008	8d 45 e4	 lea	 eax, DWORD PTR _status$[ebp]
  0000b	50		 push	 eax
  0000c	8b 4d 10	 mov	 ecx, DWORD PTR _dwSectors$[ebp]
  0000f	51		 push	 ecx
  00010	8b 55 0c	 mov	 edx, DWORD PTR _dwStart$[ebp]
  00013	52		 push	 edx
  00014	8d 45 dc	 lea	 eax, DWORD PTR _hHandle$[ebp]
  00017	50		 push	 eax
  00018	8b 4d 18	 mov	 ecx, DWORD PTR _DeviceObject$[ebp]
  0001b	51		 push	 ecx
  0001c	e8 00 00 00 00	 call	 _GetFirstSecsGroup@20
  00021	89 45 e8	 mov	 DWORD PTR _pGroup$[ebp], eax
; Line 410
  00024	83 7d e4 00	 cmp	 DWORD PTR _status$[ebp], 0
  00028	74 08		 je	 SHORT $LN12@SearchGrou
; Line 411
  0002a	8b 45 e4	 mov	 eax, DWORD PTR _status$[ebp]
  0002d	e9 00 03 00 00	 jmp	 $LN13@SearchGrou
$LN12@SearchGrou:
; Line 412
  00032	83 7d e8 00	 cmp	 DWORD PTR _pGroup$[ebp], 0
  00036	0f 84 c6 02 00
	00		 je	 $LN11@SearchGrou
; Line 414
  0003c	8b 55 0c	 mov	 edx, DWORD PTR _dwStart$[ebp]
  0003f	89 55 ec	 mov	 DWORD PTR _dwStartSec$[ebp], edx
; Line 415
  00042	8b 45 0c	 mov	 eax, DWORD PTR _dwStart$[ebp]
  00045	03 45 10	 add	 eax, DWORD PTR _dwSectors$[ebp]
  00048	89 45 d8	 mov	 DWORD PTR _dwEndSec$[ebp], eax
; Line 416
  0004b	8b 4d ec	 mov	 ecx, DWORD PTR _dwStartSec$[ebp]
  0004e	89 4d f8	 mov	 DWORD PTR _dwCurPos$[ebp], ecx
$LN10@SearchGrou:
; Line 418
  00051	83 7d e8 00	 cmp	 DWORD PTR _pGroup$[ebp], 0
  00055	0f 84 3e 02 00
	00		 je	 $LN9@SearchGrou
  0005b	8b 55 f8	 mov	 edx, DWORD PTR _dwCurPos$[ebp]
  0005e	3b 55 d8	 cmp	 edx, DWORD PTR _dwEndSec$[ebp]
  00061	0f 83 32 02 00
	00		 jae	 $LN9@SearchGrou
  00067	83 7d e4 00	 cmp	 DWORD PTR _status$[ebp], 0
  0006b	0f 85 28 02 00
	00		 jne	 $LN9@SearchGrou
; Line 420
  00071	8b 45 e8	 mov	 eax, DWORD PTR _pGroup$[ebp]
  00074	8b 4d f8	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  00077	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00079	0f 83 bd 00 00
	00		 jae	 $LN8@SearchGrou
; Line 423
  0007f	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], 0
; Line 424
  00086	8b 55 e8	 mov	 edx, DWORD PTR _pGroup$[ebp]
  00089	8b 45 d8	 mov	 eax, DWORD PTR _dwEndSec$[ebp]
  0008c	3b 02		 cmp	 eax, DWORD PTR [edx]
  0008e	73 08		 jae	 SHORT $LN15@SearchGrou
  00090	8b 4d d8	 mov	 ecx, DWORD PTR _dwEndSec$[ebp]
  00093	89 4d d4	 mov	 DWORD PTR tv78[ebp], ecx
  00096	eb 08		 jmp	 SHORT $LN16@SearchGrou
$LN15@SearchGrou:
  00098	8b 55 e8	 mov	 edx, DWORD PTR _pGroup$[ebp]
  0009b	8b 02		 mov	 eax, DWORD PTR [edx]
  0009d	89 45 d4	 mov	 DWORD PTR tv78[ebp], eax
$LN16@SearchGrou:
  000a0	8b 4d d4	 mov	 ecx, DWORD PTR tv78[ebp]
  000a3	89 4d f0	 mov	 DWORD PTR _dwStop$[ebp], ecx
; Line 425
  000a6	8b 55 f0	 mov	 edx, DWORD PTR _dwStop$[ebp]
  000a9	2b 55 f8	 sub	 edx, DWORD PTR _dwCurPos$[ebp]
  000ac	89 55 fc	 mov	 DWORD PTR _dwSecs$[ebp], edx
; Line 426
  000af	75 20		 jne	 SHORT $LN17@SearchGrou
  000b1	6a 00		 push	 0
  000b3	68 aa 01 00 00	 push	 426			; 000001aaH
  000b8	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  000bd	68 00 00 00 00	 push	 OFFSET ??_C@_06DGIFJIGI@dwSecs?$AA@FNODOBFM@
  000c2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  000c8	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv85[ebp], 0
  000cf	eb 07		 jmp	 SHORT $LN18@SearchGrou
$LN17@SearchGrou:
  000d1	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR tv85[ebp], 1
$LN18@SearchGrou:
; Line 427
  000d8	83 7d fc 00	 cmp	 DWORD PTR _dwSecs$[ebp], 0
  000dc	74 5e		 je	 SHORT $LN8@SearchGrou
; Line 429
  000de	8a 45 08	 mov	 al, BYTE PTR _MajorFunction$[ebp]
  000e1	50		 push	 eax
  000e2	8b 4d 14	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  000e5	51		 push	 ecx
  000e6	8b 55 fc	 mov	 edx, DWORD PTR _dwSecs$[ebp]
  000e9	52		 push	 edx
  000ea	8b 45 f8	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  000ed	50		 push	 eax
  000ee	8b 4d 18	 mov	 ecx, DWORD PTR _DeviceObject$[ebp]
  000f1	51		 push	 ecx
  000f2	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  000f7	89 45 e4	 mov	 DWORD PTR _status$[ebp], eax
; Line 430
  000fa	83 7d e4 00	 cmp	 DWORD PTR _status$[ebp], 0
  000fe	74 20		 je	 SHORT $LN19@SearchGrou
  00100	6a 00		 push	 0
  00102	68 ae 01 00 00	 push	 430			; 000001aeH
  00107	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KNDAHNNE@status?5?$DN?$DN?5STATUS_SUCCESS?$AA@FNODOBFM@
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  00117	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv130[ebp], 0
  0011e	eb 07		 jmp	 SHORT $LN20@SearchGrou
$LN19@SearchGrou:
  00120	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR tv130[ebp], 1
$LN20@SearchGrou:
; Line 431
  00127	8b 55 fc	 mov	 edx, DWORD PTR _dwSecs$[ebp]
  0012a	c1 e2 09	 shl	 edx, 9
  0012d	03 55 14	 add	 edx, DWORD PTR _pvBuffer$[ebp]
  00130	89 55 14	 mov	 DWORD PTR _pvBuffer$[ebp], edx
; Line 432
  00133	8b 45 f8	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  00136	03 45 fc	 add	 eax, DWORD PTR _dwSecs$[ebp]
  00139	89 45 f8	 mov	 DWORD PTR _dwCurPos$[ebp], eax
$LN8@SearchGrou:
; Line 436
  0013c	8b 4d e8	 mov	 ecx, DWORD PTR _pGroup$[ebp]
  0013f	8b 55 f8	 mov	 edx, DWORD PTR _dwCurPos$[ebp]
  00142	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00144	0f 82 f6 00 00
	00		 jb	 $LN6@SearchGrou
  0014a	8b 45 e8	 mov	 eax, DWORD PTR _pGroup$[ebp]
  0014d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0014f	8b 55 e8	 mov	 edx, DWORD PTR _pGroup$[ebp]
  00152	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00155	39 4d f8	 cmp	 DWORD PTR _dwCurPos$[ebp], ecx
  00158	0f 83 e2 00 00
	00		 jae	 $LN6@SearchGrou
; Line 439
  0015e	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], 0
; Line 440
  00165	8b 45 e8	 mov	 eax, DWORD PTR _pGroup$[ebp]
  00168	8b 08		 mov	 ecx, DWORD PTR [eax]
  0016a	8b 55 e8	 mov	 edx, DWORD PTR _pGroup$[ebp]
  0016d	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00170	39 4d d8	 cmp	 DWORD PTR _dwEndSec$[ebp], ecx
  00173	73 08		 jae	 SHORT $LN21@SearchGrou
  00175	8b 45 d8	 mov	 eax, DWORD PTR _dwEndSec$[ebp]
  00178	89 45 c8	 mov	 DWORD PTR tv143[ebp], eax
  0017b	eb 0e		 jmp	 SHORT $LN22@SearchGrou
$LN21@SearchGrou:
  0017d	8b 4d e8	 mov	 ecx, DWORD PTR _pGroup$[ebp]
  00180	8b 11		 mov	 edx, DWORD PTR [ecx]
  00182	8b 45 e8	 mov	 eax, DWORD PTR _pGroup$[ebp]
  00185	03 50 04	 add	 edx, DWORD PTR [eax+4]
  00188	89 55 c8	 mov	 DWORD PTR tv143[ebp], edx
$LN22@SearchGrou:
  0018b	8b 4d c8	 mov	 ecx, DWORD PTR tv143[ebp]
  0018e	89 4d f0	 mov	 DWORD PTR _dwStop$[ebp], ecx
; Line 441
  00191	8b 55 f0	 mov	 edx, DWORD PTR _dwStop$[ebp]
  00194	2b 55 f8	 sub	 edx, DWORD PTR _dwCurPos$[ebp]
  00197	89 55 fc	 mov	 DWORD PTR _dwSecs$[ebp], edx
; Line 442
  0019a	75 20		 jne	 SHORT $LN23@SearchGrou
  0019c	6a 00		 push	 0
  0019e	68 ba 01 00 00	 push	 442			; 000001baH
  001a3	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  001a8	68 00 00 00 00	 push	 OFFSET ??_C@_06DGIFJIGI@dwSecs?$AA@FNODOBFM@
  001ad	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  001b3	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv150[ebp], 0
  001ba	eb 07		 jmp	 SHORT $LN24@SearchGrou
$LN23@SearchGrou:
  001bc	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR tv150[ebp], 1
$LN24@SearchGrou:
; Line 443
  001c3	83 7d fc 00	 cmp	 DWORD PTR _dwSecs$[ebp], 0
  001c7	74 77		 je	 SHORT $LN6@SearchGrou
; Line 446
  001c9	8a 45 08	 mov	 al, BYTE PTR _MajorFunction$[ebp]
  001cc	50		 push	 eax
  001cd	8b 4d 14	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  001d0	51		 push	 ecx
  001d1	8b 55 fc	 mov	 edx, DWORD PTR _dwSecs$[ebp]
  001d4	52		 push	 edx
  001d5	8b 45 e8	 mov	 eax, DWORD PTR _pGroup$[ebp]
  001d8	8b 4d f8	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  001db	2b 08		 sub	 ecx, DWORD PTR [eax]
  001dd	8b 55 e8	 mov	 edx, DWORD PTR _pGroup$[ebp]
  001e0	03 4a 08	 add	 ecx, DWORD PTR [edx+8]
  001e3	51		 push	 ecx
  001e4	8b 45 18	 mov	 eax, DWORD PTR _DeviceObject$[ebp]
  001e7	50		 push	 eax
  001e8	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  001ed	89 45 e4	 mov	 DWORD PTR _status$[ebp], eax
; Line 447
  001f0	83 7d e4 00	 cmp	 DWORD PTR _status$[ebp], 0
  001f4	74 20		 je	 SHORT $LN25@SearchGrou
  001f6	6a 00		 push	 0
  001f8	68 bf 01 00 00	 push	 447			; 000001bfH
  001fd	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  00202	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KNDAHNNE@status?5?$DN?$DN?5STATUS_SUCCESS?$AA@FNODOBFM@
  00207	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  0020d	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv166[ebp], 0
  00214	eb 07		 jmp	 SHORT $LN26@SearchGrou
$LN25@SearchGrou:
  00216	c7 45 c0 01 00
	00 00		 mov	 DWORD PTR tv166[ebp], 1
$LN26@SearchGrou:
; Line 448
  0021d	83 7d e4 00	 cmp	 DWORD PTR _status$[ebp], 0
  00221	74 08		 je	 SHORT $LN4@SearchGrou
; Line 449
  00223	8b 45 e4	 mov	 eax, DWORD PTR _status$[ebp]
  00226	e9 07 01 00 00	 jmp	 $LN13@SearchGrou
$LN4@SearchGrou:
; Line 450
  0022b	8b 4d fc	 mov	 ecx, DWORD PTR _dwSecs$[ebp]
  0022e	c1 e1 09	 shl	 ecx, 9
  00231	03 4d 14	 add	 ecx, DWORD PTR _pvBuffer$[ebp]
  00234	89 4d 14	 mov	 DWORD PTR _pvBuffer$[ebp], ecx
; Line 451
  00237	8b 55 f8	 mov	 edx, DWORD PTR _dwCurPos$[ebp]
  0023a	03 55 fc	 add	 edx, DWORD PTR _dwSecs$[ebp]
  0023d	89 55 f8	 mov	 DWORD PTR _dwCurPos$[ebp], edx
$LN6@SearchGrou:
; Line 454
  00240	8b 45 f8	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  00243	3b 45 d8	 cmp	 eax, DWORD PTR _dwEndSec$[ebp]
  00246	73 1f		 jae	 SHORT $LN3@SearchGrou
; Line 455
  00248	8d 4d e4	 lea	 ecx, DWORD PTR _status$[ebp]
  0024b	51		 push	 ecx
  0024c	8b 55 d8	 mov	 edx, DWORD PTR _dwEndSec$[ebp]
  0024f	2b 55 f8	 sub	 edx, DWORD PTR _dwCurPos$[ebp]
  00252	52		 push	 edx
  00253	8b 45 f8	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  00256	50		 push	 eax
  00257	8d 4d dc	 lea	 ecx, DWORD PTR _hHandle$[ebp]
  0025a	51		 push	 ecx
  0025b	8b 55 18	 mov	 edx, DWORD PTR _DeviceObject$[ebp]
  0025e	52		 push	 edx
  0025f	e8 00 00 00 00	 call	 _GetNextSecsGroup@20
  00264	89 45 e8	 mov	 DWORD PTR _pGroup$[ebp], eax
$LN3@SearchGrou:
; Line 456
  00267	83 7d e4 00	 cmp	 DWORD PTR _status$[ebp], 0
  0026b	74 20		 je	 SHORT $LN27@SearchGrou
  0026d	6a 00		 push	 0
  0026f	68 c8 01 00 00	 push	 456			; 000001c8H
  00274	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  00279	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KNDAHNNE@status?5?$DN?$DN?5STATUS_SUCCESS?$AA@FNODOBFM@
  0027e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  00284	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR tv184[ebp], 0
  0028b	eb 07		 jmp	 SHORT $LN28@SearchGrou
$LN27@SearchGrou:
  0028d	c7 45 bc 01 00
	00 00		 mov	 DWORD PTR tv184[ebp], 1
$LN28@SearchGrou:
; Line 457
  00294	e9 b8 fd ff ff	 jmp	 $LN10@SearchGrou
$LN9@SearchGrou:
; Line 458
  00299	8b 45 f8	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  0029c	3b 45 d8	 cmp	 eax, DWORD PTR _dwEndSec$[ebp]
  0029f	73 61		 jae	 SHORT $LN11@SearchGrou
; Line 461
  002a1	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], 0
; Line 462
  002a8	8b 4d d8	 mov	 ecx, DWORD PTR _dwEndSec$[ebp]
  002ab	89 4d f0	 mov	 DWORD PTR _dwStop$[ebp], ecx
; Line 463
  002ae	8b 55 f0	 mov	 edx, DWORD PTR _dwStop$[ebp]
  002b1	2b 55 f8	 sub	 edx, DWORD PTR _dwCurPos$[ebp]
  002b4	89 55 fc	 mov	 DWORD PTR _dwSecs$[ebp], edx
; Line 465
  002b7	75 20		 jne	 SHORT $LN29@SearchGrou
  002b9	6a 00		 push	 0
  002bb	68 d1 01 00 00	 push	 465			; 000001d1H
  002c0	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  002c5	68 00 00 00 00	 push	 OFFSET ??_C@_06DGIFJIGI@dwSecs?$AA@FNODOBFM@
  002ca	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  002d0	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv192[ebp], 0
  002d7	eb 07		 jmp	 SHORT $LN30@SearchGrou
$LN29@SearchGrou:
  002d9	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv192[ebp], 1
$LN30@SearchGrou:
; Line 466
  002e0	83 7d fc 00	 cmp	 DWORD PTR _dwSecs$[ebp], 0
  002e4	74 1c		 je	 SHORT $LN11@SearchGrou
; Line 467
  002e6	8a 45 08	 mov	 al, BYTE PTR _MajorFunction$[ebp]
  002e9	50		 push	 eax
  002ea	8b 4d 14	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  002ed	51		 push	 ecx
  002ee	8b 55 fc	 mov	 edx, DWORD PTR _dwSecs$[ebp]
  002f1	52		 push	 edx
  002f2	8b 45 f8	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  002f5	50		 push	 eax
  002f6	8b 4d 18	 mov	 ecx, DWORD PTR _DeviceObject$[ebp]
  002f9	51		 push	 ecx
  002fa	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  002ff	89 45 e4	 mov	 DWORD PTR _status$[ebp], eax
$LN11@SearchGrou:
; Line 470
  00302	83 7d e4 00	 cmp	 DWORD PTR _status$[ebp], 0
  00306	74 20		 je	 SHORT $LN31@SearchGrou
  00308	6a 00		 push	 0
  0030a	68 d6 01 00 00	 push	 470			; 000001d6H
  0030f	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  00314	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KNDAHNNE@status?5?$DN?$DN?5STATUS_SUCCESS?$AA@FNODOBFM@
  00319	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  0031f	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR tv205[ebp], 0
  00326	eb 07		 jmp	 SHORT $LN32@SearchGrou
$LN31@SearchGrou:
  00328	c7 45 b4 01 00
	00 00		 mov	 DWORD PTR tv205[ebp], 1
$LN32@SearchGrou:
; Line 471
  0032f	8b 45 e4	 mov	 eax, DWORD PTR _status$[ebp]
$LN13@SearchGrou:
; Line 472
  00332	8b e5		 mov	 esp, ebp
  00334	5d		 pop	 ebp
  00335	c2 14 00	 ret	 20			; 00000014H
_SearchGroups@20 ENDP
_TEXT	ENDS
EXTRN	_YG_List_Attach_Tail@8:PROC
EXTRN	_YG_List_Remove@8:PROC
EXTRN	_YG_List_Get_First@4:PROC
; Function compile flags: /Odtp
;	COMDAT _GetFirstSecsGroup@20
_TEXT	SEGMENT
_pDataRegion$ = -8					; size = 4
_pReUse$ = -4						; size = 4
_DeviceObject$ = 8					; size = 4
_Handle$ = 12						; size = 4
_dwStartSec$ = 16					; size = 4
_dwSecs$ = 20						; size = 4
_status$ = 24						; size = 4
_GetFirstSecsGroup@20 PROC				; COMDAT
; Line 475
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 08	 sub	 esp, 8
; Line 479
  00008	8b 45 18	 mov	 eax, DWORD PTR _status$[ebp]
  0000b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; Line 481
  00011	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pDataRegionListHead
  00017	89 4d f8	 mov	 DWORD PTR _pDataRegion$[ebp], ecx
$LN5@GetFirstSe:
; Line 482
  0001a	83 7d f8 00	 cmp	 DWORD PTR _pDataRegion$[ebp], 0
  0001e	0f 84 a7 00 00
	00		 je	 $LN4@GetFirstSe
; Line 484
  00024	8b 55 f8	 mov	 edx, DWORD PTR _pDataRegion$[ebp]
  00027	8b 45 10	 mov	 eax, DWORD PTR _dwStartSec$[ebp]
  0002a	3b 42 10	 cmp	 eax, DWORD PTR [edx+16]
  0002d	72 0d		 jb	 SHORT $LN3@GetFirstSe
; Line 486
  0002f	8b 4d f8	 mov	 ecx, DWORD PTR _pDataRegion$[ebp]
  00032	8b 11		 mov	 edx, DWORD PTR [ecx]
  00034	89 55 f8	 mov	 DWORD PTR _pDataRegion$[ebp], edx
; Line 488
  00037	e9 8a 00 00 00	 jmp	 $LN2@GetFirstSe
$LN3@GetFirstSe:
; Line 490
  0003c	8b 45 f8	 mov	 eax, DWORD PTR _pDataRegion$[ebp]
  0003f	83 78 14 00	 cmp	 DWORD PTR [eax+20], 0
  00043	75 67		 jne	 SHORT $LN1@GetFirstSe
; Line 492
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pDataRegionLRUList
  0004b	51		 push	 ecx
  0004c	e8 00 00 00 00	 call	 _YG_List_Get_First@4
  00051	89 45 fc	 mov	 DWORD PTR _pReUse$[ebp], eax
; Line 494
  00054	8b 55 f8	 mov	 edx, DWORD PTR _pDataRegion$[ebp]
  00057	8b 45 fc	 mov	 eax, DWORD PTR _pReUse$[ebp]
  0005a	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0005d	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
; Line 496
  00060	6a 03		 push	 3
  00062	8b 55 f8	 mov	 edx, DWORD PTR _pDataRegion$[ebp]
  00065	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  00068	50		 push	 eax
  00069	68 c0 00 00 00	 push	 192			; 000000c0H
  0006e	8b 4d f8	 mov	 ecx, DWORD PTR _pDataRegion$[ebp]
  00071	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00074	52		 push	 edx
  00075	8b 45 08	 mov	 eax, DWORD PTR _DeviceObject$[ebp]
  00078	50		 push	 eax
  00079	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  0007e	8b 4d 18	 mov	 ecx, DWORD PTR _status$[ebp]
  00081	89 01		 mov	 DWORD PTR [ecx], eax
; Line 497
  00083	8b 55 fc	 mov	 edx, DWORD PTR _pReUse$[ebp]
  00086	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
; Line 498
  0008d	8b 45 fc	 mov	 eax, DWORD PTR _pReUse$[ebp]
  00090	50		 push	 eax
  00091	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pDataRegionLRUList
  00097	51		 push	 ecx
  00098	e8 00 00 00 00	 call	 _YG_List_Remove@8
; Line 499
  0009d	8b 55 f8	 mov	 edx, DWORD PTR _pDataRegion$[ebp]
  000a0	52		 push	 edx
  000a1	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pDataRegionLRUList
  000a6	50		 push	 eax
  000a7	e8 00 00 00 00	 call	 _YG_List_Attach_Tail@8
$LN1@GetFirstSe:
; Line 501
  000ac	8b 4d 0c	 mov	 ecx, DWORD PTR _Handle$[ebp]
  000af	8b 55 f8	 mov	 edx, DWORD PTR _pDataRegion$[ebp]
  000b2	89 11		 mov	 DWORD PTR [ecx], edx
; Line 502
  000b4	8b 45 0c	 mov	 eax, DWORD PTR _Handle$[ebp]
  000b7	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; Line 503
  000be	8b 4d f8	 mov	 ecx, DWORD PTR _pDataRegion$[ebp]
  000c1	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  000c4	eb 07		 jmp	 SHORT $LN6@GetFirstSe
$LN2@GetFirstSe:
; Line 505
  000c6	e9 4f ff ff ff	 jmp	 $LN5@GetFirstSe
$LN4@GetFirstSe:
; Line 506
  000cb	33 c0		 xor	 eax, eax
$LN6@GetFirstSe:
; Line 507
  000cd	8b e5		 mov	 esp, ebp
  000cf	5d		 pop	 ebp
  000d0	c2 14 00	 ret	 20			; 00000014H
_GetFirstSecsGroup@20 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _GetNextSecsGroup@20
_TEXT	SEGMENT
_pDataRegion$ = -16					; size = 4
_pReUse$ = -12						; size = 4
_pCurGroup$ = -8					; size = 4
_dwCurRecNum$ = -4					; size = 4
_DeviceObject$ = 8					; size = 4
_Handle$ = 12						; size = 4
_dwStartSec$ = 16					; size = 4
_dwSecs$ = 20						; size = 4
_status$ = 24						; size = 4
_GetNextSecsGroup@20 PROC				; COMDAT
; Line 511
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 10	 sub	 esp, 16			; 00000010H
; Line 517
  00008	8b 45 18	 mov	 eax, DWORD PTR _status$[ebp]
  0000b	c7 00 00 00 00
	00		 mov	 DWORD PTR [eax], 0
; Line 519
  00011	8b 4d 0c	 mov	 ecx, DWORD PTR _Handle$[ebp]
  00014	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00017	83 c2 01	 add	 edx, 1
  0001a	89 55 fc	 mov	 DWORD PTR _dwCurRecNum$[ebp], edx
; Line 520
  0001d	8b 45 0c	 mov	 eax, DWORD PTR _Handle$[ebp]
  00020	8b 08		 mov	 ecx, DWORD PTR [eax]
  00022	8b 55 fc	 mov	 edx, DWORD PTR _dwCurRecNum$[ebp]
  00025	3b 51 08	 cmp	 edx, DWORD PTR [ecx+8]
  00028	73 22		 jae	 SHORT $LN7@GetNextSec
; Line 522
  0002a	8b 45 0c	 mov	 eax, DWORD PTR _Handle$[ebp]
  0002d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0002f	8b 55 fc	 mov	 edx, DWORD PTR _dwCurRecNum$[ebp]
  00032	6b d2 0c	 imul	 edx, 12			; 0000000cH
  00035	03 51 14	 add	 edx, DWORD PTR [ecx+20]
  00038	89 55 f8	 mov	 DWORD PTR _pCurGroup$[ebp], edx
; Line 523
  0003b	8b 45 0c	 mov	 eax, DWORD PTR _Handle$[ebp]
  0003e	8b 4d fc	 mov	 ecx, DWORD PTR _dwCurRecNum$[ebp]
  00041	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; Line 524
  00044	8b 45 f8	 mov	 eax, DWORD PTR _pCurGroup$[ebp]
  00047	e9 cd 00 00 00	 jmp	 $LN8@GetNextSec
$LN7@GetNextSec:
; Line 527
  0004c	8b 55 0c	 mov	 edx, DWORD PTR _Handle$[ebp]
  0004f	8b 02		 mov	 eax, DWORD PTR [edx]
  00051	83 38 00	 cmp	 DWORD PTR [eax], 0
  00054	75 07		 jne	 SHORT $LN6@GetNextSec
; Line 528
  00056	33 c0		 xor	 eax, eax
  00058	e9 bc 00 00 00	 jmp	 $LN8@GetNextSec
$LN6@GetNextSec:
; Line 530
  0005d	8b 4d 0c	 mov	 ecx, DWORD PTR _Handle$[ebp]
  00060	8b 11		 mov	 edx, DWORD PTR [ecx]
  00062	8b 02		 mov	 eax, DWORD PTR [edx]
  00064	89 45 f0	 mov	 DWORD PTR _pDataRegion$[ebp], eax
$LN5@GetNextSec:
; Line 531
  00067	83 7d f0 00	 cmp	 DWORD PTR _pDataRegion$[ebp], 0
  0006b	0f 84 a6 00 00
	00		 je	 $LN4@GetNextSec
; Line 533
  00071	8b 4d f0	 mov	 ecx, DWORD PTR _pDataRegion$[ebp]
  00074	8b 55 10	 mov	 edx, DWORD PTR _dwStartSec$[ebp]
  00077	3b 51 10	 cmp	 edx, DWORD PTR [ecx+16]
  0007a	72 0d		 jb	 SHORT $LN3@GetNextSec
; Line 535
  0007c	8b 45 f0	 mov	 eax, DWORD PTR _pDataRegion$[ebp]
  0007f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00081	89 4d f0	 mov	 DWORD PTR _pDataRegion$[ebp], ecx
; Line 537
  00084	e9 89 00 00 00	 jmp	 $LN2@GetNextSec
$LN3@GetNextSec:
; Line 539
  00089	8b 55 f0	 mov	 edx, DWORD PTR _pDataRegion$[ebp]
  0008c	83 7a 14 00	 cmp	 DWORD PTR [edx+20], 0
  00090	75 66		 jne	 SHORT $LN1@GetNextSec
; Line 541
  00092	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pDataRegionLRUList
  00097	50		 push	 eax
  00098	e8 00 00 00 00	 call	 _YG_List_Get_First@4
  0009d	89 45 f4	 mov	 DWORD PTR _pReUse$[ebp], eax
; Line 543
  000a0	8b 4d f0	 mov	 ecx, DWORD PTR _pDataRegion$[ebp]
  000a3	8b 55 f4	 mov	 edx, DWORD PTR _pReUse$[ebp]
  000a6	8b 42 14	 mov	 eax, DWORD PTR [edx+20]
  000a9	89 41 14	 mov	 DWORD PTR [ecx+20], eax
; Line 545
  000ac	6a 03		 push	 3
  000ae	8b 4d f0	 mov	 ecx, DWORD PTR _pDataRegion$[ebp]
  000b1	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  000b4	52		 push	 edx
  000b5	68 c0 00 00 00	 push	 192			; 000000c0H
  000ba	8b 45 f0	 mov	 eax, DWORD PTR _pDataRegion$[ebp]
  000bd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  000c0	51		 push	 ecx
  000c1	8b 55 08	 mov	 edx, DWORD PTR _DeviceObject$[ebp]
  000c4	52		 push	 edx
  000c5	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  000ca	8b 4d 18	 mov	 ecx, DWORD PTR _status$[ebp]
  000cd	89 01		 mov	 DWORD PTR [ecx], eax
; Line 546
  000cf	8b 55 f4	 mov	 edx, DWORD PTR _pReUse$[ebp]
  000d2	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
; Line 547
  000d9	8b 45 f4	 mov	 eax, DWORD PTR _pReUse$[ebp]
  000dc	50		 push	 eax
  000dd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pDataRegionLRUList
  000e3	51		 push	 ecx
  000e4	e8 00 00 00 00	 call	 _YG_List_Remove@8
; Line 548
  000e9	8b 55 f0	 mov	 edx, DWORD PTR _pDataRegion$[ebp]
  000ec	52		 push	 edx
  000ed	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pDataRegionLRUList
  000f2	50		 push	 eax
  000f3	e8 00 00 00 00	 call	 _YG_List_Attach_Tail@8
$LN1@GetNextSec:
; Line 550
  000f8	8b 4d 0c	 mov	 ecx, DWORD PTR _Handle$[ebp]
  000fb	8b 55 f0	 mov	 edx, DWORD PTR _pDataRegion$[ebp]
  000fe	89 11		 mov	 DWORD PTR [ecx], edx
; Line 551
  00100	8b 45 0c	 mov	 eax, DWORD PTR _Handle$[ebp]
  00103	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
; Line 552
  0010a	8b 4d f0	 mov	 ecx, DWORD PTR _pDataRegion$[ebp]
  0010d	8b 41 14	 mov	 eax, DWORD PTR [ecx+20]
  00110	eb 07		 jmp	 SHORT $LN8@GetNextSec
$LN2@GetNextSec:
; Line 554
  00112	e9 50 ff ff ff	 jmp	 $LN5@GetNextSec
$LN4@GetNextSec:
; Line 555
  00117	33 c0		 xor	 eax, eax
$LN8@GetNextSec:
; Line 556
  00119	8b e5		 mov	 esp, ebp
  0011b	5d		 pop	 ebp
  0011c	c2 14 00	 ret	 20			; 00000014H
_GetNextSecsGroup@20 ENDP
_TEXT	ENDS
PUBLIC	_RMSetGroup@12
EXTRN	_YG_List_Allocate@4:PROC
; Function compile flags: /Odtp
;	COMDAT _RMSetGroup@12
_TEXT	SEGMENT
_pGroupBuff$ = -16					; size = 4
_status$ = -12						; size = 4
_pDataRegion$ = -8					; size = 4
_pGroup$ = -4						; size = 4
_dwStart$ = 8						; size = 4
_dwRecNums$ = 12					; size = 4
_DeviceObject$ = 16					; size = 4
_RMSetGroup@12 PROC					; COMDAT
; Line 559
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 10	 sub	 esp, 16			; 00000010H
; Line 564
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pDataRegionLRUList
  0000d	50		 push	 eax
  0000e	e8 00 00 00 00	 call	 _YG_List_Allocate@4
  00013	89 45 f8	 mov	 DWORD PTR _pDataRegion$[ebp], eax
; Line 565
  00016	83 7d f8 00	 cmp	 DWORD PTR _pDataRegion$[ebp], 0
  0001a	0f 84 15 01 00
	00		 je	 $LN8@RMSetGroup
; Line 567
  00020	68 44 50 72 66	 push	 1718767684		; 66725044H
  00025	68 00 80 01 00	 push	 98304			; 00018000H
  0002a	6a 00		 push	 0
  0002c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  00032	89 45 f0	 mov	 DWORD PTR _pGroupBuff$[ebp], eax
; Line 568
  00035	83 7d f0 00	 cmp	 DWORD PTR _pGroupBuff$[ebp], 0
  00039	74 28		 je	 SHORT $LN7@RMSetGroup
; Line 571
  0003b	6a 03		 push	 3
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _pGroupBuff$[ebp]
  00040	51		 push	 ecx
  00041	68 c0 00 00 00	 push	 192			; 000000c0H
  00046	8b 55 08	 mov	 edx, DWORD PTR _dwStart$[ebp]
  00049	52		 push	 edx
  0004a	8b 45 10	 mov	 eax, DWORD PTR _DeviceObject$[ebp]
  0004d	50		 push	 eax
  0004e	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  00053	89 45 f4	 mov	 DWORD PTR _status$[ebp], eax
; Line 572
  00056	83 7d f4 00	 cmp	 DWORD PTR _status$[ebp], 0
  0005a	74 07		 je	 SHORT $LN7@RMSetGroup
  0005c	33 c0		 xor	 eax, eax
  0005e	e9 db 00 00 00	 jmp	 $LN9@RMSetGroup
$LN7@RMSetGroup:
; Line 574
  00063	33 c9		 xor	 ecx, ecx
  00065	8b 55 f8	 mov	 edx, DWORD PTR _pDataRegion$[ebp]
  00068	89 0a		 mov	 DWORD PTR [edx], ecx
  0006a	89 4a 04	 mov	 DWORD PTR [edx+4], ecx
  0006d	89 4a 08	 mov	 DWORD PTR [edx+8], ecx
  00070	89 4a 0c	 mov	 DWORD PTR [edx+12], ecx
  00073	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
  00076	89 4a 14	 mov	 DWORD PTR [edx+20], ecx
; Line 575
  00079	8b 45 f8	 mov	 eax, DWORD PTR _pDataRegion$[ebp]
  0007c	8b 4d 08	 mov	 ecx, DWORD PTR _dwStart$[ebp]
  0007f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; Line 576
  00082	8b 55 f8	 mov	 edx, DWORD PTR _pDataRegion$[ebp]
  00085	8b 45 0c	 mov	 eax, DWORD PTR _dwRecNums$[ebp]
  00088	89 42 08	 mov	 DWORD PTR [edx+8], eax
; Line 577
  0008b	8b 4d f8	 mov	 ecx, DWORD PTR _pDataRegion$[ebp]
  0008e	8b 55 f0	 mov	 edx, DWORD PTR _pGroupBuff$[ebp]
  00091	89 51 14	 mov	 DWORD PTR [ecx+20], edx
; Line 578
  00094	8b 45 f8	 mov	 eax, DWORD PTR _pDataRegion$[ebp]
  00097	8b 4d f0	 mov	 ecx, DWORD PTR _pGroupBuff$[ebp]
  0009a	8b 11		 mov	 edx, DWORD PTR [ecx]
  0009c	89 50 0c	 mov	 DWORD PTR [eax+12], edx
; Line 579
  0009f	8b 45 0c	 mov	 eax, DWORD PTR _dwRecNums$[ebp]
  000a2	6b c0 0c	 imul	 eax, 12			; 0000000cH
  000a5	8b 4d f0	 mov	 ecx, DWORD PTR _pGroupBuff$[ebp]
  000a8	8d 54 01 f4	 lea	 edx, DWORD PTR [ecx+eax-12]
  000ac	89 55 fc	 mov	 DWORD PTR _pGroup$[ebp], edx
; Line 580
  000af	8b 45 fc	 mov	 eax, DWORD PTR _pGroup$[ebp]
  000b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b4	8b 55 fc	 mov	 edx, DWORD PTR _pGroup$[ebp]
  000b7	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  000ba	8b 45 f8	 mov	 eax, DWORD PTR _pDataRegion$[ebp]
  000bd	89 48 10	 mov	 DWORD PTR [eax+16], ecx
; Line 581
  000c0	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR _g_dwNumDataRegionLoaded, 5
  000c7	72 16		 jb	 SHORT $LN5@RMSetGroup
; Line 583
  000c9	6a 00		 push	 0
  000cb	8b 4d f0	 mov	 ecx, DWORD PTR _pGroupBuff$[ebp]
  000ce	51		 push	 ecx
  000cf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePoolWithTag@8
; Line 584
  000d5	8b 55 f8	 mov	 edx, DWORD PTR _pDataRegion$[ebp]
  000d8	c7 42 14 00 00
	00 00		 mov	 DWORD PTR [edx+20], 0
$LN5@RMSetGroup:
; Line 586
  000df	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pDataRegionListTail, 0
  000e6	74 0a		 je	 SHORT $LN4@RMSetGroup
; Line 587
  000e8	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pDataRegionListTail
  000ed	8b 4d f8	 mov	 ecx, DWORD PTR _pDataRegion$[ebp]
  000f0	89 08		 mov	 DWORD PTR [eax], ecx
$LN4@RMSetGroup:
; Line 589
  000f2	8b 55 f8	 mov	 edx, DWORD PTR _pDataRegion$[ebp]
  000f5	89 15 00 00 00
	00		 mov	 DWORD PTR _g_pDataRegionListTail, edx
; Line 590
  000fb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pDataRegionListHead, 0
  00102	75 08		 jne	 SHORT $LN3@RMSetGroup
; Line 591
  00104	8b 45 f8	 mov	 eax, DWORD PTR _pDataRegion$[ebp]
  00107	a3 00 00 00 00	 mov	 DWORD PTR _g_pDataRegionListHead, eax
$LN3@RMSetGroup:
; Line 593
  0010c	8b 4d f8	 mov	 ecx, DWORD PTR _pDataRegion$[ebp]
  0010f	83 79 14 00	 cmp	 DWORD PTR [ecx+20], 0
  00113	74 0f		 je	 SHORT $LN2@RMSetGroup
; Line 594
  00115	8b 55 f8	 mov	 edx, DWORD PTR _pDataRegion$[ebp]
  00118	52		 push	 edx
  00119	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pDataRegionLRUList
  0011e	50		 push	 eax
  0011f	e8 00 00 00 00	 call	 _YG_List_Attach_Tail@8
$LN2@RMSetGroup:
; Line 595
  00124	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_dwNumDataRegionLoaded
  0012a	83 c1 01	 add	 ecx, 1
  0012d	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwNumDataRegionLoaded, ecx
; Line 597
  00133	eb 04		 jmp	 SHORT $LN1@RMSetGroup
$LN8@RMSetGroup:
; Line 598
  00135	33 c0		 xor	 eax, eax
  00137	eb 05		 jmp	 SHORT $LN9@RMSetGroup
$LN1@RMSetGroup:
; Line 600
  00139	b8 01 00 00 00	 mov	 eax, 1
$LN9@RMSetGroup:
; Line 601
  0013e	8b e5		 mov	 esp, ebp
  00140	5d		 pop	 ebp
  00141	c2 0c 00	 ret	 12			; 0000000cH
_RMSetGroup@12 ENDP
_TEXT	ENDS
PUBLIC	??_C@_09OAIMEAFN@dwSectors?$AA@FNODOBFM@	;  ?? ::FNODOBFM::`string'
PUBLIC	_DoReLocate@20
;	COMDAT ??_C@_09OAIMEAFN@dwSectors?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_09OAIMEAFN@dwSectors?$AA@FNODOBFM@ DB 'dwSectors', 00H ;  ?? ::FNODOBFM::`string'
; Function compile flags: /Odtp
text$s	ENDS
;	COMDAT _DoReLocate@20
_TEXT	SEGMENT
tv70 = -28						; size = 4
_dwEndSec$ = -24					; size = 4
_status$ = -20						; size = 4
_dwStartSec$ = -16					; size = 4
_MajorFunction$ = 8					; size = 1
_dwStart$ = 12						; size = 4
_dwSectors$ = 16					; size = 4
_pvBuffer$ = 20						; size = 4
_DeviceObject$ = 24					; size = 4
_DoReLocate@20 PROC					; COMDAT
; Line 606
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 1c	 sub	 esp, 28			; 0000001cH
; Line 613
  00008	8b 45 0c	 mov	 eax, DWORD PTR _dwStart$[ebp]
  0000b	89 45 f0	 mov	 DWORD PTR _dwStartSec$[ebp], eax
; Line 614
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _dwStart$[ebp]
  00011	03 4d 10	 add	 ecx, DWORD PTR _dwSectors$[ebp]
  00014	89 4d e8	 mov	 DWORD PTR _dwEndSec$[ebp], ecx
; Line 615
  00017	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], 0
; Line 617
  0001e	83 7d 10 00	 cmp	 DWORD PTR _dwSectors$[ebp], 0
  00022	75 20		 jne	 SHORT $LN10@DoReLocate
  00024	6a 00		 push	 0
  00026	68 69 02 00 00	 push	 617			; 00000269H
  0002b	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  00030	68 00 00 00 00	 push	 OFFSET ??_C@_09OAIMEAFN@dwSectors?$AA@FNODOBFM@
  00035	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  0003b	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR tv70[ebp], 0
  00042	eb 07		 jmp	 SHORT $LN11@DoReLocate
$LN10@DoReLocate:
  00044	c7 45 e4 01 00
	00 00		 mov	 DWORD PTR tv70[ebp], 1
$LN11@DoReLocate:
; Line 618
  0004b	83 7d 10 00	 cmp	 DWORD PTR _dwSectors$[ebp], 0
  0004f	0f 84 a0 00 00
	00		 je	 $LN7@DoReLocate
; Line 620
  00055	8b 55 e8	 mov	 edx, DWORD PTR _dwEndSec$[ebp]
  00058	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _g_dwMinSec
  0005e	76 0b		 jbe	 SHORT $LN5@DoReLocate
  00060	8b 45 f0	 mov	 eax, DWORD PTR _dwStartSec$[ebp]
  00063	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _g_dwMaxSec
  00069	72 1e		 jb	 SHORT $LN6@DoReLocate
$LN5@DoReLocate:
; Line 621
  0006b	8a 4d 08	 mov	 cl, BYTE PTR _MajorFunction$[ebp]
  0006e	51		 push	 ecx
  0006f	8b 55 14	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  00072	52		 push	 edx
  00073	8b 45 10	 mov	 eax, DWORD PTR _dwSectors$[ebp]
  00076	50		 push	 eax
  00077	8b 4d f0	 mov	 ecx, DWORD PTR _dwStartSec$[ebp]
  0007a	51		 push	 ecx
  0007b	8b 55 18	 mov	 edx, DWORD PTR _DeviceObject$[ebp]
  0007e	52		 push	 edx
  0007f	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  00084	89 45 ec	 mov	 DWORD PTR _status$[ebp], eax
; Line 622
  00087	eb 6c		 jmp	 SHORT $LN7@DoReLocate
$LN6@DoReLocate:
; Line 624
  00089	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwRePointer
  0008e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _g_dwMaxSec
  00094	75 1e		 jne	 SHORT $LN3@DoReLocate
; Line 626
  00096	8b 4d 18	 mov	 ecx, DWORD PTR _DeviceObject$[ebp]
  00099	51		 push	 ecx
  0009a	8b 55 14	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  0009d	52		 push	 edx
  0009e	8b 45 10	 mov	 eax, DWORD PTR _dwSectors$[ebp]
  000a1	50		 push	 eax
  000a2	8b 4d f0	 mov	 ecx, DWORD PTR _dwStartSec$[ebp]
  000a5	51		 push	 ecx
  000a6	8a 55 08	 mov	 dl, BYTE PTR _MajorFunction$[ebp]
  000a9	52		 push	 edx
  000aa	e8 00 00 00 00	 call	 _SearchGroups@20
  000af	89 45 ec	 mov	 DWORD PTR _status$[ebp], eax
; Line 628
  000b2	eb 41		 jmp	 SHORT $LN7@DoReLocate
$LN3@DoReLocate:
; Line 630
  000b4	8a 45 08	 mov	 al, BYTE PTR _MajorFunction$[ebp]
  000b7	50		 push	 eax
  000b8	8b 4d 14	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  000bb	51		 push	 ecx
  000bc	8b 55 10	 mov	 edx, DWORD PTR _dwSectors$[ebp]
  000bf	52		 push	 edx
  000c0	8b 45 f0	 mov	 eax, DWORD PTR _dwStartSec$[ebp]
  000c3	50		 push	 eax
  000c4	8b 4d 18	 mov	 ecx, DWORD PTR _DeviceObject$[ebp]
  000c7	51		 push	 ecx
  000c8	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  000cd	89 45 ec	 mov	 DWORD PTR _status$[ebp], eax
; Line 631
  000d0	0f b6 55 08	 movzx	 edx, BYTE PTR _MajorFunction$[ebp]
  000d4	83 fa 04	 cmp	 edx, 4
  000d7	75 1c		 jne	 SHORT $LN7@DoReLocate
; Line 632
  000d9	8b 45 18	 mov	 eax, DWORD PTR _DeviceObject$[ebp]
  000dc	50		 push	 eax
  000dd	8b 4d 14	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  000e0	51		 push	 ecx
  000e1	8b 55 10	 mov	 edx, DWORD PTR _dwSectors$[ebp]
  000e4	52		 push	 edx
  000e5	8b 45 f0	 mov	 eax, DWORD PTR _dwStartSec$[ebp]
  000e8	50		 push	 eax
  000e9	8a 4d 08	 mov	 cl, BYTE PTR _MajorFunction$[ebp]
  000ec	51		 push	 ecx
  000ed	e8 00 00 00 00	 call	 _SearchGroups@20
  000f2	89 45 ec	 mov	 DWORD PTR _status$[ebp], eax
$LN7@DoReLocate:
; Line 636
  000f5	8b 45 ec	 mov	 eax, DWORD PTR _status$[ebp]
; Line 637
  000f8	8b e5		 mov	 esp, ebp
  000fa	5d		 pop	 ebp
  000fb	c2 14 00	 ret	 20			; 00000014H
_DoReLocate@20 ENDP
_TEXT	ENDS
PUBLIC	_SearchFromSysGroup@20
PUBLIC	_DoLinearIo@20
; Function compile flags: /Odtp
;	COMDAT _DoLinearIo@20
_TEXT	SEGMENT
tv75 = -32						; size = 4
_status$ = -24						; size = 4
_MajorFunction$ = 8					; size = 1
_dwStart$ = 12						; size = 4
_dwSectors$ = 16					; size = 4
_pvBuffer$ = 20						; size = 4
_pBlkMoverData$ = 24					; size = 4
_DoLinearIo@20 PROC					; COMDAT
; Line 644
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 20	 sub	 esp, 32			; 00000020H
; Line 651
  00008	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], 0
; Line 653
  0000f	8b 45 18	 mov	 eax, DWORD PTR _pBlkMoverData$[ebp]
  00012	50		 push	 eax
  00013	8b 4d 14	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  00016	51		 push	 ecx
  00017	8b 55 10	 mov	 edx, DWORD PTR _dwSectors$[ebp]
  0001a	52		 push	 edx
  0001b	8b 45 0c	 mov	 eax, DWORD PTR _dwStart$[ebp]
  0001e	50		 push	 eax
  0001f	8a 4d 08	 mov	 cl, BYTE PTR _MajorFunction$[ebp]
  00022	51		 push	 ecx
  00023	e8 00 00 00 00	 call	 _SearchFromSysGroup@20
  00028	89 45 e8	 mov	 DWORD PTR _status$[ebp], eax
; Line 654
  0002b	83 7d e8 00	 cmp	 DWORD PTR _status$[ebp], 0
  0002f	74 20		 je	 SHORT $LN3@DoLinearIo
  00031	6a 00		 push	 0
  00033	68 8e 02 00 00	 push	 654			; 0000028eH
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KNDAHNNE@status?5?$DN?$DN?5STATUS_SUCCESS?$AA@FNODOBFM@
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  00048	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR tv75[ebp], 0
  0004f	eb 07		 jmp	 SHORT $LN4@DoLinearIo
$LN3@DoLinearIo:
  00051	c7 45 e0 01 00
	00 00		 mov	 DWORD PTR tv75[ebp], 1
$LN4@DoLinearIo:
; Line 655
  00058	8b 45 e8	 mov	 eax, DWORD PTR _status$[ebp]
; Line 656
  0005b	8b e5		 mov	 esp, ebp
  0005d	5d		 pop	 ebp
  0005e	c2 14 00	 ret	 20			; 00000014H
_DoLinearIo@20 ENDP
_TEXT	ENDS
PUBLIC	_SearchFromGroup@20
; Function compile flags: /Odtp
;	COMDAT _SearchFromSysGroup@20
_TEXT	SEGMENT
tv197 = -60						; size = 4
tv178 = -56						; size = 4
tv161 = -52						; size = 4
tv133 = -48						; size = 4
tv87 = -44						; size = 4
_dwEndSec$ = -40					; size = 4
_dwRecStart$ = -36					; size = 4
_status$ = -32						; size = 4
_k$ = -28						; size = 4
_pGroup$ = -24						; size = 4
_dwStartSec$ = -20					; size = 4
_i$ = -16						; size = 4
_dwStop$ = -12						; size = 4
_dwCurPos$ = -8						; size = 4
_dwSecs$ = -4						; size = 4
_MajorFunction$ = 8					; size = 1
_dwStart$ = 12						; size = 4
_dwSectors$ = 16					; size = 4
_pvBuffer$ = 20						; size = 4
_pBlkMoverData$ = 24					; size = 4
_SearchFromSysGroup@20 PROC				; COMDAT
; Line 664
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 3c	 sub	 esp, 60			; 0000003cH
; Line 670
  00008	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _pGroup$[ebp], 0
; Line 671
  0000f	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], 0
; Line 673
  00016	8b 45 0c	 mov	 eax, DWORD PTR _dwStart$[ebp]
  00019	89 45 ec	 mov	 DWORD PTR _dwStartSec$[ebp], eax
; Line 674
  0001c	8b 4d 0c	 mov	 ecx, DWORD PTR _dwStart$[ebp]
  0001f	03 4d 10	 add	 ecx, DWORD PTR _dwSectors$[ebp]
  00022	89 4d d8	 mov	 DWORD PTR _dwEndSec$[ebp], ecx
; Line 675
  00025	8b 55 0c	 mov	 edx, DWORD PTR _dwStart$[ebp]
  00028	89 55 f8	 mov	 DWORD PTR _dwCurPos$[ebp], edx
; Line 678
  0002b	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00032	eb 09		 jmp	 SHORT $LN17@SearchFrom
$LN16@SearchFrom:
  00034	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00037	83 c0 10	 add	 eax, 16			; 00000010H
  0003a	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN17@SearchFrom:
  0003d	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  00040	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _g_dwSysRecPages
  00046	0f 83 66 02 00
	00		 jae	 $LN15@SearchFrom
; Line 684
  0004c	6a 03		 push	 3
  0004e	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_SecGroupBuf+8
  00054	52		 push	 edx
  00055	68 00 02 00 00	 push	 512			; 00000200H
  0005a	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  0005d	c1 e0 05	 shl	 eax, 5
  00060	03 05 00 00 00
	00		 add	 eax, DWORD PTR _g_dwSysStart
  00066	50		 push	 eax
  00067	8b 4d 18	 mov	 ecx, DWORD PTR _pBlkMoverData$[ebp]
  0006a	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0006d	52		 push	 edx
  0006e	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  00073	89 45 e0	 mov	 DWORD PTR _status$[ebp], eax
; Line 685
  00076	83 7d e0 00	 cmp	 DWORD PTR _status$[ebp], 0
  0007a	74 05		 je	 SHORT $LN14@SearchFrom
  0007c	e9 31 02 00 00	 jmp	 $LN15@SearchFrom
$LN14@SearchFrom:
; Line 687
  00081	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  00084	c1 e0 0a	 shl	 eax, 10			; 0000000aH
  00087	c1 e0 04	 shl	 eax, 4
  0008a	89 45 dc	 mov	 DWORD PTR _dwRecStart$[ebp], eax
; Line 688
  0008d	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0
  00094	eb 09		 jmp	 SHORT $LN13@SearchFrom
$LN12@SearchFrom:
  00096	8b 4d e4	 mov	 ecx, DWORD PTR _k$[ebp]
  00099	83 c1 01	 add	 ecx, 1
  0009c	89 4d e4	 mov	 DWORD PTR _k$[ebp], ecx
$LN13@SearchFrom:
  0009f	81 7d e4 00 40
	00 00		 cmp	 DWORD PTR _k$[ebp], 16384 ; 00004000H
  000a6	0f 83 01 02 00
	00		 jae	 $LN11@SearchFrom
; Line 690
  000ac	8b 55 e4	 mov	 edx, DWORD PTR _k$[ebp]
  000af	03 55 dc	 add	 edx, DWORD PTR _dwRecStart$[ebp]
  000b2	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _g_dwSysRecNum
  000b8	0f 83 e8 01 00
	00		 jae	 $LN10@SearchFrom
; Line 692
  000be	8b 45 e4	 mov	 eax, DWORD PTR _k$[ebp]
  000c1	c1 e0 04	 shl	 eax, 4
  000c4	03 05 08 00 00
	00		 add	 eax, DWORD PTR _g_SecGroupBuf+8
  000ca	89 45 e8	 mov	 DWORD PTR _pGroup$[ebp], eax
; Line 693
  000cd	8b 4d e8	 mov	 ecx, DWORD PTR _pGroup$[ebp]
  000d0	8b 11		 mov	 edx, DWORD PTR [ecx]
  000d2	3b 55 f8	 cmp	 edx, DWORD PTR _dwCurPos$[ebp]
  000d5	0f 86 dc 00 00
	00		 jbe	 $LN9@SearchFrom
; Line 695
  000db	8b 45 e8	 mov	 eax, DWORD PTR _pGroup$[ebp]
  000de	8b 4d d8	 mov	 ecx, DWORD PTR _dwEndSec$[ebp]
  000e1	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000e3	73 08		 jae	 SHORT $LN20@SearchFrom
  000e5	8b 55 d8	 mov	 edx, DWORD PTR _dwEndSec$[ebp]
  000e8	89 55 d4	 mov	 DWORD PTR tv87[ebp], edx
  000eb	eb 08		 jmp	 SHORT $LN21@SearchFrom
$LN20@SearchFrom:
  000ed	8b 45 e8	 mov	 eax, DWORD PTR _pGroup$[ebp]
  000f0	8b 08		 mov	 ecx, DWORD PTR [eax]
  000f2	89 4d d4	 mov	 DWORD PTR tv87[ebp], ecx
$LN21@SearchFrom:
  000f5	8b 55 d4	 mov	 edx, DWORD PTR tv87[ebp]
  000f8	89 55 f4	 mov	 DWORD PTR _dwStop$[ebp], edx
; Line 696
  000fb	8b 45 f4	 mov	 eax, DWORD PTR _dwStop$[ebp]
  000fe	2b 45 f8	 sub	 eax, DWORD PTR _dwCurPos$[ebp]
  00101	89 45 fc	 mov	 DWORD PTR _dwSecs$[ebp], eax
; Line 699
  00104	8b 4d 18	 mov	 ecx, DWORD PTR _pBlkMoverData$[ebp]
  00107	51		 push	 ecx
  00108	8b 55 14	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  0010b	52		 push	 edx
  0010c	8b 45 d8	 mov	 eax, DWORD PTR _dwEndSec$[ebp]
  0010f	2b 45 f8	 sub	 eax, DWORD PTR _dwCurPos$[ebp]
  00112	50		 push	 eax
  00113	8b 4d f8	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  00116	51		 push	 ecx
  00117	8a 55 08	 mov	 dl, BYTE PTR _MajorFunction$[ebp]
  0011a	52		 push	 edx
  0011b	e8 00 00 00 00	 call	 _SearchFromGroup@20
  00120	89 45 e0	 mov	 DWORD PTR _status$[ebp], eax
; Line 700
  00123	83 7d e0 00	 cmp	 DWORD PTR _status$[ebp], 0
  00127	74 20		 je	 SHORT $LN22@SearchFrom
  00129	6a 00		 push	 0
  0012b	68 bc 02 00 00	 push	 700			; 000002bcH
  00130	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  00135	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KNDAHNNE@status?5?$DN?$DN?5STATUS_SUCCESS?$AA@FNODOBFM@
  0013a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  00140	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR tv133[ebp], 0
  00147	eb 07		 jmp	 SHORT $LN23@SearchFrom
$LN22@SearchFrom:
  00149	c7 45 d0 01 00
	00 00		 mov	 DWORD PTR tv133[ebp], 1
$LN23@SearchFrom:
; Line 701
  00150	83 7d e0 00	 cmp	 DWORD PTR _status$[ebp], 0
  00154	74 08		 je	 SHORT $LN8@SearchFrom
; Line 702
  00156	8b 45 e0	 mov	 eax, DWORD PTR _status$[ebp]
  00159	e9 ab 01 00 00	 jmp	 $LN18@SearchFrom
$LN8@SearchFrom:
; Line 708
  0015e	6a 03		 push	 3
  00160	a1 08 00 00 00	 mov	 eax, DWORD PTR _g_SecGroupBuf+8
  00165	50		 push	 eax
  00166	68 00 02 00 00	 push	 512			; 00000200H
  0016b	8b 4d f0	 mov	 ecx, DWORD PTR _i$[ebp]
  0016e	c1 e1 05	 shl	 ecx, 5
  00171	03 0d 00 00 00
	00		 add	 ecx, DWORD PTR _g_dwSysStart
  00177	51		 push	 ecx
  00178	8b 55 18	 mov	 edx, DWORD PTR _pBlkMoverData$[ebp]
  0017b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0017e	50		 push	 eax
  0017f	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  00184	89 45 e0	 mov	 DWORD PTR _status$[ebp], eax
; Line 709
  00187	83 7d e0 00	 cmp	 DWORD PTR _status$[ebp], 0
  0018b	74 08		 je	 SHORT $LN7@SearchFrom
; Line 710
  0018d	8b 45 e0	 mov	 eax, DWORD PTR _status$[ebp]
  00190	e9 74 01 00 00	 jmp	 $LN18@SearchFrom
$LN7@SearchFrom:
; Line 712
  00195	8b 4d fc	 mov	 ecx, DWORD PTR _dwSecs$[ebp]
  00198	c1 e1 09	 shl	 ecx, 9
  0019b	03 4d 14	 add	 ecx, DWORD PTR _pvBuffer$[ebp]
  0019e	89 4d 14	 mov	 DWORD PTR _pvBuffer$[ebp], ecx
; Line 713
  001a1	8b 55 f8	 mov	 edx, DWORD PTR _dwCurPos$[ebp]
  001a4	03 55 fc	 add	 edx, DWORD PTR _dwSecs$[ebp]
  001a7	89 55 f8	 mov	 DWORD PTR _dwCurPos$[ebp], edx
; Line 714
  001aa	8b 45 f8	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  001ad	3b 45 d8	 cmp	 eax, DWORD PTR _dwEndSec$[ebp]
  001b0	75 05		 jne	 SHORT $LN9@SearchFrom
  001b2	e9 f6 00 00 00	 jmp	 $LN11@SearchFrom
$LN9@SearchFrom:
; Line 718
  001b7	8b 4d e8	 mov	 ecx, DWORD PTR _pGroup$[ebp]
  001ba	8b 55 f8	 mov	 edx, DWORD PTR _dwCurPos$[ebp]
  001bd	3b 11		 cmp	 edx, DWORD PTR [ecx]
  001bf	0f 82 df 00 00
	00		 jb	 $LN5@SearchFrom
  001c5	8b 45 e8	 mov	 eax, DWORD PTR _pGroup$[ebp]
  001c8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001cb	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  001d1	8b 55 e8	 mov	 edx, DWORD PTR _pGroup$[ebp]
  001d4	03 0a		 add	 ecx, DWORD PTR [edx]
  001d6	39 4d f8	 cmp	 DWORD PTR _dwCurPos$[ebp], ecx
  001d9	0f 83 c5 00 00
	00		 jae	 $LN5@SearchFrom
; Line 720
  001df	8b 45 e8	 mov	 eax, DWORD PTR _pGroup$[ebp]
  001e2	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  001e5	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  001eb	8b 55 e8	 mov	 edx, DWORD PTR _pGroup$[ebp]
  001ee	03 0a		 add	 ecx, DWORD PTR [edx]
  001f0	39 4d d8	 cmp	 DWORD PTR _dwEndSec$[ebp], ecx
  001f3	73 08		 jae	 SHORT $LN24@SearchFrom
  001f5	8b 45 d8	 mov	 eax, DWORD PTR _dwEndSec$[ebp]
  001f8	89 45 cc	 mov	 DWORD PTR tv161[ebp], eax
  001fb	eb 14		 jmp	 SHORT $LN25@SearchFrom
$LN24@SearchFrom:
  001fd	8b 4d e8	 mov	 ecx, DWORD PTR _pGroup$[ebp]
  00200	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00203	81 e2 ff ff ff
	7f		 and	 edx, 2147483647		; 7fffffffH
  00209	8b 45 e8	 mov	 eax, DWORD PTR _pGroup$[ebp]
  0020c	03 10		 add	 edx, DWORD PTR [eax]
  0020e	89 55 cc	 mov	 DWORD PTR tv161[ebp], edx
$LN25@SearchFrom:
  00211	8b 4d cc	 mov	 ecx, DWORD PTR tv161[ebp]
  00214	89 4d f4	 mov	 DWORD PTR _dwStop$[ebp], ecx
; Line 721
  00217	8b 55 f4	 mov	 edx, DWORD PTR _dwStop$[ebp]
  0021a	2b 55 f8	 sub	 edx, DWORD PTR _dwCurPos$[ebp]
  0021d	89 55 fc	 mov	 DWORD PTR _dwSecs$[ebp], edx
; Line 726
  00220	8a 45 08	 mov	 al, BYTE PTR _MajorFunction$[ebp]
  00223	50		 push	 eax
  00224	8b 4d 14	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  00227	51		 push	 ecx
  00228	8b 55 fc	 mov	 edx, DWORD PTR _dwSecs$[ebp]
  0022b	52		 push	 edx
  0022c	8b 45 e8	 mov	 eax, DWORD PTR _pGroup$[ebp]
  0022f	8b 4d f8	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  00232	2b 08		 sub	 ecx, DWORD PTR [eax]
  00234	8b 55 e8	 mov	 edx, DWORD PTR _pGroup$[ebp]
  00237	03 4a 08	 add	 ecx, DWORD PTR [edx+8]
  0023a	51		 push	 ecx
  0023b	8b 45 18	 mov	 eax, DWORD PTR _pBlkMoverData$[ebp]
  0023e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00241	51		 push	 ecx
  00242	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  00247	89 45 e0	 mov	 DWORD PTR _status$[ebp], eax
; Line 727
  0024a	83 7d e0 00	 cmp	 DWORD PTR _status$[ebp], 0
  0024e	74 20		 je	 SHORT $LN26@SearchFrom
  00250	6a 00		 push	 0
  00252	68 d7 02 00 00	 push	 727			; 000002d7H
  00257	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  0025c	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KNDAHNNE@status?5?$DN?$DN?5STATUS_SUCCESS?$AA@FNODOBFM@
  00261	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  00267	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR tv178[ebp], 0
  0026e	eb 07		 jmp	 SHORT $LN27@SearchFrom
$LN26@SearchFrom:
  00270	c7 45 c8 01 00
	00 00		 mov	 DWORD PTR tv178[ebp], 1
$LN27@SearchFrom:
; Line 728
  00277	83 7d e0 00	 cmp	 DWORD PTR _status$[ebp], 0
  0027b	74 08		 je	 SHORT $LN4@SearchFrom
; Line 729
  0027d	8b 45 e0	 mov	 eax, DWORD PTR _status$[ebp]
  00280	e9 84 00 00 00	 jmp	 $LN18@SearchFrom
$LN4@SearchFrom:
; Line 730
  00285	8b 55 fc	 mov	 edx, DWORD PTR _dwSecs$[ebp]
  00288	c1 e2 09	 shl	 edx, 9
  0028b	03 55 14	 add	 edx, DWORD PTR _pvBuffer$[ebp]
  0028e	89 55 14	 mov	 DWORD PTR _pvBuffer$[ebp], edx
; Line 731
  00291	8b 45 f8	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  00294	03 45 fc	 add	 eax, DWORD PTR _dwSecs$[ebp]
  00297	89 45 f8	 mov	 DWORD PTR _dwCurPos$[ebp], eax
; Line 733
  0029a	8b 4d f8	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  0029d	3b 4d d8	 cmp	 ecx, DWORD PTR _dwEndSec$[ebp]
  002a0	75 02		 jne	 SHORT $LN5@SearchFrom
; Line 734
  002a2	eb 09		 jmp	 SHORT $LN11@SearchFrom
$LN5@SearchFrom:
; Line 737
  002a4	eb 02		 jmp	 SHORT $LN2@SearchFrom
$LN10@SearchFrom:
; Line 738
  002a6	eb 05		 jmp	 SHORT $LN11@SearchFrom
$LN2@SearchFrom:
; Line 739
  002a8	e9 e9 fd ff ff	 jmp	 $LN12@SearchFrom
$LN11@SearchFrom:
; Line 740
  002ad	e9 82 fd ff ff	 jmp	 $LN16@SearchFrom
$LN15@SearchFrom:
; Line 741
  002b2	8b 55 f8	 mov	 edx, DWORD PTR _dwCurPos$[ebp]
  002b5	3b 55 d8	 cmp	 edx, DWORD PTR _dwEndSec$[ebp]
  002b8	73 4c		 jae	 SHORT $LN1@SearchFrom
; Line 743
  002ba	8b 45 18	 mov	 eax, DWORD PTR _pBlkMoverData$[ebp]
  002bd	50		 push	 eax
  002be	8b 4d 14	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  002c1	51		 push	 ecx
  002c2	8b 55 d8	 mov	 edx, DWORD PTR _dwEndSec$[ebp]
  002c5	2b 55 f8	 sub	 edx, DWORD PTR _dwCurPos$[ebp]
  002c8	52		 push	 edx
  002c9	8b 45 f8	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  002cc	50		 push	 eax
  002cd	8a 4d 08	 mov	 cl, BYTE PTR _MajorFunction$[ebp]
  002d0	51		 push	 ecx
  002d1	e8 00 00 00 00	 call	 _SearchFromGroup@20
  002d6	89 45 e0	 mov	 DWORD PTR _status$[ebp], eax
; Line 744
  002d9	83 7d e0 00	 cmp	 DWORD PTR _status$[ebp], 0
  002dd	74 20		 je	 SHORT $LN28@SearchFrom
  002df	6a 00		 push	 0
  002e1	68 e8 02 00 00	 push	 744			; 000002e8H
  002e6	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  002eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KNDAHNNE@status?5?$DN?$DN?5STATUS_SUCCESS?$AA@FNODOBFM@
  002f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  002f6	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR tv197[ebp], 0
  002fd	eb 07		 jmp	 SHORT $LN1@SearchFrom
$LN28@SearchFrom:
  002ff	c7 45 c4 01 00
	00 00		 mov	 DWORD PTR tv197[ebp], 1
$LN1@SearchFrom:
; Line 746
  00306	8b 45 e0	 mov	 eax, DWORD PTR _status$[ebp]
$LN18@SearchFrom:
; Line 747
  00309	8b e5		 mov	 esp, ebp
  0030b	5d		 pop	 ebp
  0030c	c2 14 00	 ret	 20			; 00000014H
_SearchFromSysGroup@20 ENDP
_TEXT	ENDS
PUBLIC	_ReadWriteFromMovedGroup@20
PUBLIC	_AddToFinalGroup@16
PUBLIC	??_C@_0GP@BBCIBONG@dwStart?5?$DO?$DN?5g_dwDataStart?$CLg_dwDat@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
;	COMDAT ??_C@_0GP@BBCIBONG@dwStart?5?$DO?$DN?5g_dwDataStart?$CLg_dwDat@FNODOBFM@
text$s	SEGMENT
??_C@_0GP@BBCIBONG@dwStart?5?$DO?$DN?5g_dwDataStart?$CLg_dwDat@FNODOBFM@ DB 'd'
	DB	'wStart >= g_dwDataStart+g_dwDataRecPages*DATA_PAGE_SIZE*BUFFE'
	DB	'R_OF_PAGES || dwStart+dwSectors <= g_dwDataStart', 00H ;  ?? ::FNODOBFM::`string'
; Function compile flags: /Odtp
text$s	ENDS
;	COMDAT _SearchFromGroup@20
_TEXT	SEGMENT
tv235 = -84						; size = 4
tv217 = -80						; size = 4
tv197 = -76						; size = 4
tv169 = -72						; size = 4
tv156 = -68						; size = 4
tv74 = -64						; size = 4
_dwEndSec$ = -60					; size = 4
_dwRecStart$ = -56					; size = 4
_status$ = -52						; size = 4
_k$ = -48						; size = 4
_pGroup$ = -44						; size = 4
_nCurPos$ = -40						; size = 4
_FinalGroup$ = -36					; size = 12
_dwStartSec$ = -24					; size = 4
_i$ = -20						; size = 4
_bBreak$ = -16						; size = 4
_dwStop$ = -12						; size = 4
_dwSecs$ = -8						; size = 4
_dwCurPos$ = -4						; size = 4
_MajorFunction$ = 8					; size = 1
_dwStart$ = 12						; size = 4
_dwSectors$ = 16					; size = 4
_pvBuffer$ = 20						; size = 4
_pBlkMoverData$ = 24					; size = 4
_SearchFromGroup@20 PROC				; COMDAT
; Line 754
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 54	 sub	 esp, 84			; 00000054H
; Line 755
  00008	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _bBreak$[ebp], 0
; Line 756
  0000f	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _nCurPos$[ebp], 0
; Line 760
  00016	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _pGroup$[ebp], 0
; Line 762
  0001d	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], 0
; Line 765
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwDataRecPages
  00029	c1 e0 05	 shl	 eax, 5
  0002c	c1 e0 04	 shl	 eax, 4
  0002f	03 05 00 00 00
	00		 add	 eax, DWORD PTR _g_dwDataStart
  00035	39 45 0c	 cmp	 DWORD PTR _dwStart$[ebp], eax
  00038	73 2e		 jae	 SHORT $LN23@SearchFrom@2
  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR _dwStart$[ebp]
  0003d	03 4d 10	 add	 ecx, DWORD PTR _dwSectors$[ebp]
  00040	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _g_dwDataStart
  00046	76 20		 jbe	 SHORT $LN23@SearchFrom@2
  00048	6a 00		 push	 0
  0004a	68 fd 02 00 00	 push	 765			; 000002fdH
  0004f	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  00054	68 00 00 00 00	 push	 OFFSET ??_C@_0GP@BBCIBONG@dwStart?5?$DO?$DN?5g_dwDataStart?$CLg_dwDat@FNODOBFM@
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  0005f	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR tv74[ebp], 0
  00066	eb 07		 jmp	 SHORT $LN24@SearchFrom@2
$LN23@SearchFrom@2:
  00068	c7 45 c0 01 00
	00 00		 mov	 DWORD PTR tv74[ebp], 1
$LN24@SearchFrom@2:
; Line 767
  0006f	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  00076	eb 09		 jmp	 SHORT $LN20@SearchFrom@2
$LN19@SearchFrom@2:
  00078	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  0007b	83 c2 10	 add	 edx, 16			; 00000010H
  0007e	89 55 ec	 mov	 DWORD PTR _i$[ebp], edx
$LN20@SearchFrom@2:
  00081	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00084	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR _g_dwDataRecPages
  0008a	0f 83 19 01 00
	00		 jae	 $LN18@SearchFrom@2
; Line 773
  00090	6a 03		 push	 3
  00092	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_SecGroupBuf+8
  00098	51		 push	 ecx
  00099	68 00 02 00 00	 push	 512			; 00000200H
  0009e	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  000a1	c1 e2 05	 shl	 edx, 5
  000a4	03 15 00 00 00
	00		 add	 edx, DWORD PTR _g_dwDataStart
  000aa	52		 push	 edx
  000ab	8b 45 18	 mov	 eax, DWORD PTR _pBlkMoverData$[ebp]
  000ae	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000b1	51		 push	 ecx
  000b2	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  000b7	89 45 cc	 mov	 DWORD PTR _status$[ebp], eax
; Line 774
  000ba	83 7d cc 00	 cmp	 DWORD PTR _status$[ebp], 0
  000be	74 05		 je	 SHORT $LN17@SearchFrom@2
  000c0	e9 e4 00 00 00	 jmp	 $LN18@SearchFrom@2
$LN17@SearchFrom@2:
; Line 776
  000c5	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  000c8	c1 e2 0a	 shl	 edx, 10			; 0000000aH
  000cb	c1 e2 04	 shl	 edx, 4
  000ce	89 55 c8	 mov	 DWORD PTR _dwRecStart$[ebp], edx
; Line 777
  000d1	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _k$[ebp], 0
  000d8	eb 09		 jmp	 SHORT $LN16@SearchFrom@2
$LN15@SearchFrom@2:
  000da	8b 45 d0	 mov	 eax, DWORD PTR _k$[ebp]
  000dd	83 c0 01	 add	 eax, 1
  000e0	89 45 d0	 mov	 DWORD PTR _k$[ebp], eax
$LN16@SearchFrom@2:
  000e3	81 7d d0 00 40
	00 00		 cmp	 DWORD PTR _k$[ebp], 16384 ; 00004000H
  000ea	0f 83 ac 00 00
	00		 jae	 $LN14@SearchFrom@2
; Line 779
  000f0	8b 4d d0	 mov	 ecx, DWORD PTR _k$[ebp]
  000f3	03 4d c8	 add	 ecx, DWORD PTR _dwRecStart$[ebp]
  000f6	3b 0d 00 00 00
	00		 cmp	 ecx, DWORD PTR _g_dwMovedRecNum
  000fc	0f 83 8c 00 00
	00		 jae	 $LN13@SearchFrom@2
; Line 781
  00102	8b 55 d0	 mov	 edx, DWORD PTR _k$[ebp]
  00105	c1 e2 04	 shl	 edx, 4
  00108	03 15 08 00 00
	00		 add	 edx, DWORD PTR _g_SecGroupBuf+8
  0010e	89 55 d4	 mov	 DWORD PTR _pGroup$[ebp], edx
; Line 783
  00111	8b 45 d4	 mov	 eax, DWORD PTR _pGroup$[ebp]
  00114	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00117	81 e1 ff ff ff
	7f		 and	 ecx, 2147483647		; 7fffffffH
  0011d	8b 55 d4	 mov	 edx, DWORD PTR _pGroup$[ebp]
  00120	03 4a 0c	 add	 ecx, DWORD PTR [edx+12]
  00123	39 4d 0c	 cmp	 DWORD PTR _dwStart$[ebp], ecx
  00126	73 64		 jae	 SHORT $LN12@SearchFrom@2
  00128	8b 45 0c	 mov	 eax, DWORD PTR _dwStart$[ebp]
  0012b	03 45 10	 add	 eax, DWORD PTR _dwSectors$[ebp]
  0012e	8b 4d d4	 mov	 ecx, DWORD PTR _pGroup$[ebp]
  00131	3b 41 0c	 cmp	 eax, DWORD PTR [ecx+12]
  00134	76 56		 jbe	 SHORT $LN12@SearchFrom@2
; Line 785
  00136	8b 55 d4	 mov	 edx, DWORD PTR _pGroup$[ebp]
  00139	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  0013c	25 ff ff ff 7f	 and	 eax, 2147483647		; 7fffffffH
  00141	89 45 e0	 mov	 DWORD PTR _FinalGroup$[ebp+4], eax
; Line 786
  00144	8b 4d d4	 mov	 ecx, DWORD PTR _pGroup$[ebp]
  00147	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0014a	89 55 e4	 mov	 DWORD PTR _FinalGroup$[ebp+8], edx
; Line 787
  0014d	8b 45 d4	 mov	 eax, DWORD PTR _pGroup$[ebp]
  00150	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00153	89 4d dc	 mov	 DWORD PTR _FinalGroup$[ebp], ecx
; Line 788
  00156	8b 55 d8	 mov	 edx, DWORD PTR _nCurPos$[ebp]
  00159	52		 push	 edx
  0015a	83 ec 0c	 sub	 esp, 12			; 0000000cH
  0015d	8b c4		 mov	 eax, esp
  0015f	8b 4d dc	 mov	 ecx, DWORD PTR _FinalGroup$[ebp]
  00162	89 08		 mov	 DWORD PTR [eax], ecx
  00164	8b 55 e0	 mov	 edx, DWORD PTR _FinalGroup$[ebp+4]
  00167	89 50 04	 mov	 DWORD PTR [eax+4], edx
  0016a	8b 4d e4	 mov	 ecx, DWORD PTR _FinalGroup$[ebp+8]
  0016d	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00170	e8 00 00 00 00	 call	 _AddToFinalGroup@16
  00175	85 c0		 test	 eax, eax
  00177	75 0a		 jne	 SHORT $LN11@SearchFrom@2
; Line 789
  00179	b8 03 01 00 00	 mov	 eax, 259		; 00000103H
  0017e	e9 79 02 00 00	 jmp	 $LN21@SearchFrom@2
$LN11@SearchFrom@2:
; Line 791
  00183	8b 55 d8	 mov	 edx, DWORD PTR _nCurPos$[ebp]
  00186	83 c2 01	 add	 edx, 1
  00189	89 55 d8	 mov	 DWORD PTR _nCurPos$[ebp], edx
$LN12@SearchFrom@2:
; Line 794
  0018c	eb 09		 jmp	 SHORT $LN10@SearchFrom@2
$LN13@SearchFrom@2:
; Line 796
  0018e	c7 45 f0 01 00
	00 00		 mov	 DWORD PTR _bBreak$[ebp], 1
; Line 797
  00195	eb 05		 jmp	 SHORT $LN14@SearchFrom@2
$LN10@SearchFrom@2:
; Line 799
  00197	e9 3e ff ff ff	 jmp	 $LN15@SearchFrom@2
$LN14@SearchFrom@2:
; Line 800
  0019c	83 7d f0 00	 cmp	 DWORD PTR _bBreak$[ebp], 0
  001a0	74 02		 je	 SHORT $LN9@SearchFrom@2
  001a2	eb 05		 jmp	 SHORT $LN18@SearchFrom@2
$LN9@SearchFrom@2:
; Line 801
  001a4	e9 cf fe ff ff	 jmp	 $LN19@SearchFrom@2
$LN18@SearchFrom@2:
; Line 803
  001a9	8b 45 0c	 mov	 eax, DWORD PTR _dwStart$[ebp]
  001ac	89 45 e8	 mov	 DWORD PTR _dwStartSec$[ebp], eax
; Line 804
  001af	8b 4d 0c	 mov	 ecx, DWORD PTR _dwStart$[ebp]
  001b2	03 4d 10	 add	 ecx, DWORD PTR _dwSectors$[ebp]
  001b5	89 4d c4	 mov	 DWORD PTR _dwEndSec$[ebp], ecx
; Line 805
  001b8	8b 55 e8	 mov	 edx, DWORD PTR _dwStartSec$[ebp]
  001bb	89 55 fc	 mov	 DWORD PTR _dwCurPos$[ebp], edx
; Line 807
  001be	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  001c5	eb 09		 jmp	 SHORT $LN8@SearchFrom@2
$LN7@SearchFrom@2:
  001c7	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  001ca	83 c0 01	 add	 eax, 1
  001cd	89 45 ec	 mov	 DWORD PTR _i$[ebp], eax
$LN8@SearchFrom@2:
  001d0	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  001d3	3b 4d d8	 cmp	 ecx, DWORD PTR _nCurPos$[ebp]
  001d6	0f 83 c3 01 00
	00		 jae	 $LN6@SearchFrom@2
; Line 809
  001dc	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  001df	6b d2 0c	 imul	 edx, 12			; 0000000cH
  001e2	8b 45 fc	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  001e5	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR _g_FinalGroup[edx]
  001eb	0f 83 a3 00 00
	00		 jae	 $LN5@SearchFrom@2
; Line 812
  001f1	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  001f4	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  001f7	8b 55 c4	 mov	 edx, DWORD PTR _dwEndSec$[ebp]
  001fa	3b 91 00 00 00
	00		 cmp	 edx, DWORD PTR _g_FinalGroup[ecx]
  00200	73 08		 jae	 SHORT $LN25@SearchFrom@2
  00202	8b 45 c4	 mov	 eax, DWORD PTR _dwEndSec$[ebp]
  00205	89 45 bc	 mov	 DWORD PTR tv156[ebp], eax
  00208	eb 0f		 jmp	 SHORT $LN26@SearchFrom@2
$LN25@SearchFrom@2:
  0020a	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  0020d	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  00210	8b 91 00 00 00
	00		 mov	 edx, DWORD PTR _g_FinalGroup[ecx]
  00216	89 55 bc	 mov	 DWORD PTR tv156[ebp], edx
$LN26@SearchFrom@2:
  00219	8b 45 bc	 mov	 eax, DWORD PTR tv156[ebp]
  0021c	89 45 f4	 mov	 DWORD PTR _dwStop$[ebp], eax
; Line 813
  0021f	8b 4d f4	 mov	 ecx, DWORD PTR _dwStop$[ebp]
  00222	2b 4d fc	 sub	 ecx, DWORD PTR _dwCurPos$[ebp]
  00225	89 4d f8	 mov	 DWORD PTR _dwSecs$[ebp], ecx
; Line 814
  00228	8b 55 18	 mov	 edx, DWORD PTR _pBlkMoverData$[ebp]
  0022b	52		 push	 edx
  0022c	8b 45 14	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  0022f	50		 push	 eax
  00230	8b 4d f8	 mov	 ecx, DWORD PTR _dwSecs$[ebp]
  00233	51		 push	 ecx
  00234	8b 55 fc	 mov	 edx, DWORD PTR _dwCurPos$[ebp]
  00237	52		 push	 edx
  00238	8a 45 08	 mov	 al, BYTE PTR _MajorFunction$[ebp]
  0023b	50		 push	 eax
  0023c	e8 00 00 00 00	 call	 _ReadWriteFromMovedGroup@20
  00241	89 45 cc	 mov	 DWORD PTR _status$[ebp], eax
; Line 815
  00244	83 7d cc 00	 cmp	 DWORD PTR _status$[ebp], 0
  00248	74 20		 je	 SHORT $LN27@SearchFrom@2
  0024a	6a 00		 push	 0
  0024c	68 2f 03 00 00	 push	 815			; 0000032fH
  00251	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  00256	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KNDAHNNE@status?5?$DN?$DN?5STATUS_SUCCESS?$AA@FNODOBFM@
  0025b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  00261	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR tv169[ebp], 0
  00268	eb 07		 jmp	 SHORT $LN28@SearchFrom@2
$LN27@SearchFrom@2:
  0026a	c7 45 b8 01 00
	00 00		 mov	 DWORD PTR tv169[ebp], 1
$LN28@SearchFrom@2:
; Line 816
  00271	83 7d cc 00	 cmp	 DWORD PTR _status$[ebp], 0
  00275	74 08		 je	 SHORT $LN4@SearchFrom@2
; Line 817
  00277	8b 45 cc	 mov	 eax, DWORD PTR _status$[ebp]
  0027a	e9 7d 01 00 00	 jmp	 $LN21@SearchFrom@2
$LN4@SearchFrom@2:
; Line 818
  0027f	8b 4d f8	 mov	 ecx, DWORD PTR _dwSecs$[ebp]
  00282	c1 e1 09	 shl	 ecx, 9
  00285	03 4d 14	 add	 ecx, DWORD PTR _pvBuffer$[ebp]
  00288	89 4d 14	 mov	 DWORD PTR _pvBuffer$[ebp], ecx
; Line 819
  0028b	8b 55 fc	 mov	 edx, DWORD PTR _dwCurPos$[ebp]
  0028e	03 55 f8	 add	 edx, DWORD PTR _dwSecs$[ebp]
  00291	89 55 fc	 mov	 DWORD PTR _dwCurPos$[ebp], edx
$LN5@SearchFrom@2:
; Line 823
  00294	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  00297	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0029a	8b 4d fc	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  0029d	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _g_FinalGroup[eax]
  002a3	0f 82 f1 00 00
	00		 jb	 $LN3@SearchFrom@2
  002a9	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  002ac	6b d2 0c	 imul	 edx, 12			; 0000000cH
  002af	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  002b2	6b c0 0c	 imul	 eax, 12			; 0000000cH
  002b5	8b 8a 00 00 00
	00		 mov	 ecx, DWORD PTR _g_FinalGroup[edx]
  002bb	03 88 04 00 00
	00		 add	 ecx, DWORD PTR _g_FinalGroup[eax+4]
  002c1	39 4d fc	 cmp	 DWORD PTR _dwCurPos$[ebp], ecx
  002c4	0f 83 d0 00 00
	00		 jae	 $LN3@SearchFrom@2
; Line 826
  002ca	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  002cd	6b d2 0c	 imul	 edx, 12			; 0000000cH
  002d0	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  002d3	6b c0 0c	 imul	 eax, 12			; 0000000cH
  002d6	8b 8a 00 00 00
	00		 mov	 ecx, DWORD PTR _g_FinalGroup[edx]
  002dc	03 88 04 00 00
	00		 add	 ecx, DWORD PTR _g_FinalGroup[eax+4]
  002e2	39 4d c4	 cmp	 DWORD PTR _dwEndSec$[ebp], ecx
  002e5	73 08		 jae	 SHORT $LN29@SearchFrom@2
  002e7	8b 55 c4	 mov	 edx, DWORD PTR _dwEndSec$[ebp]
  002ea	89 55 b4	 mov	 DWORD PTR tv197[ebp], edx
  002ed	eb 1b		 jmp	 SHORT $LN30@SearchFrom@2
$LN29@SearchFrom@2:
  002ef	8b 45 ec	 mov	 eax, DWORD PTR _i$[ebp]
  002f2	6b c0 0c	 imul	 eax, 12			; 0000000cH
  002f5	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  002f8	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  002fb	8b 90 00 00 00
	00		 mov	 edx, DWORD PTR _g_FinalGroup[eax]
  00301	03 91 04 00 00
	00		 add	 edx, DWORD PTR _g_FinalGroup[ecx+4]
  00307	89 55 b4	 mov	 DWORD PTR tv197[ebp], edx
$LN30@SearchFrom@2:
  0030a	8b 45 b4	 mov	 eax, DWORD PTR tv197[ebp]
  0030d	89 45 f4	 mov	 DWORD PTR _dwStop$[ebp], eax
; Line 827
  00310	8b 4d f4	 mov	 ecx, DWORD PTR _dwStop$[ebp]
  00313	2b 4d fc	 sub	 ecx, DWORD PTR _dwCurPos$[ebp]
  00316	89 4d f8	 mov	 DWORD PTR _dwSecs$[ebp], ecx
; Line 830
  00319	8b 55 18	 mov	 edx, DWORD PTR _pBlkMoverData$[ebp]
  0031c	52		 push	 edx
  0031d	8b 45 14	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00320	50		 push	 eax
  00321	8b 4d f8	 mov	 ecx, DWORD PTR _dwSecs$[ebp]
  00324	51		 push	 ecx
  00325	8b 55 ec	 mov	 edx, DWORD PTR _i$[ebp]
  00328	6b d2 0c	 imul	 edx, 12			; 0000000cH
  0032b	8b 45 fc	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  0032e	2b 82 00 00 00
	00		 sub	 eax, DWORD PTR _g_FinalGroup[edx]
  00334	8b 4d ec	 mov	 ecx, DWORD PTR _i$[ebp]
  00337	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0033a	03 81 08 00 00
	00		 add	 eax, DWORD PTR _g_FinalGroup[ecx+8]
  00340	50		 push	 eax
  00341	8a 55 08	 mov	 dl, BYTE PTR _MajorFunction$[ebp]
  00344	52		 push	 edx
  00345	e8 00 00 00 00	 call	 _ReadWriteFromMovedGroup@20
  0034a	89 45 cc	 mov	 DWORD PTR _status$[ebp], eax
; Line 831
  0034d	83 7d cc 00	 cmp	 DWORD PTR _status$[ebp], 0
  00351	74 20		 je	 SHORT $LN31@SearchFrom@2
  00353	6a 00		 push	 0
  00355	68 3f 03 00 00	 push	 831			; 0000033fH
  0035a	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  0035f	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KNDAHNNE@status?5?$DN?$DN?5STATUS_SUCCESS?$AA@FNODOBFM@
  00364	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  0036a	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR tv217[ebp], 0
  00371	eb 07		 jmp	 SHORT $LN32@SearchFrom@2
$LN31@SearchFrom@2:
  00373	c7 45 b0 01 00
	00 00		 mov	 DWORD PTR tv217[ebp], 1
$LN32@SearchFrom@2:
; Line 832
  0037a	83 7d cc 00	 cmp	 DWORD PTR _status$[ebp], 0
  0037e	74 05		 je	 SHORT $LN2@SearchFrom@2
; Line 833
  00380	8b 45 cc	 mov	 eax, DWORD PTR _status$[ebp]
  00383	eb 77		 jmp	 SHORT $LN21@SearchFrom@2
$LN2@SearchFrom@2:
; Line 834
  00385	8b 45 f8	 mov	 eax, DWORD PTR _dwSecs$[ebp]
  00388	c1 e0 09	 shl	 eax, 9
  0038b	03 45 14	 add	 eax, DWORD PTR _pvBuffer$[ebp]
  0038e	89 45 14	 mov	 DWORD PTR _pvBuffer$[ebp], eax
; Line 835
  00391	8b 4d fc	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  00394	03 4d f8	 add	 ecx, DWORD PTR _dwSecs$[ebp]
  00397	89 4d fc	 mov	 DWORD PTR _dwCurPos$[ebp], ecx
$LN3@SearchFrom@2:
; Line 837
  0039a	e9 28 fe ff ff	 jmp	 $LN7@SearchFrom@2
$LN6@SearchFrom@2:
; Line 839
  0039f	8b 55 fc	 mov	 edx, DWORD PTR _dwCurPos$[ebp]
  003a2	3b 55 c4	 cmp	 edx, DWORD PTR _dwEndSec$[ebp]
  003a5	73 52		 jae	 SHORT $LN1@SearchFrom@2
; Line 841
  003a7	8b 45 c4	 mov	 eax, DWORD PTR _dwEndSec$[ebp]
  003aa	2b 45 fc	 sub	 eax, DWORD PTR _dwCurPos$[ebp]
  003ad	89 45 f8	 mov	 DWORD PTR _dwSecs$[ebp], eax
; Line 842
  003b0	8b 4d 18	 mov	 ecx, DWORD PTR _pBlkMoverData$[ebp]
  003b3	51		 push	 ecx
  003b4	8b 55 14	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  003b7	52		 push	 edx
  003b8	8b 45 f8	 mov	 eax, DWORD PTR _dwSecs$[ebp]
  003bb	50		 push	 eax
  003bc	8b 4d fc	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  003bf	51		 push	 ecx
  003c0	8a 55 08	 mov	 dl, BYTE PTR _MajorFunction$[ebp]
  003c3	52		 push	 edx
  003c4	e8 00 00 00 00	 call	 _ReadWriteFromMovedGroup@20
  003c9	89 45 cc	 mov	 DWORD PTR _status$[ebp], eax
; Line 843
  003cc	83 7d cc 00	 cmp	 DWORD PTR _status$[ebp], 0
  003d0	74 20		 je	 SHORT $LN33@SearchFrom@2
  003d2	6a 00		 push	 0
  003d4	68 4b 03 00 00	 push	 843			; 0000034bH
  003d9	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  003de	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@KNDAHNNE@status?5?$DN?$DN?5STATUS_SUCCESS?$AA@FNODOBFM@
  003e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  003e9	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR tv235[ebp], 0
  003f0	eb 07		 jmp	 SHORT $LN1@SearchFrom@2
$LN33@SearchFrom@2:
  003f2	c7 45 ac 01 00
	00 00		 mov	 DWORD PTR tv235[ebp], 1
$LN1@SearchFrom@2:
; Line 845
  003f9	8b 45 cc	 mov	 eax, DWORD PTR _status$[ebp]
$LN21@SearchFrom@2:
; Line 846
  003fc	8b e5		 mov	 esp, ebp
  003fe	5d		 pop	 ebp
  003ff	c2 14 00	 ret	 20			; 00000014H
_SearchFromGroup@20 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _ReadWriteFromMovedGroup@20
_TEXT	SEGMENT
tv132 = -40						; size = 4
tv79 = -36						; size = 4
_status$ = -32						; size = 4
_dwEnd$ = -28						; size = 4
_dwMovedStart$ = -24					; size = 4
_dwCur$ = -20						; size = 4
_dwMovedSize$ = -16					; size = 4
_dwStart$ = -12						; size = 4
_dwStop$ = -8						; size = 4
_dwSecs$ = -4						; size = 4
_MajorFunction$ = 8					; size = 1
_dwRWStart$ = 12					; size = 4
_dwSize$ = 16						; size = 4
_pvBuffer$ = 20						; size = 4
_pBlkMoverData$ = 24					; size = 4
_ReadWriteFromMovedGroup@20 PROC			; COMDAT
; Line 853
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 28	 sub	 esp, 40			; 00000028H
; Line 854
  00008	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], 0
; Line 858
  0000f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_dwMovedRecNum, 0
  00016	0f 84 03 02 00
	00		 je	 $LN13@ReadWriteF
; Line 860
  0001c	8b 45 0c	 mov	 eax, DWORD PTR _dwRWStart$[ebp]
  0001f	89 45 f4	 mov	 DWORD PTR _dwStart$[ebp], eax
; Line 861
  00022	8b 4d 0c	 mov	 ecx, DWORD PTR _dwRWStart$[ebp]
  00025	89 4d ec	 mov	 DWORD PTR _dwCur$[ebp], ecx
; Line 862
  00028	8b 55 0c	 mov	 edx, DWORD PTR _dwRWStart$[ebp]
  0002b	03 55 10	 add	 edx, DWORD PTR _dwSize$[ebp]
  0002e	89 55 e4	 mov	 DWORD PTR _dwEnd$[ebp], edx
; Line 863
  00031	a1 0c 00 00 00	 mov	 eax, DWORD PTR _g_MovingGroup+12
  00036	89 45 f0	 mov	 DWORD PTR _dwMovedSize$[ebp], eax
; Line 866
  00039	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_MovingGroup+8
  0003f	03 0d 0c 00 00
	00		 add	 ecx, DWORD PTR _g_MovingGroup+12
  00045	39 4d 0c	 cmp	 DWORD PTR _dwRWStart$[ebp], ecx
  00048	0f 83 b0 01 00
	00		 jae	 $LN12@ReadWriteF
  0004e	8b 55 0c	 mov	 edx, DWORD PTR _dwRWStart$[ebp]
  00051	03 55 10	 add	 edx, DWORD PTR _dwSize$[ebp]
  00054	3b 15 08 00 00
	00		 cmp	 edx, DWORD PTR _g_MovingGroup+8
  0005a	0f 86 9e 01 00
	00		 jbe	 $LN12@ReadWriteF
; Line 868
  00060	8b 45 0c	 mov	 eax, DWORD PTR _dwRWStart$[ebp]
  00063	3b 05 08 00 00
	00		 cmp	 eax, DWORD PTR _g_MovingGroup+8
  00069	72 22		 jb	 SHORT $LN11@ReadWriteF
  0006b	8b 4d 0c	 mov	 ecx, DWORD PTR _dwRWStart$[ebp]
  0006e	03 4d 10	 add	 ecx, DWORD PTR _dwSize$[ebp]
  00071	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_MovingGroup+8
  00077	03 15 0c 00 00
	00		 add	 edx, DWORD PTR _g_MovingGroup+12
  0007d	3b ca		 cmp	 ecx, edx
  0007f	77 0c		 ja	 SHORT $LN11@ReadWriteF
; Line 870
  00081	a1 08 00 00 00	 mov	 eax, DWORD PTR _g_MovingGroup+8
  00086	a3 08 00 00 00	 mov	 DWORD PTR _g_MovingGroup+8, eax
; Line 872
  0008b	eb 0c		 jmp	 SHORT $LN10@ReadWriteF
$LN11@ReadWriteF:
; Line 874
  0008d	8b 0d 08 00 00
	00		 mov	 ecx, DWORD PTR _g_MovingGroup+8
  00093	89 0d 08 00 00
	00		 mov	 DWORD PTR _g_MovingGroup+8, ecx
$LN10@ReadWriteF:
; Line 877
  00099	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_MovingGroup, 0
  000a0	74 0b		 je	 SHORT $LN9@ReadWriteF
; Line 879
  000a2	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR _g_MovingGroup+8
  000a8	89 55 e8	 mov	 DWORD PTR _dwMovedStart$[ebp], edx
; Line 882
  000ab	eb 14		 jmp	 SHORT $LN8@ReadWriteF
$LN9@ReadWriteF:
; Line 884
  000ad	a1 08 00 00 00	 mov	 eax, DWORD PTR _g_MovingGroup+8
  000b2	03 05 0c 00 00
	00		 add	 eax, DWORD PTR _g_MovingGroup+12
  000b8	2b 05 10 00 00
	00		 sub	 eax, DWORD PTR _g_MovingGroup+16
  000be	89 45 e8	 mov	 DWORD PTR _dwMovedStart$[ebp], eax
$LN8@ReadWriteF:
; Line 888
  000c1	8b 4d ec	 mov	 ecx, DWORD PTR _dwCur$[ebp]
  000c4	3b 4d e8	 cmp	 ecx, DWORD PTR _dwMovedStart$[ebp]
  000c7	73 75		 jae	 SHORT $LN7@ReadWriteF
; Line 890
  000c9	8b 55 e4	 mov	 edx, DWORD PTR _dwEnd$[ebp]
  000cc	3b 55 e8	 cmp	 edx, DWORD PTR _dwMovedStart$[ebp]
  000cf	73 08		 jae	 SHORT $LN16@ReadWriteF
  000d1	8b 45 e4	 mov	 eax, DWORD PTR _dwEnd$[ebp]
  000d4	89 45 dc	 mov	 DWORD PTR tv79[ebp], eax
  000d7	eb 06		 jmp	 SHORT $LN17@ReadWriteF
$LN16@ReadWriteF:
  000d9	8b 4d e8	 mov	 ecx, DWORD PTR _dwMovedStart$[ebp]
  000dc	89 4d dc	 mov	 DWORD PTR tv79[ebp], ecx
$LN17@ReadWriteF:
  000df	8b 55 dc	 mov	 edx, DWORD PTR tv79[ebp]
  000e2	89 55 f8	 mov	 DWORD PTR _dwStop$[ebp], edx
; Line 891
  000e5	8b 45 f8	 mov	 eax, DWORD PTR _dwStop$[ebp]
  000e8	2b 45 ec	 sub	 eax, DWORD PTR _dwCur$[ebp]
  000eb	89 45 fc	 mov	 DWORD PTR _dwSecs$[ebp], eax
; Line 893
  000ee	8a 4d 08	 mov	 cl, BYTE PTR _MajorFunction$[ebp]
  000f1	51		 push	 ecx
  000f2	8b 55 14	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  000f5	52		 push	 edx
  000f6	8b 45 fc	 mov	 eax, DWORD PTR _dwSecs$[ebp]
  000f9	50		 push	 eax
  000fa	8b 4d ec	 mov	 ecx, DWORD PTR _dwCur$[ebp]
  000fd	2b 0d 08 00 00
	00		 sub	 ecx, DWORD PTR _g_MovingGroup+8
  00103	03 0d 04 00 00
	00		 add	 ecx, DWORD PTR _g_MovingGroup+4
  00109	51		 push	 ecx
  0010a	8b 55 18	 mov	 edx, DWORD PTR _pBlkMoverData$[ebp]
  0010d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00110	50		 push	 eax
  00111	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  00116	89 45 e0	 mov	 DWORD PTR _status$[ebp], eax
; Line 894
  00119	8b 4d fc	 mov	 ecx, DWORD PTR _dwSecs$[ebp]
  0011c	c1 e1 09	 shl	 ecx, 9
  0011f	03 4d 14	 add	 ecx, DWORD PTR _pvBuffer$[ebp]
  00122	89 4d 14	 mov	 DWORD PTR _pvBuffer$[ebp], ecx
; Line 895
  00125	8b 55 ec	 mov	 edx, DWORD PTR _dwCur$[ebp]
  00128	03 55 fc	 add	 edx, DWORD PTR _dwSecs$[ebp]
  0012b	89 55 ec	 mov	 DWORD PTR _dwCur$[ebp], edx
; Line 896
  0012e	8b 45 ec	 mov	 eax, DWORD PTR _dwCur$[ebp]
  00131	3b 45 e4	 cmp	 eax, DWORD PTR _dwEnd$[ebp]
  00134	75 08		 jne	 SHORT $LN7@ReadWriteF
  00136	8b 45 e0	 mov	 eax, DWORD PTR _status$[ebp]
  00139	e9 03 01 00 00	 jmp	 $LN14@ReadWriteF
$LN7@ReadWriteF:
; Line 900
  0013e	8b 4d ec	 mov	 ecx, DWORD PTR _dwCur$[ebp]
  00141	3b 4d e8	 cmp	 ecx, DWORD PTR _dwMovedStart$[ebp]
  00144	72 7a		 jb	 SHORT $LN5@ReadWriteF
  00146	8b 55 e8	 mov	 edx, DWORD PTR _dwMovedStart$[ebp]
  00149	03 55 f0	 add	 edx, DWORD PTR _dwMovedSize$[ebp]
  0014c	39 55 ec	 cmp	 DWORD PTR _dwCur$[ebp], edx
  0014f	73 6f		 jae	 SHORT $LN5@ReadWriteF
; Line 902
  00151	8b 45 e8	 mov	 eax, DWORD PTR _dwMovedStart$[ebp]
  00154	03 45 f0	 add	 eax, DWORD PTR _dwMovedSize$[ebp]
  00157	39 45 e4	 cmp	 DWORD PTR _dwEnd$[ebp], eax
  0015a	73 08		 jae	 SHORT $LN18@ReadWriteF
  0015c	8b 4d e4	 mov	 ecx, DWORD PTR _dwEnd$[ebp]
  0015f	89 4d d8	 mov	 DWORD PTR tv132[ebp], ecx
  00162	eb 09		 jmp	 SHORT $LN19@ReadWriteF
$LN18@ReadWriteF:
  00164	8b 55 e8	 mov	 edx, DWORD PTR _dwMovedStart$[ebp]
  00167	03 55 f0	 add	 edx, DWORD PTR _dwMovedSize$[ebp]
  0016a	89 55 d8	 mov	 DWORD PTR tv132[ebp], edx
$LN19@ReadWriteF:
  0016d	8b 45 d8	 mov	 eax, DWORD PTR tv132[ebp]
  00170	89 45 f8	 mov	 DWORD PTR _dwStop$[ebp], eax
; Line 903
  00173	8b 4d f8	 mov	 ecx, DWORD PTR _dwStop$[ebp]
  00176	2b 4d ec	 sub	 ecx, DWORD PTR _dwCur$[ebp]
  00179	89 4d fc	 mov	 DWORD PTR _dwSecs$[ebp], ecx
; Line 906
  0017c	8a 55 08	 mov	 dl, BYTE PTR _MajorFunction$[ebp]
  0017f	52		 push	 edx
  00180	8b 45 14	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00183	50		 push	 eax
  00184	8b 4d fc	 mov	 ecx, DWORD PTR _dwSecs$[ebp]
  00187	51		 push	 ecx
  00188	8b 55 ec	 mov	 edx, DWORD PTR _dwCur$[ebp]
  0018b	52		 push	 edx
  0018c	8b 45 18	 mov	 eax, DWORD PTR _pBlkMoverData$[ebp]
  0018f	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00192	51		 push	 ecx
  00193	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  00198	89 45 e0	 mov	 DWORD PTR _status$[ebp], eax
; Line 907
  0019b	8b 55 fc	 mov	 edx, DWORD PTR _dwSecs$[ebp]
  0019e	c1 e2 09	 shl	 edx, 9
  001a1	03 55 14	 add	 edx, DWORD PTR _pvBuffer$[ebp]
  001a4	89 55 14	 mov	 DWORD PTR _pvBuffer$[ebp], edx
; Line 908
  001a7	8b 45 ec	 mov	 eax, DWORD PTR _dwCur$[ebp]
  001aa	03 45 fc	 add	 eax, DWORD PTR _dwSecs$[ebp]
  001ad	89 45 ec	 mov	 DWORD PTR _dwCur$[ebp], eax
; Line 909
  001b0	8b 4d ec	 mov	 ecx, DWORD PTR _dwCur$[ebp]
  001b3	3b 4d e4	 cmp	 ecx, DWORD PTR _dwEnd$[ebp]
  001b6	75 08		 jne	 SHORT $LN5@ReadWriteF
  001b8	8b 45 e0	 mov	 eax, DWORD PTR _status$[ebp]
  001bb	e9 81 00 00 00	 jmp	 $LN14@ReadWriteF
$LN5@ReadWriteF:
; Line 912
  001c0	8b 55 ec	 mov	 edx, DWORD PTR _dwCur$[ebp]
  001c3	3b 55 e4	 cmp	 edx, DWORD PTR _dwEnd$[ebp]
  001c6	73 34		 jae	 SHORT $LN3@ReadWriteF
; Line 914
  001c8	8b 45 e4	 mov	 eax, DWORD PTR _dwEnd$[ebp]
  001cb	2b 45 ec	 sub	 eax, DWORD PTR _dwCur$[ebp]
  001ce	89 45 fc	 mov	 DWORD PTR _dwSecs$[ebp], eax
; Line 916
  001d1	8a 4d 08	 mov	 cl, BYTE PTR _MajorFunction$[ebp]
  001d4	51		 push	 ecx
  001d5	8b 55 14	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  001d8	52		 push	 edx
  001d9	8b 45 fc	 mov	 eax, DWORD PTR _dwSecs$[ebp]
  001dc	50		 push	 eax
  001dd	8b 4d ec	 mov	 ecx, DWORD PTR _dwCur$[ebp]
  001e0	2b 0d 08 00 00
	00		 sub	 ecx, DWORD PTR _g_MovingGroup+8
  001e6	03 0d 04 00 00
	00		 add	 ecx, DWORD PTR _g_MovingGroup+4
  001ec	51		 push	 ecx
  001ed	8b 55 18	 mov	 edx, DWORD PTR _pBlkMoverData$[ebp]
  001f0	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  001f3	50		 push	 eax
  001f4	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  001f9	89 45 e0	 mov	 DWORD PTR _status$[ebp], eax
$LN3@ReadWriteF:
; Line 919
  001fc	eb 1f		 jmp	 SHORT $LN2@ReadWriteF
$LN12@ReadWriteF:
; Line 920
  001fe	8a 4d 08	 mov	 cl, BYTE PTR _MajorFunction$[ebp]
  00201	51		 push	 ecx
  00202	8b 55 14	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  00205	52		 push	 edx
  00206	8b 45 10	 mov	 eax, DWORD PTR _dwSize$[ebp]
  00209	50		 push	 eax
  0020a	8b 4d 0c	 mov	 ecx, DWORD PTR _dwRWStart$[ebp]
  0020d	51		 push	 ecx
  0020e	8b 55 18	 mov	 edx, DWORD PTR _pBlkMoverData$[ebp]
  00211	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00214	50		 push	 eax
  00215	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  0021a	89 45 e0	 mov	 DWORD PTR _status$[ebp], eax
$LN2@ReadWriteF:
; Line 922
  0021d	eb 1f		 jmp	 SHORT $LN1@ReadWriteF
$LN13@ReadWriteF:
; Line 923
  0021f	8a 4d 08	 mov	 cl, BYTE PTR _MajorFunction$[ebp]
  00222	51		 push	 ecx
  00223	8b 55 14	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  00226	52		 push	 edx
  00227	8b 45 10	 mov	 eax, DWORD PTR _dwSize$[ebp]
  0022a	50		 push	 eax
  0022b	8b 4d 0c	 mov	 ecx, DWORD PTR _dwRWStart$[ebp]
  0022e	51		 push	 ecx
  0022f	8b 55 18	 mov	 edx, DWORD PTR _pBlkMoverData$[ebp]
  00232	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00235	50		 push	 eax
  00236	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  0023b	89 45 e0	 mov	 DWORD PTR _status$[ebp], eax
$LN1@ReadWriteF:
; Line 924
  0023e	8b 45 e0	 mov	 eax, DWORD PTR _status$[ebp]
$LN14@ReadWriteF:
; Line 925
  00241	8b e5		 mov	 esp, ebp
  00243	5d		 pop	 ebp
  00244	c2 14 00	 ret	 20			; 00000014H
_ReadWriteFromMovedGroup@20 ENDP
_TEXT	ENDS
PUBLIC	_ReadWriteFromGroup@24
; Function compile flags: /Odtp
;	COMDAT _ReadWriteFromGroup@24
_TEXT	SEGMENT
tv129 = -36						; size = 4
tv68 = -32						; size = 4
_dwEndSec$ = -28					; size = 4
_status$ = -24						; size = 4
_dwStartSec$ = -20					; size = 4
_pProtectGroup$ = -16					; size = 4
_dwStop$ = -12						; size = 4
_dwCurPos$ = -8						; size = 4
_dwSecs$ = -4						; size = 4
_MajorFunction$ = 8					; size = 1
_dwStart$ = 12						; size = 4
_dwSize$ = 16						; size = 4
_pvBuffer$ = 20						; size = 4
_bRelocate$ = 24					; size = 4
_pBlkMoverData$ = 28					; size = 4
_ReadWriteFromGroup@24 PROC				; COMDAT
; Line 933
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 24	 sub	 esp, 36			; 00000024H
; Line 934
  00008	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], 0
; Line 940
  0000f	8b 45 0c	 mov	 eax, DWORD PTR _dwStart$[ebp]
  00012	89 45 ec	 mov	 DWORD PTR _dwStartSec$[ebp], eax
; Line 941
  00015	8b 4d 0c	 mov	 ecx, DWORD PTR _dwStart$[ebp]
  00018	03 4d 10	 add	 ecx, DWORD PTR _dwSize$[ebp]
  0001b	89 4d e4	 mov	 DWORD PTR _dwEndSec$[ebp], ecx
; Line 942
  0001e	8b 55 0c	 mov	 edx, DWORD PTR _dwStart$[ebp]
  00021	89 55 f8	 mov	 DWORD PTR _dwCurPos$[ebp], edx
; Line 944
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pProtectList
  00029	89 45 f0	 mov	 DWORD PTR _pProtectGroup$[ebp], eax
$LN12@ReadWriteF@2:
; Line 946
  0002c	83 7d f0 00	 cmp	 DWORD PTR _pProtectGroup$[ebp], 0
  00030	0f 84 50 01 00
	00		 je	 $LN11@ReadWriteF@2
; Line 948
  00036	8b 4d f0	 mov	 ecx, DWORD PTR _pProtectGroup$[ebp]
  00039	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003b	3b 55 f8	 cmp	 edx, DWORD PTR _dwCurPos$[ebp]
  0003e	0f 86 8e 00 00
	00		 jbe	 $LN10@ReadWriteF@2
; Line 950
  00044	8b 45 f0	 mov	 eax, DWORD PTR _pProtectGroup$[ebp]
  00047	8b 4d e4	 mov	 ecx, DWORD PTR _dwEndSec$[ebp]
  0004a	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0004c	73 08		 jae	 SHORT $LN15@ReadWriteF@2
  0004e	8b 55 e4	 mov	 edx, DWORD PTR _dwEndSec$[ebp]
  00051	89 55 e0	 mov	 DWORD PTR tv68[ebp], edx
  00054	eb 08		 jmp	 SHORT $LN16@ReadWriteF@2
$LN15@ReadWriteF@2:
  00056	8b 45 f0	 mov	 eax, DWORD PTR _pProtectGroup$[ebp]
  00059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005b	89 4d e0	 mov	 DWORD PTR tv68[ebp], ecx
$LN16@ReadWriteF@2:
  0005e	8b 55 e0	 mov	 edx, DWORD PTR tv68[ebp]
  00061	89 55 f4	 mov	 DWORD PTR _dwStop$[ebp], edx
; Line 951
  00064	8b 45 f4	 mov	 eax, DWORD PTR _dwStop$[ebp]
  00067	2b 45 f8	 sub	 eax, DWORD PTR _dwCurPos$[ebp]
  0006a	89 45 fc	 mov	 DWORD PTR _dwSecs$[ebp], eax
; Line 952
  0006d	83 7d 18 00	 cmp	 DWORD PTR _bRelocate$[ebp], 0
  00071	74 1e		 je	 SHORT $LN9@ReadWriteF@2
; Line 953
  00073	8b 4d 1c	 mov	 ecx, DWORD PTR _pBlkMoverData$[ebp]
  00076	51		 push	 ecx
  00077	8b 55 14	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  0007a	52		 push	 edx
  0007b	8b 45 fc	 mov	 eax, DWORD PTR _dwSecs$[ebp]
  0007e	50		 push	 eax
  0007f	8b 4d f8	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  00082	51		 push	 ecx
  00083	8a 55 08	 mov	 dl, BYTE PTR _MajorFunction$[ebp]
  00086	52		 push	 edx
  00087	e8 00 00 00 00	 call	 _DoLinearIo@20
  0008c	89 45 e8	 mov	 DWORD PTR _status$[ebp], eax
; Line 954
  0008f	eb 1f		 jmp	 SHORT $LN8@ReadWriteF@2
$LN9@ReadWriteF@2:
; Line 955
  00091	8a 45 08	 mov	 al, BYTE PTR _MajorFunction$[ebp]
  00094	50		 push	 eax
  00095	8b 4d 14	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  00098	51		 push	 ecx
  00099	8b 55 fc	 mov	 edx, DWORD PTR _dwSecs$[ebp]
  0009c	52		 push	 edx
  0009d	8b 45 f8	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  000a0	50		 push	 eax
  000a1	8b 4d 1c	 mov	 ecx, DWORD PTR _pBlkMoverData$[ebp]
  000a4	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  000a7	52		 push	 edx
  000a8	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  000ad	89 45 e8	 mov	 DWORD PTR _status$[ebp], eax
$LN8@ReadWriteF@2:
; Line 956
  000b0	8b 45 fc	 mov	 eax, DWORD PTR _dwSecs$[ebp]
  000b3	c1 e0 09	 shl	 eax, 9
  000b6	03 45 14	 add	 eax, DWORD PTR _pvBuffer$[ebp]
  000b9	89 45 14	 mov	 DWORD PTR _pvBuffer$[ebp], eax
; Line 957
  000bc	8b 4d f8	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  000bf	03 4d fc	 add	 ecx, DWORD PTR _dwSecs$[ebp]
  000c2	89 4d f8	 mov	 DWORD PTR _dwCurPos$[ebp], ecx
; Line 958
  000c5	8b 55 f8	 mov	 edx, DWORD PTR _dwCurPos$[ebp]
  000c8	3b 55 e4	 cmp	 edx, DWORD PTR _dwEndSec$[ebp]
  000cb	75 05		 jne	 SHORT $LN10@ReadWriteF@2
  000cd	e9 b4 00 00 00	 jmp	 $LN11@ReadWriteF@2
$LN10@ReadWriteF@2:
; Line 962
  000d2	8b 45 f0	 mov	 eax, DWORD PTR _pProtectGroup$[ebp]
  000d5	8b 4d f8	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  000d8	3b 08		 cmp	 ecx, DWORD PTR [eax]
  000da	0f 82 8e 00 00
	00		 jb	 $LN6@ReadWriteF@2
  000e0	8b 55 f0	 mov	 edx, DWORD PTR _pProtectGroup$[ebp]
  000e3	8b 02		 mov	 eax, DWORD PTR [edx]
  000e5	8b 4d f0	 mov	 ecx, DWORD PTR _pProtectGroup$[ebp]
  000e8	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  000eb	39 45 f8	 cmp	 DWORD PTR _dwCurPos$[ebp], eax
  000ee	73 7e		 jae	 SHORT $LN6@ReadWriteF@2
; Line 965
  000f0	8b 55 f0	 mov	 edx, DWORD PTR _pProtectGroup$[ebp]
  000f3	8b 02		 mov	 eax, DWORD PTR [edx]
  000f5	8b 4d f0	 mov	 ecx, DWORD PTR _pProtectGroup$[ebp]
  000f8	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  000fb	39 45 e4	 cmp	 DWORD PTR _dwEndSec$[ebp], eax
  000fe	73 08		 jae	 SHORT $LN17@ReadWriteF@2
  00100	8b 55 e4	 mov	 edx, DWORD PTR _dwEndSec$[ebp]
  00103	89 55 dc	 mov	 DWORD PTR tv129[ebp], edx
  00106	eb 0e		 jmp	 SHORT $LN18@ReadWriteF@2
$LN17@ReadWriteF@2:
  00108	8b 45 f0	 mov	 eax, DWORD PTR _pProtectGroup$[ebp]
  0010b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0010d	8b 55 f0	 mov	 edx, DWORD PTR _pProtectGroup$[ebp]
  00110	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  00113	89 4d dc	 mov	 DWORD PTR tv129[ebp], ecx
$LN18@ReadWriteF@2:
  00116	8b 45 dc	 mov	 eax, DWORD PTR tv129[ebp]
  00119	89 45 f4	 mov	 DWORD PTR _dwStop$[ebp], eax
; Line 966
  0011c	8b 4d f4	 mov	 ecx, DWORD PTR _dwStop$[ebp]
  0011f	2b 4d f8	 sub	 ecx, DWORD PTR _dwCurPos$[ebp]
  00122	89 4d fc	 mov	 DWORD PTR _dwSecs$[ebp], ecx
; Line 971
  00125	8a 55 08	 mov	 dl, BYTE PTR _MajorFunction$[ebp]
  00128	52		 push	 edx
  00129	8b 45 14	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  0012c	50		 push	 eax
  0012d	8b 4d fc	 mov	 ecx, DWORD PTR _dwSecs$[ebp]
  00130	51		 push	 ecx
  00131	8b 55 f0	 mov	 edx, DWORD PTR _pProtectGroup$[ebp]
  00134	8b 45 f8	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  00137	2b 02		 sub	 eax, DWORD PTR [edx]
  00139	8b 4d f0	 mov	 ecx, DWORD PTR _pProtectGroup$[ebp]
  0013c	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  0013f	50		 push	 eax
  00140	8b 55 1c	 mov	 edx, DWORD PTR _pBlkMoverData$[ebp]
  00143	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00146	50		 push	 eax
  00147	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  0014c	89 45 e8	 mov	 DWORD PTR _status$[ebp], eax
; Line 973
  0014f	8b 4d fc	 mov	 ecx, DWORD PTR _dwSecs$[ebp]
  00152	c1 e1 09	 shl	 ecx, 9
  00155	03 4d 14	 add	 ecx, DWORD PTR _pvBuffer$[ebp]
  00158	89 4d 14	 mov	 DWORD PTR _pvBuffer$[ebp], ecx
; Line 974
  0015b	8b 55 f8	 mov	 edx, DWORD PTR _dwCurPos$[ebp]
  0015e	03 55 fc	 add	 edx, DWORD PTR _dwSecs$[ebp]
  00161	89 55 f8	 mov	 DWORD PTR _dwCurPos$[ebp], edx
; Line 975
  00164	8b 45 f8	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  00167	3b 45 e4	 cmp	 eax, DWORD PTR _dwEndSec$[ebp]
  0016a	75 02		 jne	 SHORT $LN6@ReadWriteF@2
  0016c	eb 18		 jmp	 SHORT $LN11@ReadWriteF@2
$LN6@ReadWriteF@2:
; Line 977
  0016e	8b 4d f8	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  00171	3b 4d e4	 cmp	 ecx, DWORD PTR _dwEndSec$[ebp]
  00174	75 02		 jne	 SHORT $LN4@ReadWriteF@2
  00176	eb 0e		 jmp	 SHORT $LN11@ReadWriteF@2
$LN4@ReadWriteF@2:
; Line 978
  00178	8b 55 f0	 mov	 edx, DWORD PTR _pProtectGroup$[ebp]
  0017b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0017e	89 45 f0	 mov	 DWORD PTR _pProtectGroup$[ebp], eax
; Line 979
  00181	e9 a6 fe ff ff	 jmp	 $LN12@ReadWriteF@2
$LN11@ReadWriteF@2:
; Line 981
  00186	8b 4d f8	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  00189	3b 4d e4	 cmp	 ecx, DWORD PTR _dwEndSec$[ebp]
  0018c	73 4c		 jae	 SHORT $LN3@ReadWriteF@2
; Line 983
  0018e	8b 55 e4	 mov	 edx, DWORD PTR _dwEndSec$[ebp]
  00191	2b 55 f8	 sub	 edx, DWORD PTR _dwCurPos$[ebp]
  00194	89 55 fc	 mov	 DWORD PTR _dwSecs$[ebp], edx
; Line 984
  00197	83 7d 18 00	 cmp	 DWORD PTR _bRelocate$[ebp], 0
  0019b	74 1e		 je	 SHORT $LN2@ReadWriteF@2
; Line 985
  0019d	8b 45 1c	 mov	 eax, DWORD PTR _pBlkMoverData$[ebp]
  001a0	50		 push	 eax
  001a1	8b 4d 14	 mov	 ecx, DWORD PTR _pvBuffer$[ebp]
  001a4	51		 push	 ecx
  001a5	8b 55 fc	 mov	 edx, DWORD PTR _dwSecs$[ebp]
  001a8	52		 push	 edx
  001a9	8b 45 f8	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  001ac	50		 push	 eax
  001ad	8a 4d 08	 mov	 cl, BYTE PTR _MajorFunction$[ebp]
  001b0	51		 push	 ecx
  001b1	e8 00 00 00 00	 call	 _DoLinearIo@20
  001b6	89 45 e8	 mov	 DWORD PTR _status$[ebp], eax
; Line 986
  001b9	eb 1f		 jmp	 SHORT $LN3@ReadWriteF@2
$LN2@ReadWriteF@2:
; Line 987
  001bb	8a 55 08	 mov	 dl, BYTE PTR _MajorFunction$[ebp]
  001be	52		 push	 edx
  001bf	8b 45 14	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  001c2	50		 push	 eax
  001c3	8b 4d fc	 mov	 ecx, DWORD PTR _dwSecs$[ebp]
  001c6	51		 push	 ecx
  001c7	8b 55 f8	 mov	 edx, DWORD PTR _dwCurPos$[ebp]
  001ca	52		 push	 edx
  001cb	8b 45 1c	 mov	 eax, DWORD PTR _pBlkMoverData$[ebp]
  001ce	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  001d1	51		 push	 ecx
  001d2	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  001d7	89 45 e8	 mov	 DWORD PTR _status$[ebp], eax
$LN3@ReadWriteF@2:
; Line 989
  001da	8b 45 e8	 mov	 eax, DWORD PTR _status$[ebp]
; Line 990
  001dd	8b e5		 mov	 esp, ebp
  001df	5d		 pop	 ebp
  001e0	c2 18 00	 ret	 24			; 00000018H
_ReadWriteFromGroup@24 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@CHLIGOKH@pProtectFreeGroup?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	_GetProtectFreeGroup@0
;	COMDAT ??_C@_0BC@CHLIGOKH@pProtectFreeGroup?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BC@CHLIGOKH@pProtectFreeGroup?$AA@FNODOBFM@ DB 'pProtectFreeGroup', 00H ;  ?? ::FNODOBFM::`string'
; Function compile flags: /Odtp
text$s	ENDS
;	COMDAT _GetProtectFreeGroup@0
_TEXT	SEGMENT
tv72 = -8						; size = 4
_pProtectFreeGroup$ = -4				; size = 4
_GetProtectFreeGroup@0 PROC				; COMDAT
; Line 993
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 08	 sub	 esp, 8
; Line 996
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pProtectFreeList
  0000d	89 45 fc	 mov	 DWORD PTR _pProtectFreeGroup$[ebp], eax
; Line 997
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pProtectFreeList
  00016	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00019	89 15 00 00 00
	00		 mov	 DWORD PTR _g_pProtectFreeList, edx
; Line 998
  0001f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pProtectFreeList, 0
  00026	74 0c		 je	 SHORT $LN1@GetProtect
; Line 1000
  00028	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pProtectFreeList
  0002d	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN1@GetProtect:
; Line 1002
  00034	83 7d fc 00	 cmp	 DWORD PTR _pProtectFreeGroup$[ebp], 0
  00038	75 20		 jne	 SHORT $LN4@GetProtect
  0003a	6a 00		 push	 0
  0003c	68 ea 03 00 00	 push	 1002			; 000003eaH
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CHLIGOKH@pProtectFreeGroup?$AA@FNODOBFM@
  0004b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  00051	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR tv72[ebp], 0
  00058	eb 07		 jmp	 SHORT $LN5@GetProtect
$LN4@GetProtect:
  0005a	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
$LN5@GetProtect:
; Line 1003
  00061	8b 4d fc	 mov	 ecx, DWORD PTR _pProtectFreeGroup$[ebp]
  00064	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; Line 1004
  0006b	8b 45 fc	 mov	 eax, DWORD PTR _pProtectFreeGroup$[ebp]
; Line 1005
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
_GetProtectFreeGroup@0 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@JKIKCEFJ@g_dwFreeSize?5?$DO?5dwSize?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0BG@NPDDLGMJ@g_dwFreeSize?5?$DO?5dwSecs?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	_AddToProtectGroup@16
;	COMDAT ??_C@_0BG@JKIKCEFJ@g_dwFreeSize?5?$DO?5dwSize?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BG@JKIKCEFJ@g_dwFreeSize?5?$DO?5dwSize?$AA@FNODOBFM@ DB 'g_dwFreeS'
	DB	'ize > dwSize', 00H				;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0BG@NPDDLGMJ@g_dwFreeSize?5?$DO?5dwSecs?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BG@NPDDLGMJ@g_dwFreeSize?5?$DO?5dwSecs?$AA@FNODOBFM@ DB 'g_dwFreeS'
	DB	'ize > dwSecs', 00H				;  ?? ::FNODOBFM::`string'
; Function compile flags: /Odtp
text$s	ENDS
;	COMDAT _AddToProtectGroup@16
_TEXT	SEGMENT
tv180 = -52						; size = 4
tv143 = -48						; size = 4
tv87 = -44						; size = 4
tv68 = -40						; size = 4
_dwEndSec$ = -36					; size = 4
_pProtectFreeGroup$ = -32				; size = 4
_status$ = -28						; size = 4
_dwStartSec$ = -24					; size = 4
_pProtectGroup$ = -20					; size = 4
_dwStop$ = -16						; size = 4
_pProtectGroupTail$ = -12				; size = 4
_dwCurPos$ = -8						; size = 4
_dwSecs$ = -4						; size = 4
_dwStart$ = 8						; size = 4
_dwSize$ = 12						; size = 4
_pvBuffer$ = 16						; size = 4
_pBlkMoverData$ = 20					; size = 4
_AddToProtectGroup@16 PROC				; COMDAT
; Line 1011
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 34	 sub	 esp, 52			; 00000034H
; Line 1012
  00008	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], 0
; Line 1021
  0000f	8b 45 08	 mov	 eax, DWORD PTR _dwStart$[ebp]
  00012	89 45 e8	 mov	 DWORD PTR _dwStartSec$[ebp], eax
; Line 1022
  00015	8b 4d 08	 mov	 ecx, DWORD PTR _dwStart$[ebp]
  00018	03 4d 0c	 add	 ecx, DWORD PTR _dwSize$[ebp]
  0001b	89 4d dc	 mov	 DWORD PTR _dwEndSec$[ebp], ecx
; Line 1023
  0001e	8b 55 08	 mov	 edx, DWORD PTR _dwStart$[ebp]
  00021	89 55 f8	 mov	 DWORD PTR _dwCurPos$[ebp], edx
; Line 1025
  00024	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pProtectList
  00029	89 45 ec	 mov	 DWORD PTR _pProtectGroup$[ebp], eax
; Line 1026
  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pProtectList
  00032	89 4d f4	 mov	 DWORD PTR _pProtectGroupTail$[ebp], ecx
$LN15@AddToProte:
; Line 1028
  00035	83 7d ec 00	 cmp	 DWORD PTR _pProtectGroup$[ebp], 0
  00039	0f 84 07 02 00
	00		 je	 $LN14@AddToProte
; Line 1033
  0003f	8b 55 ec	 mov	 edx, DWORD PTR _pProtectGroup$[ebp]
  00042	8b 02		 mov	 eax, DWORD PTR [edx]
  00044	3b 45 f8	 cmp	 eax, DWORD PTR _dwCurPos$[ebp]
  00047	0f 86 35 01 00
	00		 jbe	 $LN13@AddToProte
; Line 1035
  0004d	8b 4d ec	 mov	 ecx, DWORD PTR _pProtectGroup$[ebp]
  00050	8b 55 dc	 mov	 edx, DWORD PTR _dwEndSec$[ebp]
  00053	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00055	73 08		 jae	 SHORT $LN18@AddToProte
  00057	8b 45 dc	 mov	 eax, DWORD PTR _dwEndSec$[ebp]
  0005a	89 45 d8	 mov	 DWORD PTR tv68[ebp], eax
  0005d	eb 08		 jmp	 SHORT $LN19@AddToProte
$LN18@AddToProte:
  0005f	8b 4d ec	 mov	 ecx, DWORD PTR _pProtectGroup$[ebp]
  00062	8b 11		 mov	 edx, DWORD PTR [ecx]
  00064	89 55 d8	 mov	 DWORD PTR tv68[ebp], edx
$LN19@AddToProte:
  00067	8b 45 d8	 mov	 eax, DWORD PTR tv68[ebp]
  0006a	89 45 f0	 mov	 DWORD PTR _dwStop$[ebp], eax
; Line 1036
  0006d	8b 4d f0	 mov	 ecx, DWORD PTR _dwStop$[ebp]
  00070	2b 4d f8	 sub	 ecx, DWORD PTR _dwCurPos$[ebp]
  00073	89 4d fc	 mov	 DWORD PTR _dwSecs$[ebp], ecx
; Line 1037
  00076	e8 00 00 00 00	 call	 _GetProtectFreeGroup@0
  0007b	89 45 e0	 mov	 DWORD PTR _pProtectFreeGroup$[ebp], eax
; Line 1038
  0007e	83 7d e0 00	 cmp	 DWORD PTR _pProtectFreeGroup$[ebp], 0
  00082	75 08		 jne	 SHORT $LN12@AddToProte
; Line 1039
  00084	8b 45 e4	 mov	 eax, DWORD PTR _status$[ebp]
  00087	e9 aa 02 00 00	 jmp	 $LN16@AddToProte
$LN12@AddToProte:
; Line 1041
  0008c	8b 55 ec	 mov	 edx, DWORD PTR _pProtectGroup$[ebp]
  0008f	3b 15 00 00 00
	00		 cmp	 edx, DWORD PTR _g_pProtectList
  00095	75 14		 jne	 SHORT $LN11@AddToProte
; Line 1043
  00097	8b 45 e0	 mov	 eax, DWORD PTR _pProtectFreeGroup$[ebp]
  0009a	a3 00 00 00 00	 mov	 DWORD PTR _g_pProtectList, eax
; Line 1044
  0009f	8b 4d e0	 mov	 ecx, DWORD PTR _pProtectFreeGroup$[ebp]
  000a2	c7 41 10 00 00
	00 00		 mov	 DWORD PTR [ecx+16], 0
; Line 1046
  000a9	eb 18		 jmp	 SHORT $LN10@AddToProte
$LN11@AddToProte:
; Line 1048
  000ab	8b 55 e0	 mov	 edx, DWORD PTR _pProtectFreeGroup$[ebp]
  000ae	8b 45 ec	 mov	 eax, DWORD PTR _pProtectGroup$[ebp]
  000b1	8b 48 10	 mov	 ecx, DWORD PTR [eax+16]
  000b4	89 4a 10	 mov	 DWORD PTR [edx+16], ecx
; Line 1049
  000b7	8b 55 ec	 mov	 edx, DWORD PTR _pProtectGroup$[ebp]
  000ba	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  000bd	8b 4d e0	 mov	 ecx, DWORD PTR _pProtectFreeGroup$[ebp]
  000c0	89 48 0c	 mov	 DWORD PTR [eax+12], ecx
$LN10@AddToProte:
; Line 1051
  000c3	8b 55 e0	 mov	 edx, DWORD PTR _pProtectFreeGroup$[ebp]
  000c6	8b 45 ec	 mov	 eax, DWORD PTR _pProtectGroup$[ebp]
  000c9	89 42 0c	 mov	 DWORD PTR [edx+12], eax
; Line 1052
  000cc	8b 4d ec	 mov	 ecx, DWORD PTR _pProtectGroup$[ebp]
  000cf	8b 55 e0	 mov	 edx, DWORD PTR _pProtectFreeGroup$[ebp]
  000d2	89 51 10	 mov	 DWORD PTR [ecx+16], edx
; Line 1054
  000d5	8b 45 e0	 mov	 eax, DWORD PTR _pProtectFreeGroup$[ebp]
  000d8	8b 4d f8	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  000db	89 08		 mov	 DWORD PTR [eax], ecx
; Line 1055
  000dd	8b 55 e0	 mov	 edx, DWORD PTR _pProtectFreeGroup$[ebp]
  000e0	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwFreeStart
  000e5	89 42 08	 mov	 DWORD PTR [edx+8], eax
; Line 1056
  000e8	8b 4d e0	 mov	 ecx, DWORD PTR _pProtectFreeGroup$[ebp]
  000eb	8b 55 fc	 mov	 edx, DWORD PTR _dwSecs$[ebp]
  000ee	89 51 04	 mov	 DWORD PTR [ecx+4], edx
; Line 1057
  000f1	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwFreeSize
  000f6	3b 45 fc	 cmp	 eax, DWORD PTR _dwSecs$[ebp]
  000f9	77 20		 ja	 SHORT $LN20@AddToProte
  000fb	6a 00		 push	 0
  000fd	68 21 04 00 00	 push	 1057			; 00000421H
  00102	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  00107	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NPDDLGMJ@g_dwFreeSize?5?$DO?5dwSecs?$AA@FNODOBFM@
  0010c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  00112	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR tv87[ebp], 0
  00119	eb 07		 jmp	 SHORT $LN21@AddToProte
$LN20@AddToProte:
  0011b	c7 45 d4 01 00
	00 00		 mov	 DWORD PTR tv87[ebp], 1
$LN21@AddToProte:
; Line 1058
  00122	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_dwFreeStart
  00128	03 4d fc	 add	 ecx, DWORD PTR _dwSecs$[ebp]
  0012b	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwFreeStart, ecx
; Line 1059
  00131	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_dwFreeSize
  00137	2b 55 fc	 sub	 edx, DWORD PTR _dwSecs$[ebp]
  0013a	89 15 00 00 00
	00		 mov	 DWORD PTR _g_dwFreeSize, edx
; Line 1065
  00140	6a 04		 push	 4
  00142	8b 45 10	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00145	50		 push	 eax
  00146	8b 4d fc	 mov	 ecx, DWORD PTR _dwSecs$[ebp]
  00149	51		 push	 ecx
  0014a	8b 55 e0	 mov	 edx, DWORD PTR _pProtectFreeGroup$[ebp]
  0014d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00150	50		 push	 eax
  00151	8b 4d 14	 mov	 ecx, DWORD PTR _pBlkMoverData$[ebp]
  00154	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00157	52		 push	 edx
  00158	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  0015d	89 45 e4	 mov	 DWORD PTR _status$[ebp], eax
; Line 1066
  00160	8b 45 fc	 mov	 eax, DWORD PTR _dwSecs$[ebp]
  00163	c1 e0 09	 shl	 eax, 9
  00166	03 45 10	 add	 eax, DWORD PTR _pvBuffer$[ebp]
  00169	89 45 10	 mov	 DWORD PTR _pvBuffer$[ebp], eax
; Line 1067
  0016c	8b 4d f8	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  0016f	03 4d fc	 add	 ecx, DWORD PTR _dwSecs$[ebp]
  00172	89 4d f8	 mov	 DWORD PTR _dwCurPos$[ebp], ecx
; Line 1068
  00175	8b 55 f8	 mov	 edx, DWORD PTR _dwCurPos$[ebp]
  00178	3b 55 dc	 cmp	 edx, DWORD PTR _dwEndSec$[ebp]
  0017b	75 05		 jne	 SHORT $LN13@AddToProte
  0017d	e9 c4 00 00 00	 jmp	 $LN14@AddToProte
$LN13@AddToProte:
; Line 1072
  00182	8b 45 ec	 mov	 eax, DWORD PTR _pProtectGroup$[ebp]
  00185	8b 4d f8	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  00188	3b 08		 cmp	 ecx, DWORD PTR [eax]
  0018a	0f 82 8c 00 00
	00		 jb	 $LN8@AddToProte
  00190	8b 55 ec	 mov	 edx, DWORD PTR _pProtectGroup$[ebp]
  00193	8b 02		 mov	 eax, DWORD PTR [edx]
  00195	8b 4d ec	 mov	 ecx, DWORD PTR _pProtectGroup$[ebp]
  00198	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  0019b	39 45 f8	 cmp	 DWORD PTR _dwCurPos$[ebp], eax
  0019e	73 7c		 jae	 SHORT $LN8@AddToProte
; Line 1075
  001a0	8b 55 ec	 mov	 edx, DWORD PTR _pProtectGroup$[ebp]
  001a3	8b 02		 mov	 eax, DWORD PTR [edx]
  001a5	8b 4d ec	 mov	 ecx, DWORD PTR _pProtectGroup$[ebp]
  001a8	03 41 04	 add	 eax, DWORD PTR [ecx+4]
  001ab	39 45 dc	 cmp	 DWORD PTR _dwEndSec$[ebp], eax
  001ae	73 08		 jae	 SHORT $LN22@AddToProte
  001b0	8b 55 dc	 mov	 edx, DWORD PTR _dwEndSec$[ebp]
  001b3	89 55 d0	 mov	 DWORD PTR tv143[ebp], edx
  001b6	eb 0e		 jmp	 SHORT $LN23@AddToProte
$LN22@AddToProte:
  001b8	8b 45 ec	 mov	 eax, DWORD PTR _pProtectGroup$[ebp]
  001bb	8b 08		 mov	 ecx, DWORD PTR [eax]
  001bd	8b 55 ec	 mov	 edx, DWORD PTR _pProtectGroup$[ebp]
  001c0	03 4a 04	 add	 ecx, DWORD PTR [edx+4]
  001c3	89 4d d0	 mov	 DWORD PTR tv143[ebp], ecx
$LN23@AddToProte:
  001c6	8b 45 d0	 mov	 eax, DWORD PTR tv143[ebp]
  001c9	89 45 f0	 mov	 DWORD PTR _dwStop$[ebp], eax
; Line 1076
  001cc	8b 4d f0	 mov	 ecx, DWORD PTR _dwStop$[ebp]
  001cf	2b 4d f8	 sub	 ecx, DWORD PTR _dwCurPos$[ebp]
  001d2	89 4d fc	 mov	 DWORD PTR _dwSecs$[ebp], ecx
; Line 1081
  001d5	6a 04		 push	 4
  001d7	8b 55 10	 mov	 edx, DWORD PTR _pvBuffer$[ebp]
  001da	52		 push	 edx
  001db	8b 45 fc	 mov	 eax, DWORD PTR _dwSecs$[ebp]
  001de	50		 push	 eax
  001df	8b 4d ec	 mov	 ecx, DWORD PTR _pProtectGroup$[ebp]
  001e2	8b 55 f8	 mov	 edx, DWORD PTR _dwCurPos$[ebp]
  001e5	2b 11		 sub	 edx, DWORD PTR [ecx]
  001e7	8b 45 ec	 mov	 eax, DWORD PTR _pProtectGroup$[ebp]
  001ea	03 50 08	 add	 edx, DWORD PTR [eax+8]
  001ed	52		 push	 edx
  001ee	8b 4d 14	 mov	 ecx, DWORD PTR _pBlkMoverData$[ebp]
  001f1	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  001f4	52		 push	 edx
  001f5	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  001fa	89 45 e4	 mov	 DWORD PTR _status$[ebp], eax
; Line 1083
  001fd	8b 45 fc	 mov	 eax, DWORD PTR _dwSecs$[ebp]
  00200	c1 e0 09	 shl	 eax, 9
  00203	03 45 10	 add	 eax, DWORD PTR _pvBuffer$[ebp]
  00206	89 45 10	 mov	 DWORD PTR _pvBuffer$[ebp], eax
; Line 1084
  00209	8b 4d f8	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  0020c	03 4d fc	 add	 ecx, DWORD PTR _dwSecs$[ebp]
  0020f	89 4d f8	 mov	 DWORD PTR _dwCurPos$[ebp], ecx
; Line 1085
  00212	8b 55 f8	 mov	 edx, DWORD PTR _dwCurPos$[ebp]
  00215	3b 55 dc	 cmp	 edx, DWORD PTR _dwEndSec$[ebp]
  00218	75 02		 jne	 SHORT $LN8@AddToProte
  0021a	eb 2a		 jmp	 SHORT $LN14@AddToProte
$LN8@AddToProte:
; Line 1087
  0021c	8b 45 f8	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  0021f	3b 45 dc	 cmp	 eax, DWORD PTR _dwEndSec$[ebp]
  00222	75 02		 jne	 SHORT $LN6@AddToProte
  00224	eb 20		 jmp	 SHORT $LN14@AddToProte
$LN6@AddToProte:
; Line 1088
  00226	8b 4d ec	 mov	 ecx, DWORD PTR _pProtectGroup$[ebp]
  00229	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  0022d	74 09		 je	 SHORT $LN5@AddToProte
  0022f	8b 55 ec	 mov	 edx, DWORD PTR _pProtectGroup$[ebp]
  00232	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00235	89 45 f4	 mov	 DWORD PTR _pProtectGroupTail$[ebp], eax
$LN5@AddToProte:
; Line 1089
  00238	8b 4d ec	 mov	 ecx, DWORD PTR _pProtectGroup$[ebp]
  0023b	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0023e	89 55 ec	 mov	 DWORD PTR _pProtectGroup$[ebp], edx
; Line 1090
  00241	e9 ef fd ff ff	 jmp	 $LN15@AddToProte
$LN14@AddToProte:
; Line 1092
  00246	8b 45 f8	 mov	 eax, DWORD PTR _dwCurPos$[ebp]
  00249	3b 45 dc	 cmp	 eax, DWORD PTR _dwEndSec$[ebp]
  0024c	0f 83 e1 00 00
	00		 jae	 $LN4@AddToProte
; Line 1094
  00252	e8 00 00 00 00	 call	 _GetProtectFreeGroup@0
  00257	89 45 e0	 mov	 DWORD PTR _pProtectFreeGroup$[ebp], eax
; Line 1095
  0025a	83 7d e0 00	 cmp	 DWORD PTR _pProtectFreeGroup$[ebp], 0
  0025e	75 08		 jne	 SHORT $LN3@AddToProte
; Line 1096
  00260	8b 45 e4	 mov	 eax, DWORD PTR _status$[ebp]
  00263	e9 ce 00 00 00	 jmp	 $LN16@AddToProte
$LN3@AddToProte:
; Line 1098
  00268	83 7d f4 00	 cmp	 DWORD PTR _pProtectGroupTail$[ebp], 0
  0026c	74 14		 je	 SHORT $LN2@AddToProte
; Line 1100
  0026e	8b 4d f4	 mov	 ecx, DWORD PTR _pProtectGroupTail$[ebp]
  00271	8b 55 e0	 mov	 edx, DWORD PTR _pProtectFreeGroup$[ebp]
  00274	89 51 0c	 mov	 DWORD PTR [ecx+12], edx
; Line 1101
  00277	8b 45 e0	 mov	 eax, DWORD PTR _pProtectFreeGroup$[ebp]
  0027a	8b 4d f4	 mov	 ecx, DWORD PTR _pProtectGroupTail$[ebp]
  0027d	89 48 10	 mov	 DWORD PTR [eax+16], ecx
; Line 1103
  00280	eb 13		 jmp	 SHORT $LN1@AddToProte
$LN2@AddToProte:
; Line 1105
  00282	8b 55 e0	 mov	 edx, DWORD PTR _pProtectFreeGroup$[ebp]
  00285	89 15 00 00 00
	00		 mov	 DWORD PTR _g_pProtectList, edx
; Line 1106
  0028b	8b 45 e0	 mov	 eax, DWORD PTR _pProtectFreeGroup$[ebp]
  0028e	c7 40 10 00 00
	00 00		 mov	 DWORD PTR [eax+16], 0
$LN1@AddToProte:
; Line 1108
  00295	8b 4d e0	 mov	 ecx, DWORD PTR _pProtectFreeGroup$[ebp]
  00298	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
; Line 1110
  0029f	8b 55 dc	 mov	 edx, DWORD PTR _dwEndSec$[ebp]
  002a2	2b 55 f8	 sub	 edx, DWORD PTR _dwCurPos$[ebp]
  002a5	89 55 fc	 mov	 DWORD PTR _dwSecs$[ebp], edx
; Line 1111
  002a8	8b 45 e0	 mov	 eax, DWORD PTR _pProtectFreeGroup$[ebp]
  002ab	8b 4d f8	 mov	 ecx, DWORD PTR _dwCurPos$[ebp]
  002ae	89 08		 mov	 DWORD PTR [eax], ecx
; Line 1112
  002b0	8b 55 e0	 mov	 edx, DWORD PTR _pProtectFreeGroup$[ebp]
  002b3	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwFreeStart
  002b8	89 42 08	 mov	 DWORD PTR [edx+8], eax
; Line 1113
  002bb	8b 4d e0	 mov	 ecx, DWORD PTR _pProtectFreeGroup$[ebp]
  002be	8b 55 fc	 mov	 edx, DWORD PTR _dwSecs$[ebp]
  002c1	89 51 04	 mov	 DWORD PTR [ecx+4], edx
; Line 1114
  002c4	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_dwFreeSize
  002c9	3b 45 0c	 cmp	 eax, DWORD PTR _dwSize$[ebp]
  002cc	77 20		 ja	 SHORT $LN24@AddToProte
  002ce	6a 00		 push	 0
  002d0	68 5a 04 00 00	 push	 1114			; 0000045aH
  002d5	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@CILFNJEL@f?3?2tech?2blkmover?2cur_ver?2sys?2blk@FNODOBFM@
  002da	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JKIKCEFJ@g_dwFreeSize?5?$DO?5dwSize?$AA@FNODOBFM@
  002df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  002e5	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR tv180[ebp], 0
  002ec	eb 07		 jmp	 SHORT $LN25@AddToProte
$LN24@AddToProte:
  002ee	c7 45 cc 01 00
	00 00		 mov	 DWORD PTR tv180[ebp], 1
$LN25@AddToProte:
; Line 1115
  002f5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_dwFreeSize
  002fb	2b 4d fc	 sub	 ecx, DWORD PTR _dwSecs$[ebp]
  002fe	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwFreeSize, ecx
; Line 1116
  00304	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_dwFreeStart
  0030a	03 55 fc	 add	 edx, DWORD PTR _dwSecs$[ebp]
  0030d	89 15 00 00 00
	00		 mov	 DWORD PTR _g_dwFreeStart, edx
; Line 1122
  00313	6a 04		 push	 4
  00315	8b 45 10	 mov	 eax, DWORD PTR _pvBuffer$[ebp]
  00318	50		 push	 eax
  00319	8b 4d fc	 mov	 ecx, DWORD PTR _dwSecs$[ebp]
  0031c	51		 push	 ecx
  0031d	8b 55 e0	 mov	 edx, DWORD PTR _pProtectFreeGroup$[ebp]
  00320	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00323	50		 push	 eax
  00324	8b 4d 14	 mov	 ecx, DWORD PTR _pBlkMoverData$[ebp]
  00327	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0032a	52		 push	 edx
  0032b	e8 00 00 00 00	 call	 _SyncReadWriteSec@20
  00330	89 45 e4	 mov	 DWORD PTR _status$[ebp], eax
$LN4@AddToProte:
; Line 1124
  00333	8b 45 e4	 mov	 eax, DWORD PTR _status$[ebp]
$LN16@AddToProte:
; Line 1125
  00336	8b e5		 mov	 esp, ebp
  00338	5d		 pop	 ebp
  00339	c2 10 00	 ret	 16			; 00000010H
_AddToProtectGroup@16 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _AddToFinalGroup@16
_TEXT	SEGMENT
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_FinalGroup$ = 8					; size = 12
_nCurPos$ = 20						; size = 4
_AddToFinalGroup@16 PROC				; COMDAT
; Line 1128
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 08	 sub	 esp, 8
; Line 1131
  00008	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  0000f	eb 09		 jmp	 SHORT $LN9@AddToFinal
$LN8@AddToFinal:
  00011	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  00014	83 c0 01	 add	 eax, 1
  00017	89 45 fc	 mov	 DWORD PTR _i$[ebp], eax
$LN9@AddToFinal:
  0001a	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0001d	3b 4d 14	 cmp	 ecx, DWORD PTR _nCurPos$[ebp]
  00020	0f 8d 9e 00 00
	00		 jge	 $LN7@AddToFinal
; Line 1133
  00026	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  00029	6b d2 0c	 imul	 edx, 12			; 0000000cH
  0002c	8b 82 00 00 00
	00		 mov	 eax, DWORD PTR _g_FinalGroup[edx]
  00032	3b 45 08	 cmp	 eax, DWORD PTR _FinalGroup$[ebp]
  00035	75 11		 jne	 SHORT $LN6@AddToFinal
; Line 1135
  00037	8b 4d fc	 mov	 ecx, DWORD PTR _i$[ebp]
  0003a	6b c9 0c	 imul	 ecx, 12			; 0000000cH
  0003d	8b 55 10	 mov	 edx, DWORD PTR _FinalGroup$[ebp+8]
  00040	89 91 08 00 00
	00		 mov	 DWORD PTR _g_FinalGroup[ecx+8], edx
; Line 1136
  00046	eb 7c		 jmp	 SHORT $LN7@AddToFinal
$LN6@AddToFinal:
; Line 1138
  00048	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  0004b	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0004e	8b 4d 08	 mov	 ecx, DWORD PTR _FinalGroup$[ebp]
  00051	3b 88 00 00 00
	00		 cmp	 ecx, DWORD PTR _g_FinalGroup[eax]
  00057	73 66		 jae	 SHORT $LN5@AddToFinal
; Line 1140
  00059	8b 55 14	 mov	 edx, DWORD PTR _nCurPos$[ebp]
  0005c	83 ea 01	 sub	 edx, 1
  0005f	89 55 f8	 mov	 DWORD PTR _j$[ebp], edx
  00062	eb 09		 jmp	 SHORT $LN4@AddToFinal
$LN3@AddToFinal:
  00064	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00067	83 e8 01	 sub	 eax, 1
  0006a	89 45 f8	 mov	 DWORD PTR _j$[ebp], eax
$LN4@AddToFinal:
  0006d	8b 4d f8	 mov	 ecx, DWORD PTR _j$[ebp]
  00070	3b 4d fc	 cmp	 ecx, DWORD PTR _i$[ebp]
  00073	7c 2c		 jl	 SHORT $LN2@AddToFinal
; Line 1142
  00075	8b 55 f8	 mov	 edx, DWORD PTR _j$[ebp]
  00078	6b d2 0c	 imul	 edx, 12			; 0000000cH
  0007b	81 c2 00 00 00
	00		 add	 edx, OFFSET _g_FinalGroup
  00081	8b 45 f8	 mov	 eax, DWORD PTR _j$[ebp]
  00084	83 c0 01	 add	 eax, 1
  00087	6b c0 0c	 imul	 eax, 12			; 0000000cH
  0008a	05 00 00 00 00	 add	 eax, OFFSET _g_FinalGroup
  0008f	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00091	89 08		 mov	 DWORD PTR [eax], ecx
  00093	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00096	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00099	8b 52 08	 mov	 edx, DWORD PTR [edx+8]
  0009c	89 50 08	 mov	 DWORD PTR [eax+8], edx
; Line 1143
  0009f	eb c3		 jmp	 SHORT $LN3@AddToFinal
$LN2@AddToFinal:
; Line 1145
  000a1	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000a4	6b c0 0c	 imul	 eax, 12			; 0000000cH
  000a7	05 00 00 00 00	 add	 eax, OFFSET _g_FinalGroup
  000ac	8b 4d 08	 mov	 ecx, DWORD PTR _FinalGroup$[ebp]
  000af	89 08		 mov	 DWORD PTR [eax], ecx
  000b1	8b 55 0c	 mov	 edx, DWORD PTR _FinalGroup$[ebp+4]
  000b4	89 50 04	 mov	 DWORD PTR [eax+4], edx
  000b7	8b 4d 10	 mov	 ecx, DWORD PTR _FinalGroup$[ebp+8]
  000ba	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; Line 1146
  000bd	eb 05		 jmp	 SHORT $LN7@AddToFinal
$LN5@AddToFinal:
; Line 1148
  000bf	e9 4d ff ff ff	 jmp	 $LN8@AddToFinal
$LN7@AddToFinal:
; Line 1149
  000c4	8b 55 fc	 mov	 edx, DWORD PTR _i$[ebp]
  000c7	3b 55 14	 cmp	 edx, DWORD PTR _nCurPos$[ebp]
  000ca	75 1c		 jne	 SHORT $LN1@AddToFinal
; Line 1150
  000cc	8b 45 fc	 mov	 eax, DWORD PTR _i$[ebp]
  000cf	6b c0 0c	 imul	 eax, 12			; 0000000cH
  000d2	05 00 00 00 00	 add	 eax, OFFSET _g_FinalGroup
  000d7	8b 4d 08	 mov	 ecx, DWORD PTR _FinalGroup$[ebp]
  000da	89 08		 mov	 DWORD PTR [eax], ecx
  000dc	8b 55 0c	 mov	 edx, DWORD PTR _FinalGroup$[ebp+4]
  000df	89 50 04	 mov	 DWORD PTR [eax+4], edx
  000e2	8b 4d 10	 mov	 ecx, DWORD PTR _FinalGroup$[ebp+8]
  000e5	89 48 08	 mov	 DWORD PTR [eax+8], ecx
$LN1@AddToFinal:
; Line 1151
  000e8	b8 01 00 00 00	 mov	 eax, 1
; Line 1152
  000ed	8b e5		 mov	 esp, ebp
  000ef	5d		 pop	 ebp
  000f0	c2 10 00	 ret	 16			; 00000010H
_AddToFinalGroup@16 ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _DelFreeSpaceList@0
_TEXT	SEGMENT
_pDelGroup$ = -8					; size = 4
_pCurFree$ = -4						; size = 4
_DelFreeSpaceList@0 PROC				; COMDAT
; Line 1155
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 08	 sub	 esp, 8
; Line 1158
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_FreeSpaceList
  0000d	89 45 fc	 mov	 DWORD PTR _pCurFree$[ebp], eax
$LN2@DelFreeSpa:
; Line 1160
  00010	83 7d fc 00	 cmp	 DWORD PTR _pCurFree$[ebp], 0
  00014	74 1d		 je	 SHORT $LN1@DelFreeSpa
; Line 1162
  00016	8b 4d fc	 mov	 ecx, DWORD PTR _pCurFree$[ebp]
  00019	89 4d f8	 mov	 DWORD PTR _pDelGroup$[ebp], ecx
; Line 1163
  0001c	8b 55 fc	 mov	 edx, DWORD PTR _pCurFree$[ebp]
  0001f	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00022	89 45 fc	 mov	 DWORD PTR _pCurFree$[ebp], eax
; Line 1164
  00025	6a 00		 push	 0
  00027	8b 4d f8	 mov	 ecx, DWORD PTR _pDelGroup$[ebp]
  0002a	51		 push	 ecx
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePoolWithTag@8
; Line 1165
  00031	eb dd		 jmp	 SHORT $LN2@DelFreeSpa
$LN1@DelFreeSpa:
; Line 1166
  00033	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_FreeSpaceList, 0
; Line 1167
  0003d	b8 01 00 00 00	 mov	 eax, 1
; Line 1168
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
_DelFreeSpaceList@0 ENDP
_TEXT	ENDS
PUBLIC	_IsRWToFreeSpace@8
; Function compile flags: /Odtp
;	COMDAT _IsRWToFreeSpace@8
_TEXT	SEGMENT
_pCurFree$ = -4						; size = 4
_dwStart$ = 8						; size = 4
_dwSize$ = 12						; size = 4
_IsRWToFreeSpace@8 PROC					; COMDAT
; Line 1171
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	51		 push	 ecx
; Line 1174
  00006	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_FreeSpaceList
  0000b	89 45 fc	 mov	 DWORD PTR _pCurFree$[ebp], eax
$LN3@IsRWToFree:
; Line 1176
  0000e	83 7d fc 00	 cmp	 DWORD PTR _pCurFree$[ebp], 0
  00012	74 2f		 je	 SHORT $LN2@IsRWToFree
; Line 1178
  00014	8b 4d fc	 mov	 ecx, DWORD PTR _pCurFree$[ebp]
  00017	8b 11		 mov	 edx, DWORD PTR [ecx]
  00019	8b 45 fc	 mov	 eax, DWORD PTR _pCurFree$[ebp]
  0001c	03 50 04	 add	 edx, DWORD PTR [eax+4]
  0001f	39 55 08	 cmp	 DWORD PTR _dwStart$[ebp], edx
  00022	73 14		 jae	 SHORT $LN1@IsRWToFree
  00024	8b 4d 08	 mov	 ecx, DWORD PTR _dwStart$[ebp]
  00027	03 4d 0c	 add	 ecx, DWORD PTR _dwSize$[ebp]
  0002a	8b 55 fc	 mov	 edx, DWORD PTR _pCurFree$[ebp]
  0002d	3b 0a		 cmp	 ecx, DWORD PTR [edx]
  0002f	76 07		 jbe	 SHORT $LN1@IsRWToFree
; Line 1180
  00031	b8 01 00 00 00	 mov	 eax, 1
  00036	eb 0d		 jmp	 SHORT $LN4@IsRWToFree
$LN1@IsRWToFree:
; Line 1182
  00038	8b 45 fc	 mov	 eax, DWORD PTR _pCurFree$[ebp]
  0003b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0003e	89 4d fc	 mov	 DWORD PTR _pCurFree$[ebp], ecx
; Line 1183
  00041	eb cb		 jmp	 SHORT $LN3@IsRWToFree
$LN2@IsRWToFree:
; Line 1184
  00043	33 c0		 xor	 eax, eax
$LN4@IsRWToFree:
; Line 1185
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c2 08 00	 ret	 8
_IsRWToFreeSpace@8 ENDP
_TEXT	ENDS
PUBLIC	_SetFreeSpaceList@8
; Function compile flags: /Odtp
;	COMDAT _SetFreeSpaceList@8
_TEXT	SEGMENT
_pCurFreeGroup$ = -12					; size = 4
_pPrevGroup$ = -8					; size = 4
_pNewGroup$ = -4					; size = 4
_dwStart$ = 8						; size = 4
_dwSize$ = 12						; size = 4
_SetFreeSpaceList@8 PROC				; COMDAT
; Line 1188
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH
; Line 1192
  00008	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_FreeSpaceList
  0000d	89 45 f4	 mov	 DWORD PTR _pCurFreeGroup$[ebp], eax
; Line 1194
  00010	68 44 50 72 66	 push	 1718767684		; 66725044H
  00015	6a 0c		 push	 12			; 0000000cH
  00017	6a 00		 push	 0
  00019	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  0001f	89 45 fc	 mov	 DWORD PTR _pNewGroup$[ebp], eax
; Line 1195
  00022	83 7d fc 00	 cmp	 DWORD PTR _pNewGroup$[ebp], 0
  00026	75 07		 jne	 SHORT $LN9@SetFreeSpa
  00028	33 c0		 xor	 eax, eax
  0002a	e9 a0 00 00 00	 jmp	 $LN10@SetFreeSpa
$LN9@SetFreeSpa:
; Line 1196
  0002f	8b 4d fc	 mov	 ecx, DWORD PTR _pNewGroup$[ebp]
  00032	8b 55 08	 mov	 edx, DWORD PTR _dwStart$[ebp]
  00035	89 11		 mov	 DWORD PTR [ecx], edx
; Line 1197
  00037	8b 45 fc	 mov	 eax, DWORD PTR _pNewGroup$[ebp]
  0003a	8b 4d 0c	 mov	 ecx, DWORD PTR _dwSize$[ebp]
  0003d	89 48 04	 mov	 DWORD PTR [eax+4], ecx
; Line 1198
  00040	8b 55 fc	 mov	 edx, DWORD PTR _pNewGroup$[ebp]
  00043	c7 42 08 00 00
	00 00		 mov	 DWORD PTR [edx+8], 0
; Line 1200
  0004a	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pPrevGroup$[ebp], 0
; Line 1201
  00051	83 7d f4 00	 cmp	 DWORD PTR _pCurFreeGroup$[ebp], 0
  00055	74 6a		 je	 SHORT $LN8@SetFreeSpa
$LN7@SetFreeSpa:
; Line 1203
  00057	83 7d f4 00	 cmp	 DWORD PTR _pCurFreeGroup$[ebp], 0
  0005b	74 62		 je	 SHORT $LN6@SetFreeSpa
; Line 1205
  0005d	8b 45 f4	 mov	 eax, DWORD PTR _pCurFreeGroup$[ebp]
  00060	8b 4d fc	 mov	 ecx, DWORD PTR _pNewGroup$[ebp]
  00063	8b 10		 mov	 edx, DWORD PTR [eax]
  00065	3b 11		 cmp	 edx, DWORD PTR [ecx]
  00067	76 25		 jbe	 SHORT $LN5@SetFreeSpa
; Line 1207
  00069	8b 45 fc	 mov	 eax, DWORD PTR _pNewGroup$[ebp]
  0006c	8b 4d f4	 mov	 ecx, DWORD PTR _pCurFreeGroup$[ebp]
  0006f	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; Line 1208
  00072	83 7d f8 00	 cmp	 DWORD PTR _pPrevGroup$[ebp], 0
  00076	74 0b		 je	 SHORT $LN4@SetFreeSpa
; Line 1210
  00078	8b 55 f8	 mov	 edx, DWORD PTR _pPrevGroup$[ebp]
  0007b	8b 45 fc	 mov	 eax, DWORD PTR _pNewGroup$[ebp]
  0007e	89 42 08	 mov	 DWORD PTR [edx+8], eax
; Line 1212
  00081	eb 09		 jmp	 SHORT $LN3@SetFreeSpa
$LN4@SetFreeSpa:
; Line 1214
  00083	8b 4d fc	 mov	 ecx, DWORD PTR _pNewGroup$[ebp]
  00086	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_FreeSpaceList, ecx
$LN3@SetFreeSpa:
; Line 1216
  0008c	eb 31		 jmp	 SHORT $LN6@SetFreeSpa
$LN5@SetFreeSpa:
; Line 1218
  0008e	8b 55 f4	 mov	 edx, DWORD PTR _pCurFreeGroup$[ebp]
  00091	8b 45 fc	 mov	 eax, DWORD PTR _pNewGroup$[ebp]
  00094	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00096	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00098	73 14		 jae	 SHORT $LN2@SetFreeSpa
  0009a	8b 55 f4	 mov	 edx, DWORD PTR _pCurFreeGroup$[ebp]
  0009d	83 7a 08 00	 cmp	 DWORD PTR [edx+8], 0
  000a1	75 0b		 jne	 SHORT $LN2@SetFreeSpa
; Line 1220
  000a3	8b 45 f4	 mov	 eax, DWORD PTR _pCurFreeGroup$[ebp]
  000a6	8b 4d fc	 mov	 ecx, DWORD PTR _pNewGroup$[ebp]
  000a9	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; Line 1222
  000ac	eb 11		 jmp	 SHORT $LN6@SetFreeSpa
$LN2@SetFreeSpa:
; Line 1224
  000ae	8b 55 f4	 mov	 edx, DWORD PTR _pCurFreeGroup$[ebp]
  000b1	89 55 f8	 mov	 DWORD PTR _pPrevGroup$[ebp], edx
; Line 1225
  000b4	8b 45 f4	 mov	 eax, DWORD PTR _pCurFreeGroup$[ebp]
  000b7	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000ba	89 4d f4	 mov	 DWORD PTR _pCurFreeGroup$[ebp], ecx
; Line 1226
  000bd	eb 98		 jmp	 SHORT $LN7@SetFreeSpa
$LN6@SetFreeSpa:
; Line 1228
  000bf	eb 09		 jmp	 SHORT $LN1@SetFreeSpa
$LN8@SetFreeSpa:
; Line 1230
  000c1	8b 55 fc	 mov	 edx, DWORD PTR _pNewGroup$[ebp]
  000c4	89 15 00 00 00
	00		 mov	 DWORD PTR _g_FreeSpaceList, edx
$LN1@SetFreeSpa:
; Line 1233
  000ca	b8 01 00 00 00	 mov	 eax, 1
$LN10@SetFreeSpa:
; Line 1234
  000cf	8b e5		 mov	 esp, ebp
  000d1	5d		 pop	 ebp
  000d2	c2 08 00	 ret	 8
_SetFreeSpaceList@8 ENDP
_TEXT	ENDS
PUBLIC	_lmul@8
; Function compile flags: /Odtp
;	COMDAT _lmul@8
_TEXT	SEGMENT
_lResult$ = -8						; size = 8
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_lmul@8	PROC						; COMDAT
; Line 1238
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 08	 sub	 esp, 8
; Line 1242
  00008	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
; Line 1243
  0000b	f7 65 0c	 mul	 DWORD PTR _b$[ebp]
; Line 1244
  0000e	89 45 f8	 mov	 DWORD PTR _lResult$[ebp], eax
; Line 1245
  00011	89 55 fc	 mov	 DWORD PTR _lResult$[ebp+4], edx
; Line 1247
  00014	8b 45 f8	 mov	 eax, DWORD PTR _lResult$[ebp]
  00017	8b 55 fc	 mov	 edx, DWORD PTR _lResult$[ebp+4]
; Line 1248
  0001a	8b e5		 mov	 esp, ebp
  0001c	5d		 pop	 ebp
  0001d	c2 08 00	 ret	 8
_lmul@8	ENDP
_TEXT	ENDS
PUBLIC	_ldiv@12
; Function compile flags: /Odtp
;	COMDAT _ldiv@12
_TEXT	SEGMENT
_dwResult$ = -12					; size = 4
_dwHi$ = -8						; size = 4
_dwLo$ = -4						; size = 4
_a$ = 8							; size = 8
_b$ = 16						; size = 4
_ldiv@12 PROC						; COMDAT
; Line 1250
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH
; Line 1252
  00008	8b 45 08	 mov	 eax, DWORD PTR _a$[ebp]
  0000b	89 45 fc	 mov	 DWORD PTR _dwLo$[ebp], eax
; Line 1253
  0000e	8b 4d 0c	 mov	 ecx, DWORD PTR _a$[ebp+4]
  00011	89 4d f8	 mov	 DWORD PTR _dwHi$[ebp], ecx
; Line 1256
  00014	8b 55 f8	 mov	 edx, DWORD PTR _dwHi$[ebp]
; Line 1257
  00017	8b 45 fc	 mov	 eax, DWORD PTR _dwLo$[ebp]
; Line 1258
  0001a	f7 75 10	 div	 DWORD PTR _b$[ebp]
; Line 1259
  0001d	89 45 f4	 mov	 DWORD PTR _dwResult$[ebp], eax
; Line 1261
  00020	8b 45 f4	 mov	 eax, DWORD PTR _dwResult$[ebp]
  00023	33 d2		 xor	 edx, edx
; Line 1262
  00025	8b e5		 mov	 esp, ebp
  00027	5d		 pop	 ebp
  00028	c2 0c 00	 ret	 12			; 0000000cH
_ldiv@12 ENDP
_TEXT	ENDS
END
