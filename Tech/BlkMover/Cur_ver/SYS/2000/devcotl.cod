; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.220 

	TITLE	f:\tech\blkmover\cur_ver\sys\2000\devcotl.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	_DiskPerfRegistryPath:QWORD
_DATA	ENDS
PUBLIC	_IoSetCompletionRoutine@24
PUBLIC	_Blk_Set_Drive_Layout_Completion@12
PUBLIC	??_C@_0BB@FGLFMIJL@FILE_INIT_SECTOR?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	_BlkMovDeviceControl@8
EXTRN	__imp__KeSetEvent@12:PROC
EXTRN	__imp_@ExfInterlockedInsertTailList@12:PROC
EXTRN	_g_bPartitionSet:DWORD
EXTRN	_PostScript@4:PROC
EXTRN	_EnableOrDisable@8:PROC
EXTRN	_ForceReboot@0:PROC
EXTRN	_g_bEnableProtect:DWORD
EXTRN	_SetFreeSpaceList@8:PROC
EXTRN	__imp__KeWaitForSingleObject@20:PROC
EXTRN	__imp_@IofCallDriver@8:PROC
EXTRN	__imp__IoBuildDeviceIoControlRequest@36:PROC
EXTRN	__imp__KeInitializeEvent@12:PROC
EXTRN	_g_partitionInfo:DWORD
EXTRN	_g_pSharkData:DWORD
EXTRN	_SetMoverPara@4:PROC
EXTRN	_g_dwRePointer:DWORD
EXTRN	_g_bReLocate:DWORD
EXTRN	_g_dwMaxSec:DWORD
EXTRN	_g_dwMinSec:DWORD
EXTRN	_RMSetGroup@12:PROC
EXTRN	_g_pDataRegionLRUList:DWORD
EXTRN	_YG_List_Create@8:PROC
EXTRN	_g_dwDataRecNum:DWORD
EXTRN	__imp__MmProbeAndLockPages@12:PROC
EXTRN	__imp__IoAllocateMdl@20:PROC
EXTRN	__imp_@IofCompleteRequest@8:PROC
EXTRN	__imp__ExFreePoolWithTag@8:PROC
EXTRN	_g_dwOrigLast:DWORD
EXTRN	_g_dwOrig1st:DWORD
EXTRN	_g_pMoverData:DWORD
EXTRN	_g_pCompInitBuf:DWORD
EXTRN	__imp__ExAllocatePoolWithTag@12:PROC
EXTRN	_memcpy:PROC
;	COMDAT ??_C@_0BB@FGLFMIJL@FILE_INIT_SECTOR?$AA@FNODOBFM@
; File f:\tech\blkmover\cur_ver\sys\2000\devcotl.c
text$s	SEGMENT
??_C@_0BB@FGLFMIJL@FILE_INIT_SECTOR?$AA@FNODOBFM@ DB 'FILE_INIT_SECTOR', 00H ;  ?? ::FNODOBFM::`string'
; Function compile flags: /Odtp
text$s	ENDS
;	COMDAT _BlkMovDeviceControl@8
_TEXT	SEGMENT
tv67 = -128						; size = 4
_status$ = -84						; size = 4
_event$ = -76						; size = 16
_ioStatusBlock$ = -56					; size = 8
_irp$ = -44						; size = 4
_currentIrpStack$ = -40					; size = 4
_pRegs$ = -36						; size = 4
_deviceExtension$ = -28					; size = 4
_i$ = -16						; size = 4
_pParam$ = -12						; size = 4
_nextIrpStack$ = -8					; size = 4
_DeviceObject$ = 8					; size = 4
_Irp$ = 12						; size = 4
_BlkMovDeviceControl@8 PROC				; COMDAT
; Line 34
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	81 ec 80 00 00
	00		 sub	 esp, 128		; 00000080H
  0000b	56		 push	 esi
  0000c	57		 push	 edi
; Line 37
  0000d	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], 0
; Line 53
  00014	8b 45 08	 mov	 eax, DWORD PTR _DeviceObject$[ebp]
  00017	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  0001a	89 4d e4	 mov	 DWORD PTR _deviceExtension$[ebp], ecx
; Line 54
  0001d	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  00020	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00023	89 45 d8	 mov	 DWORD PTR _currentIrpStack$[ebp], eax
; Line 56
  00026	8b 4d d8	 mov	 ecx, DWORD PTR _currentIrpStack$[ebp]
  00029	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0002c	89 55 80	 mov	 DWORD PTR tv67[ebp], edx
  0002f	81 7d 80 0c 40
	07 00		 cmp	 DWORD PTR tv67[ebp], 475148 ; 0007400cH
  00036	77 33		 ja	 SHORT $LN55@BlkMovDevi
  00038	81 7d 80 0c 40
	07 00		 cmp	 DWORD PTR tv67[ebp], 475148 ; 0007400cH
  0003f	0f 84 8c 06 00
	00		 je	 $LN8@BlkMovDevi
  00045	8b 45 80	 mov	 eax, DWORD PTR tv67[ebp]
  00048	2d 00 20 07 00	 sub	 eax, 466944		; 00072000H
  0004d	89 45 80	 mov	 DWORD PTR tv67[ebp], eax
  00050	83 7d 80 54	 cmp	 DWORD PTR tv67[ebp], 84	; 00000054H
  00054	0f 87 62 07 00
	00		 ja	 $LN51@BlkMovDevi
  0005a	8b 4d 80	 mov	 ecx, DWORD PTR tv67[ebp]
  0005d	0f b6 91 00 00
	00 00		 movzx	 edx, BYTE PTR $LN56@BlkMovDevi[ecx]
  00064	ff 24 95 00 00
	00 00		 jmp	 DWORD PTR $LN57@BlkMovDevi[edx*4]
$LN55@BlkMovDevi:
  0006b	81 7d 80 10 c0
	07 00		 cmp	 DWORD PTR tv67[ebp], 507920 ; 0007c010H
  00072	0f 84 f8 06 00
	00		 je	 $LN5@BlkMovDevi
  00078	e9 3f 07 00 00	 jmp	 $LN51@BlkMovDevi
$LN50@BlkMovDevi:
; Line 59
  0007d	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  00080	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00083	89 4d dc	 mov	 DWORD PTR _pRegs$[ebp], ecx
; Line 61
  00086	8b 55 dc	 mov	 edx, DWORD PTR _pRegs$[ebp]
  00089	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  0008d	0f 84 98 00 00
	00		 je	 $LN49@BlkMovDevi
; Line 63
  00093	68 44 50 72 66	 push	 1718767684		; 66725044H
  00098	68 00 02 00 00	 push	 512			; 00000200H
  0009d	6a 00		 push	 0
  0009f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  000a5	a3 00 00 00 00	 mov	 DWORD PTR _g_pCompInitBuf, eax
; Line 65
  000aa	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pCompInitBuf, 0
  000b1	74 49		 je	 SHORT $LN48@BlkMovDevi
; Line 67
  000b3	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _i$[ebp], 0
  000ba	eb 09		 jmp	 SHORT $LN47@BlkMovDevi
$LN46@BlkMovDevi:
  000bc	8b 45 f0	 mov	 eax, DWORD PTR _i$[ebp]
  000bf	83 c0 10	 add	 eax, 16			; 00000010H
  000c2	89 45 f0	 mov	 DWORD PTR _i$[ebp], eax
$LN47@BlkMovDevi:
  000c5	81 7d f0 00 02
	00 00		 cmp	 DWORD PTR _i$[ebp], 512	; 00000200H
  000cc	7d 2c		 jge	 SHORT $LN45@BlkMovDevi
; Line 69
  000ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pCompInitBuf
  000d4	03 4d f0	 add	 ecx, DWORD PTR _i$[ebp]
  000d7	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0BB@FGLFMIJL@FILE_INIT_SECTOR?$AA@FNODOBFM@
  000dd	89 11		 mov	 DWORD PTR [ecx], edx
  000df	a1 04 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BB@FGLFMIJL@FILE_INIT_SECTOR?$AA@FNODOBFM@+4
  000e4	89 41 04	 mov	 DWORD PTR [ecx+4], eax
  000e7	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ??_C@_0BB@FGLFMIJL@FILE_INIT_SECTOR?$AA@FNODOBFM@+8
  000ed	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  000f0	a1 0c 00 00 00	 mov	 eax, DWORD PTR ??_C@_0BB@FGLFMIJL@FILE_INIT_SECTOR?$AA@FNODOBFM@+12
  000f5	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; Line 70
  000f8	eb c2		 jmp	 SHORT $LN46@BlkMovDevi
$LN45@BlkMovDevi:
; Line 72
  000fa	eb 0a		 jmp	 SHORT $LN44@BlkMovDevi
$LN48@BlkMovDevi:
; Line 73
  000fc	8b 4d dc	 mov	 ecx, DWORD PTR _pRegs$[ebp]
  000ff	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$LN44@BlkMovDevi:
; Line 74
  00106	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_pMoverData
  0010c	c7 42 04 01 00
	00 00		 mov	 DWORD PTR [edx+4], 1
; Line 76
  00113	8b 45 dc	 mov	 eax, DWORD PTR _pRegs$[ebp]
  00116	8b 08		 mov	 ecx, DWORD PTR [eax]
  00118	89 0d 00 00 00
	00		 mov	 DWORD PTR _g_dwOrig1st, ecx
; Line 77
  0011e	8b 55 dc	 mov	 edx, DWORD PTR _pRegs$[ebp]
  00121	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00124	a3 00 00 00 00	 mov	 DWORD PTR _g_dwOrigLast, eax
; Line 79
  00129	eb 26		 jmp	 SHORT $LN43@BlkMovDevi
$LN49@BlkMovDevi:
; Line 81
  0012b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pMoverData
  00131	c7 41 04 00 00
	00 00		 mov	 DWORD PTR [ecx+4], 0
; Line 82
  00138	6a 00		 push	 0
  0013a	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_pCompInitBuf
  00140	52		 push	 edx
  00141	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExFreePoolWithTag@8
; Line 83
  00147	8b 45 dc	 mov	 eax, DWORD PTR _pRegs$[ebp]
  0014a	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [eax+12], 1
$LN43@BlkMovDevi:
; Line 86
  00151	83 7d ac 00	 cmp	 DWORD PTR _status$[ebp], 0
  00155	74 0a		 je	 SHORT $LN42@BlkMovDevi
  00157	8b 4d dc	 mov	 ecx, DWORD PTR _pRegs$[ebp]
  0015a	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$LN42@BlkMovDevi:
; Line 88
  00161	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  00164	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  00167	89 42 18	 mov	 DWORD PTR [edx+24], eax
; Line 89
  0016a	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  0016d	c7 41 1c 1c 00
	00 00		 mov	 DWORD PTR [ecx+28], 28	; 0000001cH
; Line 90
  00174	32 d2		 xor	 dl, dl
  00176	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00179	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
; Line 92
  0017f	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  00182	e9 b1 06 00 00	 jmp	 $LN53@BlkMovDevi
$LN41@BlkMovDevi:
; Line 95
  00187	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  0018a	c7 42 18 00 00
	00 00		 mov	 DWORD PTR [edx+24], 0
; Line 96
  00191	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  00194	c7 40 1c 04 00
	00 00		 mov	 DWORD PTR [eax+28], 4
; Line 97
  0019b	32 d2		 xor	 dl, dl
  0019d	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  001a0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
; Line 99
  001a6	33 c0		 xor	 eax, eax
  001a8	e9 8b 06 00 00	 jmp	 $LN53@BlkMovDevi
$LN40@BlkMovDevi:
; Line 106
  001ad	c7 45 ac 03 01
	00 00		 mov	 DWORD PTR _status$[ebp], 259 ; 00000103H
; Line 107
  001b4	e9 03 06 00 00	 jmp	 $LN51@BlkMovDevi
$LN39@BlkMovDevi:
; Line 112
  001b9	6a 00		 push	 0
  001bb	6a 00		 push	 0
  001bd	6a 00		 push	 0
  001bf	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  001c2	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001c5	8b 42 04	 mov	 eax, DWORD PTR [edx+4]
  001c8	c1 e0 09	 shl	 eax, 9
  001cb	50		 push	 eax
  001cc	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  001cf	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  001d2	8b 42 10	 mov	 eax, DWORD PTR [edx+16]
  001d5	50		 push	 eax
  001d6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoAllocateMdl@20
  001dc	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  001df	89 41 04	 mov	 DWORD PTR [ecx+4], eax
; Line 113
  001e2	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  001e5	83 7a 04 00	 cmp	 DWORD PTR [edx+4], 0
  001e9	75 30		 jne	 SHORT $LN38@BlkMovDevi
; Line 115
  001eb	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  001ee	c7 40 18 9a 00
	00 c0		 mov	 DWORD PTR [eax+24], -1073741670 ; c000009aH
; Line 116
  001f5	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  001f8	c7 41 1c 00 00
	00 00		 mov	 DWORD PTR [ecx+28], 0
; Line 117
  001ff	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  00202	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  00205	89 45 ac	 mov	 DWORD PTR _status$[ebp], eax
; Line 118
  00208	32 d2		 xor	 dl, dl
  0020a	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  0020d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
; Line 119
  00213	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  00216	e9 1d 06 00 00	 jmp	 $LN53@BlkMovDevi
$LN38@BlkMovDevi:
; Line 121
  0021b	6a 01		 push	 1
  0021d	6a 00		 push	 0
  0021f	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00222	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00225	52		 push	 edx
  00226	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__MmProbeAndLockPages@12
; Line 123
  0022c	c7 45 ac 03 01
	00 00		 mov	 DWORD PTR _status$[ebp], 259 ; 00000103H
; Line 124
  00233	e9 84 05 00 00	 jmp	 $LN51@BlkMovDevi
$LN37@BlkMovDevi:
; Line 127
  00238	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  0023b	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  0023e	89 4d dc	 mov	 DWORD PTR _pRegs$[ebp], ecx
; Line 129
  00241	8b 55 dc	 mov	 edx, DWORD PTR _pRegs$[ebp]
  00244	83 7a 0c 00	 cmp	 DWORD PTR [edx+12], 0
  00248	74 21		 je	 SHORT $LN36@BlkMovDevi
; Line 131
  0024a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_dwDataRecNum, 0
; Line 132
  00254	8b 45 e4	 mov	 eax, DWORD PTR _deviceExtension$[ebp]
  00257	c6 40 08 01	 mov	 BYTE PTR [eax+8], 1
; Line 133
  0025b	6a 18		 push	 24			; 00000018H
  0025d	6a 00		 push	 0
  0025f	e8 00 00 00 00	 call	 _YG_List_Create@8
  00264	a3 00 00 00 00	 mov	 DWORD PTR _g_pDataRegionLRUList, eax
; Line 135
  00269	eb 11		 jmp	 SHORT $LN35@BlkMovDevi
$LN36@BlkMovDevi:
; Line 137
  0026b	8b 4d e4	 mov	 ecx, DWORD PTR _deviceExtension$[ebp]
  0026e	c6 41 08 00	 mov	 BYTE PTR [ecx+8], 0
; Line 138
  00272	8b 55 dc	 mov	 edx, DWORD PTR _pRegs$[ebp]
  00275	c7 42 0c 01 00
	00 00		 mov	 DWORD PTR [edx+12], 1
$LN35@BlkMovDevi:
; Line 141
  0027c	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  0027f	8b 4d ac	 mov	 ecx, DWORD PTR _status$[ebp]
  00282	89 48 18	 mov	 DWORD PTR [eax+24], ecx
; Line 142
  00285	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  00288	c7 42 1c 1c 00
	00 00		 mov	 DWORD PTR [edx+28], 28	; 0000001cH
; Line 143
  0028f	32 d2		 xor	 dl, dl
  00291	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00294	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
; Line 145
  0029a	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  0029d	e9 96 05 00 00	 jmp	 $LN53@BlkMovDevi
$LN34@BlkMovDevi:
; Line 148
  002a2	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  002a5	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  002a8	89 4d dc	 mov	 DWORD PTR _pRegs$[ebp], ecx
; Line 150
  002ab	8b 55 08	 mov	 edx, DWORD PTR _DeviceObject$[ebp]
  002ae	52		 push	 edx
  002af	8b 45 dc	 mov	 eax, DWORD PTR _pRegs$[ebp]
  002b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b4	51		 push	 ecx
  002b5	8b 55 dc	 mov	 edx, DWORD PTR _pRegs$[ebp]
  002b8	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  002bb	50		 push	 eax
  002bc	e8 00 00 00 00	 call	 _RMSetGroup@12
  002c1	8b 4d dc	 mov	 ecx, DWORD PTR _pRegs$[ebp]
  002c4	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; Line 152
  002c7	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  002ca	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  002cd	89 42 18	 mov	 DWORD PTR [edx+24], eax
; Line 153
  002d0	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  002d3	c7 41 1c 1c 00
	00 00		 mov	 DWORD PTR [ecx+28], 28	; 0000001cH
; Line 154
  002da	32 d2		 xor	 dl, dl
  002dc	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  002df	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
; Line 156
  002e5	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  002e8	e9 4b 05 00 00	 jmp	 $LN53@BlkMovDevi
$LN33@BlkMovDevi:
; Line 159
  002ed	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  002f0	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  002f3	89 45 dc	 mov	 DWORD PTR _pRegs$[ebp], eax
; Line 161
  002f6	8b 4d dc	 mov	 ecx, DWORD PTR _pRegs$[ebp]
  002f9	83 79 0c 00	 cmp	 DWORD PTR [ecx+12], 0
  002fd	74 2c		 je	 SHORT $LN32@BlkMovDevi
; Line 163
  002ff	8b 55 dc	 mov	 edx, DWORD PTR _pRegs$[ebp]
  00302	8b 02		 mov	 eax, DWORD PTR [edx]
  00304	a3 00 00 00 00	 mov	 DWORD PTR _g_dwMinSec, eax
; Line 164
  00309	8b 4d dc	 mov	 ecx, DWORD PTR _pRegs$[ebp]
  0030c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0030f	89 15 00 00 00
	00		 mov	 DWORD PTR _g_dwMaxSec, edx
; Line 165
  00315	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _g_bReLocate, 1
; Line 166
  0031f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_dwRePointer, 0
; Line 168
  00329	eb 1e		 jmp	 SHORT $LN31@BlkMovDevi
$LN32@BlkMovDevi:
; Line 170
  0032b	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_bReLocate, 0
; Line 171
  00335	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_dwMinSec, 0
; Line 172
  0033f	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _g_dwMaxSec, 0
$LN31@BlkMovDevi:
; Line 175
  00349	8b 45 dc	 mov	 eax, DWORD PTR _pRegs$[ebp]
  0034c	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [eax+12], 1
; Line 177
  00353	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00356	8b 55 ac	 mov	 edx, DWORD PTR _status$[ebp]
  00359	89 51 18	 mov	 DWORD PTR [ecx+24], edx
; Line 178
  0035c	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  0035f	c7 40 1c 1c 00
	00 00		 mov	 DWORD PTR [eax+28], 28	; 0000001cH
; Line 179
  00366	32 d2		 xor	 dl, dl
  00368	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  0036b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
; Line 181
  00371	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  00374	e9 bf 04 00 00	 jmp	 $LN53@BlkMovDevi
$LN30@BlkMovDevi:
; Line 184
  00379	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  0037c	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0037f	89 55 dc	 mov	 DWORD PTR _pRegs$[ebp], edx
; Line 185
  00382	8b 45 dc	 mov	 eax, DWORD PTR _pRegs$[ebp]
  00385	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00388	89 4d f4	 mov	 DWORD PTR _pParam$[ebp], ecx
; Line 187
  0038b	8b 55 f4	 mov	 edx, DWORD PTR _pParam$[ebp]
  0038e	52		 push	 edx
  0038f	e8 00 00 00 00	 call	 _SetMoverPara@4
  00394	89 45 ac	 mov	 DWORD PTR _status$[ebp], eax
; Line 188
  00397	83 7d ac 00	 cmp	 DWORD PTR _status$[ebp], 0
  0039b	75 0c		 jne	 SHORT $LN29@BlkMovDevi
; Line 190
  0039d	8b 45 dc	 mov	 eax, DWORD PTR _pRegs$[ebp]
  003a0	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [eax+12], 1
; Line 192
  003a7	eb 0a		 jmp	 SHORT $LN28@BlkMovDevi
$LN29@BlkMovDevi:
; Line 193
  003a9	8b 4d dc	 mov	 ecx, DWORD PTR _pRegs$[ebp]
  003ac	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$LN28@BlkMovDevi:
; Line 195
  003b3	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  003b6	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  003b9	89 42 18	 mov	 DWORD PTR [edx+24], eax
; Line 196
  003bc	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  003bf	c7 41 1c 1c 00
	00 00		 mov	 DWORD PTR [ecx+28], 28	; 0000001cH
; Line 197
  003c6	32 d2		 xor	 dl, dl
  003c8	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  003cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
; Line 199
  003d1	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  003d4	e9 5f 04 00 00	 jmp	 $LN53@BlkMovDevi
$LN27@BlkMovDevi:
; Line 201
  003d9	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  003dc	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  003df	89 45 dc	 mov	 DWORD PTR _pRegs$[ebp], eax
; Line 202
  003e2	8b 4d dc	 mov	 ecx, DWORD PTR _pRegs$[ebp]
  003e5	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  003e8	89 55 f4	 mov	 DWORD PTR _pParam$[ebp], edx
; Line 204
  003eb	a1 00 00 00 00	 mov	 eax, DWORD PTR _g_pSharkData
  003f0	8b 4d 08	 mov	 ecx, DWORD PTR _DeviceObject$[ebp]
  003f3	89 48 08	 mov	 DWORD PTR [eax+8], ecx
; Line 206
  003f6	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_pMoverData
  003fc	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  003ff	8b 48 28	 mov	 ecx, DWORD PTR [eax+40]
  00402	89 4d e4	 mov	 DWORD PTR _deviceExtension$[ebp], ecx
; Line 210
  00405	68 44 50 72 66	 push	 1718767684		; 66725044H
  0040a	68 04 10 00 00	 push	 4100			; 00001004H
  0040f	6a 00		 push	 0
  00411	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ExAllocatePoolWithTag@12
  00417	a3 00 00 00 00	 mov	 DWORD PTR _g_partitionInfo, eax
; Line 211
  0041c	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_partitionInfo, 0
  00423	0f 84 a0 00 00
	00		 je	 $LN26@BlkMovDevi
; Line 215
  00429	6a 00		 push	 0
  0042b	6a 00		 push	 0
  0042d	8d 55 b4	 lea	 edx, DWORD PTR _event$[ebp]
  00430	52		 push	 edx
  00431	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeInitializeEvent@12
; Line 228
  00437	8d 45 c8	 lea	 eax, DWORD PTR _ioStatusBlock$[ebp]
  0043a	50		 push	 eax
  0043b	8d 4d b4	 lea	 ecx, DWORD PTR _event$[ebp]
  0043e	51		 push	 ecx
  0043f	6a 00		 push	 0
  00441	68 04 10 00 00	 push	 4100			; 00001004H
  00446	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_partitionInfo
  0044c	52		 push	 edx
  0044d	6a 00		 push	 0
  0044f	6a 00		 push	 0
  00451	8b 45 e4	 mov	 eax, DWORD PTR _deviceExtension$[ebp]
  00454	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00457	51		 push	 ecx
  00458	68 0c 40 07 00	 push	 475148			; 0007400cH
  0045d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__IoBuildDeviceIoControlRequest@36
  00463	89 45 d4	 mov	 DWORD PTR _irp$[ebp], eax
; Line 229
  00466	83 7d d4 00	 cmp	 DWORD PTR _irp$[ebp], 0
  0046a	74 51		 je	 SHORT $LN25@BlkMovDevi
; Line 236
  0046c	8b 55 d4	 mov	 edx, DWORD PTR _irp$[ebp]
  0046f	8b 45 e4	 mov	 eax, DWORD PTR _deviceExtension$[ebp]
  00472	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00475	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCallDriver@8
  0047b	89 45 ac	 mov	 DWORD PTR _status$[ebp], eax
; Line 238
  0047e	81 7d ac 03 01
	00 00		 cmp	 DWORD PTR _status$[ebp], 259 ; 00000103H
  00485	75 18		 jne	 SHORT $LN24@BlkMovDevi
; Line 244
  00487	6a 00		 push	 0
  00489	6a 00		 push	 0
  0048b	6a 00		 push	 0
  0048d	6a 05		 push	 5
  0048f	8d 4d b4	 lea	 ecx, DWORD PTR _event$[ebp]
  00492	51		 push	 ecx
  00493	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeWaitForSingleObject@20
; Line 246
  00499	8b 55 c8	 mov	 edx, DWORD PTR _ioStatusBlock$[ebp]
  0049c	89 55 ac	 mov	 DWORD PTR _status$[ebp], edx
$LN24@BlkMovDevi:
; Line 248
  0049f	83 7d ac 00	 cmp	 DWORD PTR _status$[ebp], 0
  004a3	7c 0c		 jl	 SHORT $LN23@BlkMovDevi
; Line 249
  004a5	8b 45 dc	 mov	 eax, DWORD PTR _pRegs$[ebp]
  004a8	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [eax+12], 1
; Line 250
  004af	eb 0a		 jmp	 SHORT $LN22@BlkMovDevi
$LN23@BlkMovDevi:
; Line 252
  004b1	8b 4d dc	 mov	 ecx, DWORD PTR _pRegs$[ebp]
  004b4	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$LN22@BlkMovDevi:
; Line 255
  004bb	eb 0a		 jmp	 SHORT $LN21@BlkMovDevi
$LN25@BlkMovDevi:
; Line 257
  004bd	8b 55 dc	 mov	 edx, DWORD PTR _pRegs$[ebp]
  004c0	c7 42 0c 00 00
	00 00		 mov	 DWORD PTR [edx+12], 0
$LN21@BlkMovDevi:
; Line 260
  004c7	eb 0a		 jmp	 SHORT $LN20@BlkMovDevi
$LN26@BlkMovDevi:
; Line 261
  004c9	8b 45 dc	 mov	 eax, DWORD PTR _pRegs$[ebp]
  004cc	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
$LN20@BlkMovDevi:
; Line 263
  004d3	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  004d6	8b 55 ac	 mov	 edx, DWORD PTR _status$[ebp]
  004d9	89 51 18	 mov	 DWORD PTR [ecx+24], edx
; Line 264
  004dc	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  004df	c7 40 1c 1c 00
	00 00		 mov	 DWORD PTR [eax+28], 28	; 0000001cH
; Line 265
  004e6	32 d2		 xor	 dl, dl
  004e8	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  004eb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
; Line 267
  004f1	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  004f4	e9 3f 03 00 00	 jmp	 $LN53@BlkMovDevi
$LN19@BlkMovDevi:
; Line 269
  004f9	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  004fc	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  004ff	89 55 dc	 mov	 DWORD PTR _pRegs$[ebp], edx
; Line 271
  00502	8b 45 dc	 mov	 eax, DWORD PTR _pRegs$[ebp]
  00505	8b 08		 mov	 ecx, DWORD PTR [eax]
  00507	51		 push	 ecx
  00508	8b 55 dc	 mov	 edx, DWORD PTR _pRegs$[ebp]
  0050b	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0050e	50		 push	 eax
  0050f	e8 00 00 00 00	 call	 _SetFreeSpaceList@8
  00514	8b 4d dc	 mov	 ecx, DWORD PTR _pRegs$[ebp]
  00517	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
; Line 273
  0051a	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  0051d	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  00520	89 42 18	 mov	 DWORD PTR [edx+24], eax
; Line 274
  00523	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00526	c7 41 1c 1c 00
	00 00		 mov	 DWORD PTR [ecx+28], 28	; 0000001cH
; Line 275
  0052d	32 d2		 xor	 dl, dl
  0052f	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00532	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
; Line 277
  00538	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  0053b	e9 f8 02 00 00	 jmp	 $LN53@BlkMovDevi
$LN18@BlkMovDevi:
; Line 279
  00540	c7 45 ac 03 01
	00 00		 mov	 DWORD PTR _status$[ebp], 259 ; 00000103H
; Line 280
  00547	e9 70 02 00 00	 jmp	 $LN51@BlkMovDevi
$LN17@BlkMovDevi:
; Line 282
  0054c	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  0054f	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00552	89 45 dc	 mov	 DWORD PTR _pRegs$[ebp], eax
; Line 284
  00555	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _g_bEnableProtect, 1
; Line 285
  0055f	8b 4d dc	 mov	 ecx, DWORD PTR _pRegs$[ebp]
  00562	c7 41 0c 01 00
	00 00		 mov	 DWORD PTR [ecx+12], 1
; Line 286
  00569	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  0056c	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  0056f	89 42 18	 mov	 DWORD PTR [edx+24], eax
; Line 287
  00572	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00575	c7 41 1c 1c 00
	00 00		 mov	 DWORD PTR [ecx+28], 28	; 0000001cH
; Line 288
  0057c	32 d2		 xor	 dl, dl
  0057e	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00581	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
; Line 289
  00587	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  0058a	e9 a9 02 00 00	 jmp	 $LN53@BlkMovDevi
$LN16@BlkMovDevi:
; Line 291
  0058f	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  00592	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  00595	89 45 dc	 mov	 DWORD PTR _pRegs$[ebp], eax
; Line 292
  00598	e8 00 00 00 00	 call	 _ForceReboot@0
; Line 294
  0059d	8b 4d dc	 mov	 ecx, DWORD PTR _pRegs$[ebp]
  005a0	c7 41 0c 01 00
	00 00		 mov	 DWORD PTR [ecx+12], 1
; Line 295
  005a7	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  005aa	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  005ad	89 42 18	 mov	 DWORD PTR [edx+24], eax
; Line 296
  005b0	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  005b3	c7 41 1c 1c 00
	00 00		 mov	 DWORD PTR [ecx+28], 28	; 0000001cH
; Line 297
  005ba	32 d2		 xor	 dl, dl
  005bc	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  005bf	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
; Line 298
  005c5	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  005c8	e9 6b 02 00 00	 jmp	 $LN53@BlkMovDevi
$LN15@BlkMovDevi:
; Line 301
  005cd	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  005d0	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  005d3	89 45 dc	 mov	 DWORD PTR _pRegs$[ebp], eax
; Line 302
  005d6	8b 4d dc	 mov	 ecx, DWORD PTR _pRegs$[ebp]
  005d9	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  005dc	89 55 f4	 mov	 DWORD PTR _pParam$[ebp], edx
; Line 304
  005df	8b 45 08	 mov	 eax, DWORD PTR _DeviceObject$[ebp]
  005e2	50		 push	 eax
  005e3	8b 4d dc	 mov	 ecx, DWORD PTR _pRegs$[ebp]
  005e6	8a 51 0c	 mov	 dl, BYTE PTR [ecx+12]
  005e9	52		 push	 edx
  005ea	e8 00 00 00 00	 call	 _EnableOrDisable@8
  005ef	89 45 ac	 mov	 DWORD PTR _status$[ebp], eax
; Line 305
  005f2	83 7d ac 00	 cmp	 DWORD PTR _status$[ebp], 0
  005f6	75 0c		 jne	 SHORT $LN14@BlkMovDevi
; Line 307
  005f8	8b 45 dc	 mov	 eax, DWORD PTR _pRegs$[ebp]
  005fb	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [eax+12], 1
; Line 309
  00602	eb 0a		 jmp	 SHORT $LN13@BlkMovDevi
$LN14@BlkMovDevi:
; Line 311
  00604	8b 4d dc	 mov	 ecx, DWORD PTR _pRegs$[ebp]
  00607	c7 41 0c 00 00
	00 00		 mov	 DWORD PTR [ecx+12], 0
$LN13@BlkMovDevi:
; Line 314
  0060e	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  00611	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  00614	89 42 18	 mov	 DWORD PTR [edx+24], eax
; Line 315
  00617	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  0061a	c7 41 1c 1c 00
	00 00		 mov	 DWORD PTR [ecx+28], 28	; 0000001cH
; Line 316
  00621	32 d2		 xor	 dl, dl
  00623	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00626	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
; Line 317
  0062c	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  0062f	e9 04 02 00 00	 jmp	 $LN53@BlkMovDevi
$LN12@BlkMovDevi:
; Line 320
  00634	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  00637	8b 42 0c	 mov	 eax, DWORD PTR [edx+12]
  0063a	89 45 dc	 mov	 DWORD PTR _pRegs$[ebp], eax
; Line 321
  0063d	8b 4d dc	 mov	 ecx, DWORD PTR _pRegs$[ebp]
  00640	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  00643	89 55 f4	 mov	 DWORD PTR _pParam$[ebp], edx
; Line 323
  00646	8b 45 dc	 mov	 eax, DWORD PTR _pRegs$[ebp]
  00649	c7 40 0c 01 00
	00 00		 mov	 DWORD PTR [eax+12], 1
; Line 325
  00650	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00653	8b 55 ac	 mov	 edx, DWORD PTR _status$[ebp]
  00656	89 51 18	 mov	 DWORD PTR [ecx+24], edx
; Line 326
  00659	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  0065c	c7 40 1c 1c 00
	00 00		 mov	 DWORD PTR [eax+28], 28	; 0000001cH
; Line 327
  00663	32 d2		 xor	 dl, dl
  00665	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00668	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
; Line 328
  0066e	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  00671	e9 c2 01 00 00	 jmp	 $LN53@BlkMovDevi
$LN11@BlkMovDevi:
; Line 331
  00676	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00679	8b 51 0c	 mov	 edx, DWORD PTR [ecx+12]
  0067c	89 55 dc	 mov	 DWORD PTR _pRegs$[ebp], edx
; Line 333
  0067f	8b 45 dc	 mov	 eax, DWORD PTR _pRegs$[ebp]
  00682	0f b6 48 0c	 movzx	 ecx, BYTE PTR [eax+12]
  00686	51		 push	 ecx
  00687	e8 00 00 00 00	 call	 _PostScript@4
  0068c	89 45 ac	 mov	 DWORD PTR _status$[ebp], eax
; Line 334
  0068f	83 7d ac 00	 cmp	 DWORD PTR _status$[ebp], 0
  00693	75 0c		 jne	 SHORT $LN10@BlkMovDevi
; Line 335
  00695	8b 55 dc	 mov	 edx, DWORD PTR _pRegs$[ebp]
  00698	c7 42 0c 01 00
	00 00		 mov	 DWORD PTR [edx+12], 1
; Line 336
  0069f	eb 0a		 jmp	 SHORT $LN9@BlkMovDevi
$LN10@BlkMovDevi:
; Line 337
  006a1	8b 45 dc	 mov	 eax, DWORD PTR _pRegs$[ebp]
  006a4	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], 0
$LN9@BlkMovDevi:
; Line 338
  006ab	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  006ae	8b 55 ac	 mov	 edx, DWORD PTR _status$[ebp]
  006b1	89 51 18	 mov	 DWORD PTR [ecx+24], edx
; Line 339
  006b4	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  006b7	c7 40 1c 1c 00
	00 00		 mov	 DWORD PTR [eax+28], 28	; 0000001cH
; Line 340
  006be	32 d2		 xor	 dl, dl
  006c0	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  006c3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
; Line 341
  006c9	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  006cc	e9 67 01 00 00	 jmp	 $LN53@BlkMovDevi
$LN8@BlkMovDevi:
; Line 343
  006d1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_pMoverData, 0
  006d8	74 65		 je	 SHORT $LN7@BlkMovDevi
; Line 345
  006da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _g_pMoverData
  006e0	83 39 00	 cmp	 DWORD PTR [ecx], 0
  006e3	74 5a		 je	 SHORT $LN7@BlkMovDevi
  006e5	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_partitionInfo, 0
  006ec	74 51		 je	 SHORT $LN7@BlkMovDevi
  006ee	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_bPartitionSet, 0
  006f5	75 48		 jne	 SHORT $LN7@BlkMovDevi
; Line 347
  006f7	68 04 10 00 00	 push	 4100			; 00001004H
  006fc	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _g_partitionInfo
  00702	52		 push	 edx
  00703	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  00706	8b 48 0c	 mov	 ecx, DWORD PTR [eax+12]
  00709	51		 push	 ecx
  0070a	e8 00 00 00 00	 call	 _memcpy
  0070f	83 c4 0c	 add	 esp, 12			; 0000000cH
; Line 349
  00712	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _status$[ebp], 0
; Line 351
  00719	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  0071c	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  0071f	89 42 18	 mov	 DWORD PTR [edx+24], eax
; Line 352
  00722	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00725	c7 41 1c 04 10
	00 00		 mov	 DWORD PTR [ecx+28], 4100 ; 00001004H
; Line 353
  0072c	32 d2		 xor	 dl, dl
  0072e	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00731	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCompleteRequest@8
; Line 354
  00737	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  0073a	e9 f9 00 00 00	 jmp	 $LN53@BlkMovDevi
$LN7@BlkMovDevi:
; Line 358
  0073f	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  00742	8a 42 23	 mov	 al, BYTE PTR [edx+35]
  00745	04 01		 add	 al, 1
  00747	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  0074a	88 41 23	 mov	 BYTE PTR [ecx+35], al
  0074d	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  00750	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00753	83 c0 24	 add	 eax, 36			; 00000024H
  00756	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00759	89 41 60	 mov	 DWORD PTR [ecx+96], eax
; Line 359
  0075c	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  0075f	8b 45 e4	 mov	 eax, DWORD PTR _deviceExtension$[ebp]
  00762	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00765	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCallDriver@8
  0076b	e9 c8 00 00 00	 jmp	 $LN53@BlkMovDevi
$LN5@BlkMovDevi:
; Line 361
  00770	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00773	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00776	83 ea 24	 sub	 edx, 36			; 00000024H
  00779	89 55 f8	 mov	 DWORD PTR _nextIrpStack$[ebp], edx
; Line 362
  0077c	8b 75 d8	 mov	 esi, DWORD PTR _currentIrpStack$[ebp]
  0077f	b9 09 00 00 00	 mov	 ecx, 9
  00784	8b 7d f8	 mov	 edi, DWORD PTR _nextIrpStack$[ebp]
  00787	f3 a5		 rep movsd
; Line 371
  00789	6a 01		 push	 1
  0078b	6a 01		 push	 1
  0078d	6a 01		 push	 1
  0078f	8b 45 08	 mov	 eax, DWORD PTR _DeviceObject$[ebp]
  00792	50		 push	 eax
  00793	68 00 00 00 00	 push	 OFFSET _Blk_Set_Drive_Layout_Completion@12
  00798	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  0079b	51		 push	 ecx
  0079c	e8 00 00 00 00	 call	 _IoSetCompletionRoutine@24
; Line 373
  007a1	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  007a4	8b 45 e4	 mov	 eax, DWORD PTR _deviceExtension$[ebp]
  007a7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  007aa	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCallDriver@8
  007b0	e9 83 00 00 00	 jmp	 $LN53@BlkMovDevi
$LN4@BlkMovDevi:
; Line 375
  007b5	c7 45 ac 03 01
	00 00		 mov	 DWORD PTR _status$[ebp], 259 ; 00000103H
$LN51@BlkMovDevi:
; Line 381
  007bc	81 7d ac 03 01
	00 00		 cmp	 DWORD PTR _status$[ebp], 259 ; 00000103H
  007c3	75 47		 jne	 SHORT $LN2@BlkMovDevi
; Line 383
  007c5	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  007c8	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  007cb	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  007cf	83 c8 01	 or	 eax, 1
  007d2	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  007d5	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  007d8	88 42 03	 mov	 BYTE PTR [edx+3], al
; Line 389
  007db	8b 45 e4	 mov	 eax, DWORD PTR _deviceExtension$[ebp]
  007de	83 c0 28	 add	 eax, 40			; 00000028H
  007e1	50		 push	 eax
  007e2	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  007e5	83 c2 58	 add	 edx, 88			; 00000058H
  007e8	8b 4d e4	 mov	 ecx, DWORD PTR _deviceExtension$[ebp]
  007eb	83 c1 20	 add	 ecx, 32			; 00000020H
  007ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@ExfInterlockedInsertTailList@12
; Line 395
  007f4	6a 00		 push	 0
  007f6	6a 00		 push	 0
  007f8	8b 4d e4	 mov	 ecx, DWORD PTR _deviceExtension$[ebp]
  007fb	83 c1 2c	 add	 ecx, 44			; 0000002cH
  007fe	51		 push	 ecx
  007ff	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__KeSetEvent@12
; Line 396
  00805	8b 45 ac	 mov	 eax, DWORD PTR _status$[ebp]
  00808	eb 2e		 jmp	 SHORT $LN53@BlkMovDevi
; Line 398
  0080a	eb 2c		 jmp	 SHORT $LN53@BlkMovDevi
$LN2@BlkMovDevi:
; Line 405
  0080c	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  0080f	8a 42 23	 mov	 al, BYTE PTR [edx+35]
  00812	04 01		 add	 al, 1
  00814	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00817	88 41 23	 mov	 BYTE PTR [ecx+35], al
  0081a	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  0081d	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00820	83 c0 24	 add	 eax, 36			; 00000024H
  00823	8b 4d 0c	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00826	89 41 60	 mov	 DWORD PTR [ecx+96], eax
; Line 412
  00829	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  0082c	8b 45 e4	 mov	 eax, DWORD PTR _deviceExtension$[ebp]
  0082f	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00832	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_@IofCallDriver@8
$LN53@BlkMovDevi:
; Line 414
  00838	5f		 pop	 edi
  00839	5e		 pop	 esi
  0083a	8b e5		 mov	 esp, ebp
  0083c	5d		 pop	 ebp
  0083d	c2 08 00	 ret	 8
$LN57@BlkMovDevi:
  00840	00 00 00 00	 DD	 $LN40@BlkMovDevi
  00844	00 00 00 00	 DD	 $LN30@BlkMovDevi
  00848	00 00 00 00	 DD	 $LN15@BlkMovDevi
  0084c	00 00 00 00	 DD	 $LN12@BlkMovDevi
  00850	00 00 00 00	 DD	 $LN11@BlkMovDevi
  00854	00 00 00 00	 DD	 $LN27@BlkMovDevi
  00858	00 00 00 00	 DD	 $LN41@BlkMovDevi
  0085c	00 00 00 00	 DD	 $LN34@BlkMovDevi
  00860	00 00 00 00	 DD	 $LN33@BlkMovDevi
  00864	00 00 00 00	 DD	 $LN39@BlkMovDevi
  00868	00 00 00 00	 DD	 $LN37@BlkMovDevi
  0086c	00 00 00 00	 DD	 $LN4@BlkMovDevi
  00870	00 00 00 00	 DD	 $LN50@BlkMovDevi
  00874	00 00 00 00	 DD	 $LN16@BlkMovDevi
  00878	00 00 00 00	 DD	 $LN18@BlkMovDevi
  0087c	00 00 00 00	 DD	 $LN17@BlkMovDevi
  00880	00 00 00 00	 DD	 $LN19@BlkMovDevi
  00884	00 00 00 00	 DD	 $LN51@BlkMovDevi
$LN56@BlkMovDevi:
  00888	00		 DB	 0
  00889	11		 DB	 17			; 00000011H
  0088a	11		 DB	 17			; 00000011H
  0088b	11		 DB	 17			; 00000011H
  0088c	01		 DB	 1
  0088d	11		 DB	 17			; 00000011H
  0088e	11		 DB	 17			; 00000011H
  0088f	11		 DB	 17			; 00000011H
  00890	02		 DB	 2
  00891	11		 DB	 17			; 00000011H
  00892	11		 DB	 17			; 00000011H
  00893	11		 DB	 17			; 00000011H
  00894	03		 DB	 3
  00895	11		 DB	 17			; 00000011H
  00896	11		 DB	 17			; 00000011H
  00897	11		 DB	 17			; 00000011H
  00898	04		 DB	 4
  00899	11		 DB	 17			; 00000011H
  0089a	11		 DB	 17			; 00000011H
  0089b	11		 DB	 17			; 00000011H
  0089c	05		 DB	 5
  0089d	11		 DB	 17			; 00000011H
  0089e	11		 DB	 17			; 00000011H
  0089f	11		 DB	 17			; 00000011H
  008a0	06		 DB	 6
  008a1	11		 DB	 17			; 00000011H
  008a2	11		 DB	 17			; 00000011H
  008a3	11		 DB	 17			; 00000011H
  008a4	11		 DB	 17			; 00000011H
  008a5	11		 DB	 17			; 00000011H
  008a6	11		 DB	 17			; 00000011H
  008a7	11		 DB	 17			; 00000011H
  008a8	07		 DB	 7
  008a9	11		 DB	 17			; 00000011H
  008aa	11		 DB	 17			; 00000011H
  008ab	11		 DB	 17			; 00000011H
  008ac	08		 DB	 8
  008ad	11		 DB	 17			; 00000011H
  008ae	11		 DB	 17			; 00000011H
  008af	11		 DB	 17			; 00000011H
  008b0	09		 DB	 9
  008b1	11		 DB	 17			; 00000011H
  008b2	11		 DB	 17			; 00000011H
  008b3	11		 DB	 17			; 00000011H
  008b4	0a		 DB	 10			; 0000000aH
  008b5	11		 DB	 17			; 00000011H
  008b6	11		 DB	 17			; 00000011H
  008b7	11		 DB	 17			; 00000011H
  008b8	00		 DB	 0
  008b9	11		 DB	 17			; 00000011H
  008ba	11		 DB	 17			; 00000011H
  008bb	11		 DB	 17			; 00000011H
  008bc	0b		 DB	 11			; 0000000bH
  008bd	11		 DB	 17			; 00000011H
  008be	11		 DB	 17			; 00000011H
  008bf	11		 DB	 17			; 00000011H
  008c0	00		 DB	 0
  008c1	11		 DB	 17			; 00000011H
  008c2	11		 DB	 17			; 00000011H
  008c3	11		 DB	 17			; 00000011H
  008c4	0c		 DB	 12			; 0000000cH
  008c5	11		 DB	 17			; 00000011H
  008c6	11		 DB	 17			; 00000011H
  008c7	11		 DB	 17			; 00000011H
  008c8	09		 DB	 9
  008c9	11		 DB	 17			; 00000011H
  008ca	11		 DB	 17			; 00000011H
  008cb	11		 DB	 17			; 00000011H
  008cc	0d		 DB	 13			; 0000000dH
  008cd	11		 DB	 17			; 00000011H
  008ce	11		 DB	 17			; 00000011H
  008cf	11		 DB	 17			; 00000011H
  008d0	0e		 DB	 14			; 0000000eH
  008d1	11		 DB	 17			; 00000011H
  008d2	11		 DB	 17			; 00000011H
  008d3	11		 DB	 17			; 00000011H
  008d4	0f		 DB	 15			; 0000000fH
  008d5	11		 DB	 17			; 00000011H
  008d6	11		 DB	 17			; 00000011H
  008d7	11		 DB	 17			; 00000011H
  008d8	00		 DB	 0
  008d9	11		 DB	 17			; 00000011H
  008da	11		 DB	 17			; 00000011H
  008db	11		 DB	 17			; 00000011H
  008dc	10		 DB	 16			; 00000010H
_BlkMovDeviceControl@8 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FK@JAEDPCKJ@?$CIInvokeOnSuccess?5?$HM?$HM?5InvokeOnErro@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
PUBLIC	??_C@_0BN@BBPNPCMG@c?3?2winddk?26000?2inc?2ddk?2wdm?4h?$AA@FNODOBFM@ ;  ?? ::FNODOBFM::`string'
EXTRN	__imp__RtlAssert@16:PROC
;	COMDAT ??_C@_0FK@JAEDPCKJ@?$CIInvokeOnSuccess?5?$HM?$HM?5InvokeOnErro@FNODOBFM@
; File c:\winddk\6000\inc\ddk\wdm.h
text$s	SEGMENT
??_C@_0FK@JAEDPCKJ@?$CIInvokeOnSuccess?5?$HM?$HM?5InvokeOnErro@FNODOBFM@ DB '('
	DB	'InvokeOnSuccess || InvokeOnError || InvokeOnCancel) ? (Comple'
	DB	'tionRoutine != NULL) : TRUE', 00H		;  ?? ::FNODOBFM::`string'
text$s	ENDS
;	COMDAT ??_C@_0BN@BBPNPCMG@c?3?2winddk?26000?2inc?2ddk?2wdm?4h?$AA@FNODOBFM@
text$s	SEGMENT
??_C@_0BN@BBPNPCMG@c?3?2winddk?26000?2inc?2ddk?2wdm?4h?$AA@FNODOBFM@ DB 'c'
	DB	':\winddk\6000\inc\ddk\wdm.h', 00H		;  ?? ::FNODOBFM::`string'
; Function compile flags: /Odtp
text$s	ENDS
;	COMDAT _IoSetCompletionRoutine@24
_TEXT	SEGMENT
tv78 = -12						; size = 4
tv72 = -8						; size = 4
_irpSp$ = -4						; size = 4
_Irp$ = 8						; size = 4
_CompletionRoutine$ = 12				; size = 4
_Context$ = 16						; size = 4
_InvokeOnSuccess$ = 20					; size = 1
_InvokeOnError$ = 24					; size = 1
_InvokeOnCancel$ = 28					; size = 1
_IoSetCompletionRoutine@24 PROC				; COMDAT
; Line 21007
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
  00005	83 ec 0c	 sub	 esp, 12			; 0000000cH
; Line 21009
  00008	0f b6 45 14	 movzx	 eax, BYTE PTR _InvokeOnSuccess$[ebp]
  0000c	85 c0		 test	 eax, eax
  0000e	75 19		 jne	 SHORT $LN6@IoSetCompl
  00010	0f b6 4d 18	 movzx	 ecx, BYTE PTR _InvokeOnError$[ebp]
  00014	85 c9		 test	 ecx, ecx
  00016	75 11		 jne	 SHORT $LN6@IoSetCompl
  00018	0f b6 55 1c	 movzx	 edx, BYTE PTR _InvokeOnCancel$[ebp]
  0001c	85 d2		 test	 edx, edx
  0001e	75 09		 jne	 SHORT $LN6@IoSetCompl
  00020	c7 45 f8 01 00
	00 00		 mov	 DWORD PTR tv72[ebp], 1
  00027	eb 0c		 jmp	 SHORT $LN7@IoSetCompl
$LN6@IoSetCompl:
  00029	33 c0		 xor	 eax, eax
  0002b	83 7d 0c 00	 cmp	 DWORD PTR _CompletionRoutine$[ebp], 0
  0002f	0f 95 c0	 setne	 al
  00032	89 45 f8	 mov	 DWORD PTR tv72[ebp], eax
$LN7@IoSetCompl:
  00035	83 7d f8 00	 cmp	 DWORD PTR tv72[ebp], 0
  00039	75 20		 jne	 SHORT $LN8@IoSetCompl
  0003b	6a 00		 push	 0
  0003d	68 11 52 00 00	 push	 21009			; 00005211H
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BBPNPCMG@c?3?2winddk?26000?2inc?2ddk?2wdm?4h?$AA@FNODOBFM@
  00047	68 00 00 00 00	 push	 OFFSET ??_C@_0FK@JAEDPCKJ@?$CIInvokeOnSuccess?5?$HM?$HM?5InvokeOnErro@FNODOBFM@
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RtlAssert@16
  00052	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR tv78[ebp], 0
  00059	eb 07		 jmp	 SHORT $LN9@IoSetCompl
$LN8@IoSetCompl:
  0005b	c7 45 f4 01 00
	00 00		 mov	 DWORD PTR tv78[ebp], 1
$LN9@IoSetCompl:
; Line 21010
  00062	8b 4d 08	 mov	 ecx, DWORD PTR _Irp$[ebp]
  00065	8b 51 60	 mov	 edx, DWORD PTR [ecx+96]
  00068	83 ea 24	 sub	 edx, 36			; 00000024H
  0006b	89 55 fc	 mov	 DWORD PTR _irpSp$[ebp], edx
; Line 21011
  0006e	8b 45 fc	 mov	 eax, DWORD PTR _irpSp$[ebp]
  00071	8b 4d 0c	 mov	 ecx, DWORD PTR _CompletionRoutine$[ebp]
  00074	89 48 1c	 mov	 DWORD PTR [eax+28], ecx
; Line 21012
  00077	8b 55 fc	 mov	 edx, DWORD PTR _irpSp$[ebp]
  0007a	8b 45 10	 mov	 eax, DWORD PTR _Context$[ebp]
  0007d	89 42 20	 mov	 DWORD PTR [edx+32], eax
; Line 21013
  00080	8b 4d fc	 mov	 ecx, DWORD PTR _irpSp$[ebp]
  00083	c6 41 03 00	 mov	 BYTE PTR [ecx+3], 0
; Line 21015
  00087	0f b6 55 14	 movzx	 edx, BYTE PTR _InvokeOnSuccess$[ebp]
  0008b	85 d2		 test	 edx, edx
  0008d	74 07		 je	 SHORT $LN3@IoSetCompl
; Line 21016
  0008f	8b 45 fc	 mov	 eax, DWORD PTR _irpSp$[ebp]
  00092	c6 40 03 40	 mov	 BYTE PTR [eax+3], 64	; 00000040H
$LN3@IoSetCompl:
; Line 21019
  00096	0f b6 4d 18	 movzx	 ecx, BYTE PTR _InvokeOnError$[ebp]
  0009a	85 c9		 test	 ecx, ecx
  0009c	74 12		 je	 SHORT $LN2@IoSetCompl
; Line 21020
  0009e	8b 55 fc	 mov	 edx, DWORD PTR _irpSp$[ebp]
  000a1	0f b6 42 03	 movzx	 eax, BYTE PTR [edx+3]
  000a5	0d 80 00 00 00	 or	 eax, 128		; 00000080H
  000aa	8b 4d fc	 mov	 ecx, DWORD PTR _irpSp$[ebp]
  000ad	88 41 03	 mov	 BYTE PTR [ecx+3], al
$LN2@IoSetCompl:
; Line 21023
  000b0	0f b6 55 1c	 movzx	 edx, BYTE PTR _InvokeOnCancel$[ebp]
  000b4	85 d2		 test	 edx, edx
  000b6	74 10		 je	 SHORT $LN4@IoSetCompl
; Line 21024
  000b8	8b 45 fc	 mov	 eax, DWORD PTR _irpSp$[ebp]
  000bb	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  000bf	83 c9 20	 or	 ecx, 32			; 00000020H
  000c2	8b 55 fc	 mov	 edx, DWORD PTR _irpSp$[ebp]
  000c5	88 4a 03	 mov	 BYTE PTR [edx+3], cl
$LN4@IoSetCompl:
; Line 21026
  000c8	8b e5		 mov	 esp, ebp
  000ca	5d		 pop	 ebp
  000cb	c2 18 00	 ret	 24			; 00000018H
_IoSetCompletionRoutine@24 ENDP
_TEXT	ENDS
EXTRN	_g_bBlkMovSucc:DWORD
; Function compile flags: /Odtp
;	COMDAT _Blk_Set_Drive_Layout_Completion@12
_TEXT	SEGMENT
_DeviceObject$ = 8					; size = 4
_Irp$ = 12						; size = 4
_Context$ = 16						; size = 4
_Blk_Set_Drive_Layout_Completion@12 PROC		; COMDAT
; File f:\tech\blkmover\cur_ver\sys\2000\devcotl.c
; Line 423
  00000	8b ff		 npad	 2
  00002	55		 push	 ebp
  00003	8b ec		 mov	 ebp, esp
; Line 424
  00005	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _g_bBlkMovSucc, 0
  0000c	74 0a		 je	 SHORT $LN2@Blk_Set_Dr
; Line 425
  0000e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _g_bPartitionSet, 1
$LN2@Blk_Set_Dr:
; Line 427
  00018	8b 45 0c	 mov	 eax, DWORD PTR _Irp$[ebp]
  0001b	0f b6 48 21	 movzx	 ecx, BYTE PTR [eax+33]
  0001f	85 c9		 test	 ecx, ecx
  00021	74 16		 je	 SHORT $LN1@Blk_Set_Dr
; Line 429
  00023	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  00026	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00029	0f b6 48 03	 movzx	 ecx, BYTE PTR [eax+3]
  0002d	83 c9 01	 or	 ecx, 1
  00030	8b 55 0c	 mov	 edx, DWORD PTR _Irp$[ebp]
  00033	8b 42 60	 mov	 eax, DWORD PTR [edx+96]
  00036	88 48 03	 mov	 BYTE PTR [eax+3], cl
$LN1@Blk_Set_Dr:
; Line 431
  00039	33 c0		 xor	 eax, eax
; Line 433
  0003b	5d		 pop	 ebp
  0003c	c2 0c 00	 ret	 12			; 0000000cH
_Blk_Set_Drive_Layout_Completion@12 ENDP
_TEXT	ENDS
END
